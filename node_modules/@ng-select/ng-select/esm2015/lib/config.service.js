/**
 * @fileoverview added by tsickle
 * Generated from: lib/config.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
export class NgSelectConfig {
    constructor() {
        this.notFoundText = 'No items found';
        this.typeToSearchText = 'Type to search';
        this.addTagText = 'Add item';
        this.loadingText = 'Loading...';
        this.clearAllText = 'Clear all';
        this.disableVirtualScroll = true;
        this.openOnEnter = true;
        this.appearance = 'underline';
    }
}
NgSelectConfig.ɵfac = function NgSelectConfig_Factory(t) { return new (t || NgSelectConfig)(); };
/** @nocollapse */ NgSelectConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgSelectConfig_Factory() { return new NgSelectConfig(); }, token: NgSelectConfig, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgSelectConfig, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return []; }, null); })();
if (false) {
    /** @type {?} */
    NgSelectConfig.prototype.placeholder;
    /** @type {?} */
    NgSelectConfig.prototype.notFoundText;
    /** @type {?} */
    NgSelectConfig.prototype.typeToSearchText;
    /** @type {?} */
    NgSelectConfig.prototype.addTagText;
    /** @type {?} */
    NgSelectConfig.prototype.loadingText;
    /** @type {?} */
    NgSelectConfig.prototype.clearAllText;
    /** @type {?} */
    NgSelectConfig.prototype.disableVirtualScroll;
    /** @type {?} */
    NgSelectConfig.prototype.openOnEnter;
    /** @type {?} */
    NgSelectConfig.prototype.appendTo;
    /** @type {?} */
    NgSelectConfig.prototype.bindValue;
    /** @type {?} */
    NgSelectConfig.prototype.appearance;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9uZy1zZWxlY3QvbGliL2NvbmZpZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQzs7QUFFQSxNQUFNLE9BQU8sY0FBYztBQUMzQixJQUZBO0FBQWdCLFFBR1osaUJBQVksR0FBRyxnQkFBZ0IsQ0FBQztBQUNwQyxRQUFJLHFCQUFnQixHQUFHLGdCQUFnQixDQUFDO0FBQ3hDLFFBQUksZUFBVSxHQUFHLFVBQVUsQ0FBQztBQUM1QixRQUFJLGdCQUFXLEdBQUcsWUFBWSxDQUFDO0FBQy9CLFFBQUksaUJBQVksR0FBRyxXQUFXLENBQUM7QUFDL0IsUUFBSSx5QkFBb0IsR0FBRyxJQUFJLENBQUM7QUFDaEMsUUFBSSxnQkFBVyxHQUFHLElBQUksQ0FBQztBQUN2QixRQUVJLGVBQVUsR0FBRyxXQUFXLENBQUM7QUFDN0IsS0FBQztBQUNEOzBDQWRDLFVBQVUsU0FBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsY0FDN0I7QUFBQzs7OztnREFNTjtBQUFDO0FBQWE7QUFDWCxJQU5DLHFDQUFvQjtBQUN4QjtBQUFxQixJQUFqQixzQ0FBZ0M7QUFDcEM7QUFBcUIsSUFBakIsMENBQW9DO0FBQ3hDO0FBQXFCLElBQWpCLG9DQUF3QjtBQUM1QjtBQUFxQixJQUFqQixxQ0FBMkI7QUFDL0I7QUFBcUIsSUFBakIsc0NBQTJCO0FBQy9CO0FBQXFCLElBQWpCLDhDQUE0QjtBQUNoQztBQUFxQixJQUFqQixxQ0FBbUI7QUFDdkI7QUFBcUIsSUFBakIsa0NBQWlCO0FBQ3JCO0FBQXFCLElBQWpCLG1DQUFrQjtBQUN0QjtBQUFxQixJQUFqQixvQ0FBeUI7QUFDN0I7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBOZ1NlbGVjdENvbmZpZyB7XG4gICAgcGxhY2Vob2xkZXI6IHN0cmluZztcbiAgICBub3RGb3VuZFRleHQgPSAnTm8gaXRlbXMgZm91bmQnO1xuICAgIHR5cGVUb1NlYXJjaFRleHQgPSAnVHlwZSB0byBzZWFyY2gnO1xuICAgIGFkZFRhZ1RleHQgPSAnQWRkIGl0ZW0nO1xuICAgIGxvYWRpbmdUZXh0ID0gJ0xvYWRpbmcuLi4nO1xuICAgIGNsZWFyQWxsVGV4dCA9ICdDbGVhciBhbGwnO1xuICAgIGRpc2FibGVWaXJ0dWFsU2Nyb2xsID0gdHJ1ZTtcbiAgICBvcGVuT25FbnRlciA9IHRydWU7XG4gICAgYXBwZW5kVG86IHN0cmluZztcbiAgICBiaW5kVmFsdWU6IHN0cmluZztcbiAgICBhcHBlYXJhbmNlID0gJ3VuZGVybGluZSc7XG59XG4iXX0=