/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Renderer2, ElementRef, Output, EventEmitter, Inject, Input, NgZone } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { Observable, Subject } from 'rxjs';
import { requestIdleCallbackObservable } from './request-idle-callback';
import { switchMapTo, takeUntil } from 'rxjs/operators';
/** @type {?} */
import * as ɵngcc0 from '@angular/core';
const clickElements = new Set();
/** @type {?} */
const eventName = typeof window !== 'undefined' && typeof window['Hammer'] !== 'undefined'
    ? 'tap'
    : 'click';
export class ClickDirective {
    /**
     * @param {?} renderer
     * @param {?} elm
     * @param {?} document
     * @param {?} zone
     */
    constructor(renderer, elm, document, zone) {
        this.renderer = renderer;
        this.elm = elm;
        this.document = document;
        this.zone = zone;
        this.clickListenerDisabled = false;
        this.click = new EventEmitter(); // tslint:disable-line
        // tslint:disable-line
        this.destroy$ = new Subject();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.clickListenerDisabled) {
            this.renderer.setAttribute(this.elm.nativeElement, 'data-calendar-clickable', 'true');
            clickElements.add(this.elm.nativeElement);
            // issue #942 - lazily initialise all click handlers after initial render as hammerjs is slow
            requestIdleCallbackObservable()
                .pipe(switchMapTo(this.listen()), takeUntil(this.destroy$))
                .subscribe((/**
             * @param {?} event
             * @return {?}
             */
            event => {
                // prevent child click events from firing on parent elements that also have click events
                /** @type {?} */
                let nearestClickableParent = (/** @type {?} */ (event.target));
                while (!clickElements.has(nearestClickableParent) &&
                    nearestClickableParent !== this.document.body) {
                    nearestClickableParent = nearestClickableParent.parentElement;
                }
                /** @type {?} */
                const isThisClickableElement = this.elm.nativeElement === nearestClickableParent;
                if (isThisClickableElement) {
                    this.zone.run((/**
                     * @return {?}
                     */
                    () => {
                        this.click.next(event);
                    }));
                }
            }));
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy$.next();
        clickElements.delete(this.elm.nativeElement);
    }
    /**
     * @private
     * @return {?}
     */
    listen() {
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        observer => {
            return this.renderer.listen(this.elm.nativeElement, eventName, (/**
             * @param {?} event
             * @return {?}
             */
            event => {
                observer.next(event);
            }));
        }));
    }
}
ClickDirective.ɵfac = function ClickDirective_Factory(t) { return new (t || ClickDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
ClickDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ClickDirective, selectors: [["", "mwlClick", ""]], inputs: { clickListenerDisabled: "clickListenerDisabled" }, outputs: { click: "mwlClick" } });
/** @nocollapse */
ClickDirective.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: NgZone }
];
ClickDirective.propDecorators = {
    clickListenerDisabled: [{ type: Input }],
    click: [{ type: Output, args: ['mwlClick',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClickDirective, [{
        type: Directive,
        args: [{
                selector: '[mwlClick]'
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: ɵngcc0.NgZone }]; }, { clickListenerDisabled: [{
            type: Input
        }], click: [{
            type: Output,
            args: ['mwlClick']
        }] }); })();
if (false) {
    /** @type {?} */
    ClickDirective.prototype.clickListenerDisabled;
    /** @type {?} */
    ClickDirective.prototype.click;
    /**
     * @type {?}
     * @private
     */
    ClickDirective.prototype.destroy$;
    /**
     * @type {?}
     * @private
     */
    ClickDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    ClickDirective.prototype.elm;
    /**
     * @type {?}
     * @private
     */
    ClickDirective.prototype.document;
    /**
     * @type {?}
     * @private
     */
    ClickDirective.prototype.zone;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpY2suZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyLWNhbGVuZGFyL21vZHVsZXMvY29tbW9uL2NsaWNrLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxTQUFTLEVBQ1QsVUFBVSxFQUdWLE1BQU0sRUFDTixZQUFZLEVBQ1osTUFBTSxFQUNOLEtBQUssRUFDTCxNQUFNLEVBQ1AsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzNDLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEQ7O0FBQ2dCLE1BQVYsYUFBYSxHQUFHLElBQUksR0FBRyxFQUFlO0FBQzVDO0FBQ2dCLE1BQVYsU0FBUyxHQUNiLE9BQU8sTUFBTSxLQUFLLFdBQVcsSUFBSSxPQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxXQUFXO0FBQzFFLElBQUksQ0FBQyxDQUFDLEtBQUs7QUFDWCxJQUFJLENBQUMsQ0FBQyxPQUFPO0FBS2IsTUFBTSxPQUFPLGNBQWM7QUFBRztBQUFRO0FBQ2hDO0FBQXNCO0FBRWhCO0FBQXVCO0FBQVEsSUFJekMsWUFDVSxRQUFtQixFQUNuQixHQUE0QixFQUNWLFFBQVEsRUFDMUIsSUFBWTtBQUNyQixRQUpTLGFBQVEsR0FBUixRQUFRLENBQVc7QUFBQyxRQUNwQixRQUFHLEdBQUgsR0FBRyxDQUF5QjtBQUFDLFFBQ1gsYUFBUSxHQUFSLFFBQVEsQ0FBQTtBQUFDLFFBQzNCLFNBQUksR0FBSixJQUFJLENBQVE7QUFDeEIsUUFYVywwQkFBcUIsR0FBRyxLQUFLLENBQUM7QUFDekMsUUFDc0IsVUFBSyxHQUFHLElBQUksWUFBWSxFQUFjLENBQUMsQ0FBQyxzQkFBc0I7QUFDcEY7QUFDOEIsUUFBcEIsYUFBUSxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7QUFDbkMsSUFNSyxDQUFDO0FBQ047QUFDTztBQUNGO0FBQVEsSUFEWCxRQUFRO0FBQUssUUFDWCxJQUFJLENBQUMsSUFBSSxDQUFDLHFCQUFxQixFQUFFO0FBQ3JDLFlBQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQ3hCLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUN0Qix5QkFBeUIsRUFDekIsTUFBTSxDQUNQLENBQUM7QUFDUixZQUFNLGFBQWEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNoRCxZQUNNLDZGQUE2RjtBQUNuRyxZQUFNLDZCQUE2QixFQUFFO0FBQ3JDLGlCQUFTLElBQUksQ0FDSCxXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQzFCLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQ3pCO0FBQ1QsaUJBQVMsU0FBUztBQUFNO0FBQ0U7QUFBMkI7QUFBZ0IsWUFEbEQsS0FBSyxDQUFDLEVBQUU7QUFDM0I7QUFDTTtBQUFpQyxvQkFBekIsc0JBQXNCLEdBQUcsbUJBQUEsS0FBSyxDQUFDLE1BQU0sRUFBZTtBQUNsRSxnQkFBVSxPQUNFLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQztBQUN0RCxvQkFBWSxzQkFBc0IsS0FBSyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFDN0M7QUFDWixvQkFBWSxzQkFBc0IsR0FBRyxzQkFBc0IsQ0FBQyxhQUFhLENBQUM7QUFDMUUsaUJBQVc7QUFDWDtBQUFpQyxzQkFBakIsc0JBQXNCLEdBQzFCLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxLQUFLLHNCQUFzQjtBQUM3RCxnQkFBVSxJQUFJLHNCQUFzQixFQUFFO0FBQ3RDLG9CQUFZLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRztBQUFNO0FBQ0M7QUFFOUIsb0JBSHdCLEdBQUcsRUFBRTtBQUMvQix3QkFBYyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNyQyxvQkFBWSxDQUFDLEVBQUMsQ0FBQztBQUNmLGlCQUFXO0FBQ1gsWUFBUSxDQUFDLEVBQUMsQ0FBQztBQUNYLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSDtBQUNPO0FBQ0w7QUFBUSxJQURSLFdBQVc7QUFBSyxRQUNkLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDekIsUUFBSSxhQUFhLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDakQsSUFBRSxDQUFDO0FBQ0g7QUFDTztBQUNMO0FBQW1CO0FBQVEsSUFEbkIsTUFBTTtBQUNoQixRQUFJLE9BQU8sSUFBSSxVQUFVO0FBQU07QUFDckI7QUFBdUI7QUFBWSxRQURQLFFBQVEsQ0FBQyxFQUFFO0FBQ2pELFlBQU0sT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxTQUFTO0FBQU87QUFDaEQ7QUFJekI7QUFDYyxZQU5zRCxLQUFLLENBQUMsRUFBRTtBQUM3RSxnQkFBUSxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzdCLFlBQU0sQ0FBQyxFQUFDLENBQUM7QUFDVCxRQUFJLENBQUMsRUFBQyxDQUFDO0FBQ1AsSUFBRSxDQUFDO0FBQ0g7MENBaEVDLFNBQVMsU0FBQyxrQkFDVCxRQUFRLEVBQUUsWUFBWSxjQUN2Qjt3TUFDSTtBQUFDO0FBQW1CO0FBQ25CLFlBMUJKLFNBQVM7QUFDVCxZQUFBLFVBQVU7QUFDViw0Q0FpQ0csTUFBTSxTQUFDLFFBQVE7QUFBUyxZQTNCM0IsTUFBTTtBQUNOO0FBQUc7QUFDVSxvQ0FnQlosS0FBSztBQUFLLG9CQUVWLE1BQU0sU0FBQyxVQUFVO0FBQU07Ozs7Ozs7Ozs7Ozs7O29CQUFFO0FBQUM7QUFBYTtBQUFxQixJQUY3RCwrQ0FBdUM7QUFDekM7QUFDb0IsSUFBbEIsK0JBQTJEO0FBQUM7QUFBUTtBQUVyRTtBQUFnQjtBQUFRLElBQXZCLGtDQUFpQztBQUNuQztBQUNPO0FBQ0U7QUFBZ0I7QUFDekIsSUFESSxrQ0FBMkI7QUFBQztBQUN6QjtBQUFpQjtBQUFnQjtBQUNsQyxJQURGLDZCQUFvQztBQUFDO0FBQ2xDO0FBQWlCO0FBQ3hCO0FBQVEsSUFESixrQ0FBa0M7QUFBQztBQUNoQztBQUFpQjtBQUdqQjtBQUFRLElBSFgsOEJBQW9CO0FBQ3hCO0FBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIFJlbmRlcmVyMixcbiAgRWxlbWVudFJlZixcbiAgT25Jbml0LFxuICBPbkRlc3Ryb3ksXG4gIE91dHB1dCxcbiAgRXZlbnRFbWl0dGVyLFxuICBJbmplY3QsXG4gIElucHV0LFxuICBOZ1pvbmVcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyByZXF1ZXN0SWRsZUNhbGxiYWNrT2JzZXJ2YWJsZSB9IGZyb20gJy4vcmVxdWVzdC1pZGxlLWNhbGxiYWNrJztcbmltcG9ydCB7IHN3aXRjaE1hcFRvLCB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmNvbnN0IGNsaWNrRWxlbWVudHMgPSBuZXcgU2V0PEhUTUxFbGVtZW50PigpO1xuXG5jb25zdCBldmVudE5hbWU6IHN0cmluZyA9XG4gIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3dbJ0hhbW1lciddICE9PSAndW5kZWZpbmVkJ1xuICAgID8gJ3RhcCdcbiAgICA6ICdjbGljayc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1ttd2xDbGlja10nXG59KVxuZXhwb3J0IGNsYXNzIENsaWNrRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICBASW5wdXQoKSBjbGlja0xpc3RlbmVyRGlzYWJsZWQgPSBmYWxzZTtcblxuICBAT3V0cHV0KCdtd2xDbGljaycpIGNsaWNrID0gbmV3IEV2ZW50RW1pdHRlcjxNb3VzZUV2ZW50PigpOyAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lXG5cbiAgcHJpdmF0ZSBkZXN0cm95JCA9IG5ldyBTdWJqZWN0KCk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgIHByaXZhdGUgZWxtOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICBASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIGRvY3VtZW50LFxuICAgIHByaXZhdGUgem9uZTogTmdab25lXG4gICkge31cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuY2xpY2tMaXN0ZW5lckRpc2FibGVkKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZShcbiAgICAgICAgdGhpcy5lbG0ubmF0aXZlRWxlbWVudCxcbiAgICAgICAgJ2RhdGEtY2FsZW5kYXItY2xpY2thYmxlJyxcbiAgICAgICAgJ3RydWUnXG4gICAgICApO1xuICAgICAgY2xpY2tFbGVtZW50cy5hZGQodGhpcy5lbG0ubmF0aXZlRWxlbWVudCk7XG5cbiAgICAgIC8vIGlzc3VlICM5NDIgLSBsYXppbHkgaW5pdGlhbGlzZSBhbGwgY2xpY2sgaGFuZGxlcnMgYWZ0ZXIgaW5pdGlhbCByZW5kZXIgYXMgaGFtbWVyanMgaXMgc2xvd1xuICAgICAgcmVxdWVzdElkbGVDYWxsYmFja09ic2VydmFibGUoKVxuICAgICAgICAucGlwZShcbiAgICAgICAgICBzd2l0Y2hNYXBUbyh0aGlzLmxpc3RlbigpKSxcbiAgICAgICAgICB0YWtlVW50aWwodGhpcy5kZXN0cm95JClcbiAgICAgICAgKVxuICAgICAgICAuc3Vic2NyaWJlKGV2ZW50ID0+IHtcbiAgICAgICAgICAvLyBwcmV2ZW50IGNoaWxkIGNsaWNrIGV2ZW50cyBmcm9tIGZpcmluZyBvbiBwYXJlbnQgZWxlbWVudHMgdGhhdCBhbHNvIGhhdmUgY2xpY2sgZXZlbnRzXG4gICAgICAgICAgbGV0IG5lYXJlc3RDbGlja2FibGVQYXJlbnQgPSBldmVudC50YXJnZXQgYXMgSFRNTEVsZW1lbnQ7XG4gICAgICAgICAgd2hpbGUgKFxuICAgICAgICAgICAgIWNsaWNrRWxlbWVudHMuaGFzKG5lYXJlc3RDbGlja2FibGVQYXJlbnQpICYmXG4gICAgICAgICAgICBuZWFyZXN0Q2xpY2thYmxlUGFyZW50ICE9PSB0aGlzLmRvY3VtZW50LmJvZHlcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIG5lYXJlc3RDbGlja2FibGVQYXJlbnQgPSBuZWFyZXN0Q2xpY2thYmxlUGFyZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IGlzVGhpc0NsaWNrYWJsZUVsZW1lbnQgPVxuICAgICAgICAgICAgdGhpcy5lbG0ubmF0aXZlRWxlbWVudCA9PT0gbmVhcmVzdENsaWNrYWJsZVBhcmVudDtcbiAgICAgICAgICBpZiAoaXNUaGlzQ2xpY2thYmxlRWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy56b25lLnJ1bigoKSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMuY2xpY2submV4dChldmVudCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuZGVzdHJveSQubmV4dCgpO1xuICAgIGNsaWNrRWxlbWVudHMuZGVsZXRlKHRoaXMuZWxtLm5hdGl2ZUVsZW1lbnQpO1xuICB9XG5cbiAgcHJpdmF0ZSBsaXN0ZW4oKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlPE1vdXNlRXZlbnQ+KG9ic2VydmVyID0+IHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcmVyLmxpc3Rlbih0aGlzLmVsbS5uYXRpdmVFbGVtZW50LCBldmVudE5hbWUsIGV2ZW50ID0+IHtcbiAgICAgICAgb2JzZXJ2ZXIubmV4dChldmVudCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufVxuIl19