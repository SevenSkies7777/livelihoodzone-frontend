/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe, LOCALE_ID, Inject } from '@angular/core';
import { CalendarDateFormatter } from './calendar-date-formatter.provider';
/**
 * This pipe is primarily for rendering the current view title. Example usage:
 * ```typescript
 * // where `viewDate` is a `Date` and view is `'month' | 'week' | 'day'`
 * {{ viewDate | calendarDate:(view + 'ViewTitle'):'en' }}
 * ```
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './calendar-date-formatter.provider';
export class CalendarDatePipe {
    /**
     * @param {?} dateFormatter
     * @param {?} locale
     */
    constructor(dateFormatter, locale) {
        this.dateFormatter = dateFormatter;
        this.locale = locale;
    }
    /**
     * @param {?} date
     * @param {?} method
     * @param {?=} locale
     * @param {?=} weekStartsOn
     * @param {?=} excludeDays
     * @param {?=} daysInWeek
     * @return {?}
     */
    transform(date, method, locale = this.locale, weekStartsOn = 0, excludeDays = [], daysInWeek) {
        if (typeof this.dateFormatter[method] === 'undefined') {
            /** @type {?} */
            const allowedMethods = Object.getOwnPropertyNames(Object.getPrototypeOf(CalendarDateFormatter.prototype)).filter((/**
             * @param {?} iMethod
             * @return {?}
             */
            iMethod => iMethod !== 'constructor'));
            throw new Error(`${method} is not a valid date formatter. Can only be one of ${allowedMethods.join(', ')}`);
        }
        return this.dateFormatter[method]({
            date,
            locale,
            weekStartsOn,
            excludeDays,
            daysInWeek
        });
    }
}
CalendarDatePipe.ɵfac = function CalendarDatePipe_Factory(t) { return new (t || CalendarDatePipe)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CalendarDateFormatter), ɵngcc0.ɵɵdirectiveInject(LOCALE_ID)); };
CalendarDatePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "calendarDate", type: CalendarDatePipe, pure: true });
/** @nocollapse */
CalendarDatePipe.ctorParameters = () => [
    { type: CalendarDateFormatter },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CalendarDatePipe, [{
        type: Pipe,
        args: [{
                name: 'calendarDate'
            }]
    }], function () { return [{ type: ɵngcc1.CalendarDateFormatter }, { type: String, decorators: [{
                type: Inject,
                args: [LOCALE_ID]
            }] }]; }, null); })();
if (false) {
    /**
     * @type {?}
     * @private
     */
    CalendarDatePipe.prototype.dateFormatter;
    /**
     * @type {?}
     * @private
     */
    CalendarDatePipe.prototype.locale;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXItZGF0ZS5waXBlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyLWNhbGVuZGFyL21vZHVsZXMvY29tbW9uL2NhbGVuZGFyLWRhdGUucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2RSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUMzRTtBQUNHO0FBQzJFO0FBQzlEO0FBQ3lEO0FBQ2Y7QUFDcEQ7OztBQUtOLE1BQU0sT0FBTyxnQkFBZ0I7QUFBRztBQUFRO0FBRXhDO0FBQXlCO0FBQVEsSUFEL0IsWUFDVSxhQUFvQyxFQUNqQixNQUFjO0FBQzFDLFFBRlMsa0JBQWEsR0FBYixhQUFhLENBQXVCO0FBQUMsUUFDbEIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtBQUM3QyxJQUFLLENBQUM7QUFDTjtBQUNPO0FBRU47QUFDSztBQUEwQjtBQUVoQztBQUErQjtBQUUxQjtBQUNLO0FBQVEsSUFSaEIsU0FBUyxDQUNQLElBQVUsRUFDVixNQUFjLEVBQ2QsU0FBaUIsSUFBSSxDQUFDLE1BQU0sRUFDNUIsZUFBdUIsQ0FBQyxFQUN4QixjQUF3QixFQUFFLEVBQzFCLFVBQW1CO0FBQ3BCLFFBQ0MsSUFBSSxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEtBQUssV0FBVyxFQUFFO0FBQzNEO0FBQTZCLGtCQUFqQixjQUFjLEdBQUcsTUFBTSxDQUFDLG1CQUFtQixDQUMvQyxNQUFNLENBQUMsY0FBYyxDQUFDLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxDQUN2RCxDQUFDLE1BQU07QUFBTTtBQUNwQjtBQUNJO0FBQWdCLFlBRkwsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEtBQUssYUFBYSxFQUFDO0FBQ3BELFlBQU0sTUFBTSxJQUFJLEtBQUssQ0FDYixHQUFHLE1BQU0sc0RBQXNELGNBQWMsQ0FBQyxJQUFJLENBQ2hGLElBQUksQ0FDTCxFQUFFLENBQ0osQ0FBQztBQUNSLFNBQUs7QUFDTCxRQUFJLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN0QyxZQUFNLElBQUk7QUFDVixZQUFNLE1BQU07QUFDWixZQUFNLFlBQVk7QUFDbEIsWUFBTSxXQUFXO0FBQ2pCLFlBQU0sVUFBVTtBQUNoQixTQUFLLENBQUMsQ0FBQztBQUNQLElBQUUsQ0FBQztBQUNIOzRDQW5DQyxJQUFJLFNBQUMsa0JBQ0osSUFBSSxFQUFFLGNBQWMsY0FDckI7MkdBQ0k7QUFBQztBQUFtQjtBQUNmLFlBYkQscUJBQXFCO0FBQUkseUNBZTdCLE1BQU0sU0FBQyxTQUFTO0FBQVE7Ozs7Ozs7OztrQ0FBRTtBQUFDO0FBQWE7QUFFN0M7QUFFRztBQUNBO0FBQVEsSUFOUCx5Q0FBNEM7QUFBQztBQUMxQztBQUFpQjtBQUFnQjtBQUN0QyxJQURFLGtDQUF5QztBQUM3QztBQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSwgTE9DQUxFX0lELCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENhbGVuZGFyRGF0ZUZvcm1hdHRlciB9IGZyb20gJy4vY2FsZW5kYXItZGF0ZS1mb3JtYXR0ZXIucHJvdmlkZXInO1xuXG4vKipcbiAqIFRoaXMgcGlwZSBpcyBwcmltYXJpbHkgZm9yIHJlbmRlcmluZyB0aGUgY3VycmVudCB2aWV3IHRpdGxlLiBFeGFtcGxlIHVzYWdlOlxuICogYGBgdHlwZXNjcmlwdFxuICogLy8gd2hlcmUgYHZpZXdEYXRlYCBpcyBhIGBEYXRlYCBhbmQgdmlldyBpcyBgJ21vbnRoJyB8ICd3ZWVrJyB8ICdkYXknYFxuICoge3sgdmlld0RhdGUgfCBjYWxlbmRhckRhdGU6KHZpZXcgKyAnVmlld1RpdGxlJyk6J2VuJyB9fVxuICogYGBgXG4gKi9cbkBQaXBlKHtcbiAgbmFtZTogJ2NhbGVuZGFyRGF0ZSdcbn0pXG5leHBvcnQgY2xhc3MgQ2FsZW5kYXJEYXRlUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGRhdGVGb3JtYXR0ZXI6IENhbGVuZGFyRGF0ZUZvcm1hdHRlcixcbiAgICBASW5qZWN0KExPQ0FMRV9JRCkgcHJpdmF0ZSBsb2NhbGU6IHN0cmluZ1xuICApIHt9XG5cbiAgdHJhbnNmb3JtKFxuICAgIGRhdGU6IERhdGUsXG4gICAgbWV0aG9kOiBzdHJpbmcsXG4gICAgbG9jYWxlOiBzdHJpbmcgPSB0aGlzLmxvY2FsZSxcbiAgICB3ZWVrU3RhcnRzT246IG51bWJlciA9IDAsXG4gICAgZXhjbHVkZURheXM6IG51bWJlcltdID0gW10sXG4gICAgZGF5c0luV2Vlaz86IG51bWJlclxuICApOiBzdHJpbmcge1xuICAgIGlmICh0eXBlb2YgdGhpcy5kYXRlRm9ybWF0dGVyW21ldGhvZF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zdCBhbGxvd2VkTWV0aG9kcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKFxuICAgICAgICBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQ2FsZW5kYXJEYXRlRm9ybWF0dGVyLnByb3RvdHlwZSlcbiAgICAgICkuZmlsdGVyKGlNZXRob2QgPT4gaU1ldGhvZCAhPT0gJ2NvbnN0cnVjdG9yJyk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGAke21ldGhvZH0gaXMgbm90IGEgdmFsaWQgZGF0ZSBmb3JtYXR0ZXIuIENhbiBvbmx5IGJlIG9uZSBvZiAke2FsbG93ZWRNZXRob2RzLmpvaW4oXG4gICAgICAgICAgJywgJ1xuICAgICAgICApfWBcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmRhdGVGb3JtYXR0ZXJbbWV0aG9kXSh7XG4gICAgICBkYXRlLFxuICAgICAgbG9jYWxlLFxuICAgICAgd2Vla1N0YXJ0c09uLFxuICAgICAgZXhjbHVkZURheXMsXG4gICAgICBkYXlzSW5XZWVrXG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==