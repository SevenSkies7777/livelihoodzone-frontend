/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe, LOCALE_ID, Inject } from '@angular/core';
import { CalendarDateFormatter } from './calendar-date-formatter.provider';
/**
 * This pipe is primarily for rendering the current view title. Example usage:
 * ```typescript
 * // where `viewDate` is a `Date` and view is `'month' | 'week' | 'day'`
 * {{ viewDate | calendarDate:(view + 'ViewTitle'):'en' }}
 * ```
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './calendar-date-formatter.provider';
var CalendarDatePipe = /** @class */ (function () {
    function CalendarDatePipe(dateFormatter, locale) {
        this.dateFormatter = dateFormatter;
        this.locale = locale;
    }
    /**
     * @param {?} date
     * @param {?} method
     * @param {?=} locale
     * @param {?=} weekStartsOn
     * @param {?=} excludeDays
     * @param {?=} daysInWeek
     * @return {?}
     */
    CalendarDatePipe.prototype.transform = /**
     * @param {?} date
     * @param {?} method
     * @param {?=} locale
     * @param {?=} weekStartsOn
     * @param {?=} excludeDays
     * @param {?=} daysInWeek
     * @return {?}
     */
    function (date, method, locale, weekStartsOn, excludeDays, daysInWeek) {
        if (locale === void 0) { locale = this.locale; }
        if (weekStartsOn === void 0) { weekStartsOn = 0; }
        if (excludeDays === void 0) { excludeDays = []; }
        if (typeof this.dateFormatter[method] === 'undefined') {
            /** @type {?} */
            var allowedMethods = Object.getOwnPropertyNames(Object.getPrototypeOf(CalendarDateFormatter.prototype)).filter((/**
             * @param {?} iMethod
             * @return {?}
             */
            function (iMethod) { return iMethod !== 'constructor'; }));
            throw new Error(method + " is not a valid date formatter. Can only be one of " + allowedMethods.join(', '));
        }
        return this.dateFormatter[method]({
            date: date,
            locale: locale,
            weekStartsOn: weekStartsOn,
            excludeDays: excludeDays,
            daysInWeek: daysInWeek
        });
    };
    /** @nocollapse */
    CalendarDatePipe.ctorParameters = function () { return [
        { type: CalendarDateFormatter },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
    ]; };
CalendarDatePipe.ɵfac = function CalendarDatePipe_Factory(t) { return new (t || CalendarDatePipe)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CalendarDateFormatter), ɵngcc0.ɵɵdirectiveInject(LOCALE_ID)); };
CalendarDatePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "calendarDate", type: CalendarDatePipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CalendarDatePipe, [{
        type: Pipe,
        args: [{
                name: 'calendarDate'
            }]
    }], function () { return [{ type: ɵngcc1.CalendarDateFormatter }, { type: String, decorators: [{
                type: Inject,
                args: [LOCALE_ID]
            }] }]; }, null); })();
    return CalendarDatePipe;
}());
export { CalendarDatePipe };
if (false) {
    /**
     * @type {?}
     * @private
     */
    CalendarDatePipe.prototype.dateFormatter;
    /**
     * @type {?}
     * @private
     */
    CalendarDatePipe.prototype.locale;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXItZGF0ZS5waXBlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyLWNhbGVuZGFyL21vZHVsZXMvY29tbW9uL2NhbGVuZGFyLWRhdGUucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2RSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUMzRTtBQUNHO0FBQzJFO0FBQzlEO0FBQ3lEO0FBQ2Y7QUFDcEQ7OztBQUVOO0FBR2tCLElBQ2hCLDBCQUNVLGFBQW9DLEVBQ2pCLE1BQWM7QUFDMUMsUUFGUyxrQkFBYSxHQUFiLGFBQWEsQ0FBdUI7QUFBQyxRQUNsQixXQUFNLEdBQU4sTUFBTSxDQUFRO0FBQzdDLElBQUssQ0FBQztBQUNOO0FBQ087QUFFTjtBQUNLO0FBQTBCO0FBRWhDO0FBQStCO0FBRTFCO0FBQ0s7QUFBUSxJQVJoQixvQ0FBUztBQUNOO0FBQ087QUFDSztBQUNSO0FBQ0U7QUFDRDtBQUVSO0FBQW1CO0FBQVEsSUFSM0IsVUFDRSxJQUFVLEVBQ1YsTUFBYyxFQUNkLE1BQTRCLEVBQzVCLFlBQXdCLEVBQ3hCLFdBQTBCLEVBQzFCLFVBQW1CO0FBQ3BCLFFBSkMsdUJBQUEsRUFBQSxTQUFpQixJQUFJLENBQUMsTUFBTTtBQUM5QixRQUFFLDZCQUFBLEVBQUEsZ0JBQXdCO0FBQzFCLFFBQUUsNEJBQUEsRUFBQSxnQkFBMEI7QUFDNUIsUUFFRSxJQUFJLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsS0FBSyxXQUFXLEVBQUU7QUFDM0Q7QUFBNkIsZ0JBQWpCLGNBQWMsR0FBRyxNQUFNLENBQUMsbUJBQW1CLENBQy9DLE1BQU0sQ0FBQyxjQUFjLENBQUMscUJBQXFCLENBQUMsU0FBUyxDQUFDLENBQ3ZELENBQUMsTUFBTTtBQUFNO0FBQ3BCO0FBQ0k7QUFBZ0IsWUFGTCxVQUFBLE9BQU8sSUFBSSxPQUFBLE9BQU8sS0FBSyxhQUFhLEVBQXpCLENBQXlCLEVBQUM7QUFDcEQsWUFBTSxNQUFNLElBQUksS0FBSyxDQUNWLE1BQU0sMkRBQXNELGNBQWMsQ0FBQyxJQUFJLENBQ2hGLElBQUksQ0FDSCxDQUNKLENBQUM7QUFDUixTQUFLO0FBQ0wsUUFBSSxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDdEMsWUFBTSxJQUFJLE1BQUE7QUFDVixZQUFNLE1BQU0sUUFBQTtBQUNaLFlBQU0sWUFBWSxjQUFBO0FBQ2xCLFlBQU0sV0FBVyxhQUFBO0FBQ2pCLFlBQU0sVUFBVSxZQUFBO0FBQ2hCLFNBQUssQ0FBQyxDQUFDO0FBQ1AsSUFBRSxDQUFDLENBL0JNO0FBQUM7NkJBSFQsSUFBSSxTQUFDLDFDQUcyQjtHQUYvQixJQUFJLEVBQUUsY0FBYyx2QkFJQSxnQkFkYixxQkFBcUI7QUFXN0IsQUFYaUMsNkNBZTdCLE1BQU0sU0FBQyxTQUFTO0FBQVE7Ozs7Ozs7Ozs7O2tDQUFTO0FBQUMsSUE2QnZDLHVCQUFDO0FBQ0EsQ0FEQSxBQW5DRCxJQW1DQztBQUNELFNBakNhLGdCQUFnQjtBQUFJO0FBQWE7QUFBUTtBQUN4QztBQUNDO0FBQVEsSUFBbkIseUNBQTRDO0FBQUM7QUFDMUM7QUFBaUI7QUFBZ0I7QUFDdEMsSUFERSxrQ0FBeUM7QUFDN0M7QUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0sIExPQ0FMRV9JRCwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDYWxlbmRhckRhdGVGb3JtYXR0ZXIgfSBmcm9tICcuL2NhbGVuZGFyLWRhdGUtZm9ybWF0dGVyLnByb3ZpZGVyJztcblxuLyoqXG4gKiBUaGlzIHBpcGUgaXMgcHJpbWFyaWx5IGZvciByZW5kZXJpbmcgdGhlIGN1cnJlbnQgdmlldyB0aXRsZS4gRXhhbXBsZSB1c2FnZTpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIC8vIHdoZXJlIGB2aWV3RGF0ZWAgaXMgYSBgRGF0ZWAgYW5kIHZpZXcgaXMgYCdtb250aCcgfCAnd2VlaycgfCAnZGF5J2BcbiAqIHt7IHZpZXdEYXRlIHwgY2FsZW5kYXJEYXRlOih2aWV3ICsgJ1ZpZXdUaXRsZScpOidlbicgfX1cbiAqIGBgYFxuICovXG5AUGlwZSh7XG4gIG5hbWU6ICdjYWxlbmRhckRhdGUnXG59KVxuZXhwb3J0IGNsYXNzIENhbGVuZGFyRGF0ZVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBkYXRlRm9ybWF0dGVyOiBDYWxlbmRhckRhdGVGb3JtYXR0ZXIsXG4gICAgQEluamVjdChMT0NBTEVfSUQpIHByaXZhdGUgbG9jYWxlOiBzdHJpbmdcbiAgKSB7fVxuXG4gIHRyYW5zZm9ybShcbiAgICBkYXRlOiBEYXRlLFxuICAgIG1ldGhvZDogc3RyaW5nLFxuICAgIGxvY2FsZTogc3RyaW5nID0gdGhpcy5sb2NhbGUsXG4gICAgd2Vla1N0YXJ0c09uOiBudW1iZXIgPSAwLFxuICAgIGV4Y2x1ZGVEYXlzOiBudW1iZXJbXSA9IFtdLFxuICAgIGRheXNJbldlZWs/OiBudW1iZXJcbiAgKTogc3RyaW5nIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuZGF0ZUZvcm1hdHRlclttZXRob2RdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc3QgYWxsb3dlZE1ldGhvZHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhcbiAgICAgICAgT2JqZWN0LmdldFByb3RvdHlwZU9mKENhbGVuZGFyRGF0ZUZvcm1hdHRlci5wcm90b3R5cGUpXG4gICAgICApLmZpbHRlcihpTWV0aG9kID0+IGlNZXRob2QgIT09ICdjb25zdHJ1Y3RvcicpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgJHttZXRob2R9IGlzIG5vdCBhIHZhbGlkIGRhdGUgZm9ybWF0dGVyLiBDYW4gb25seSBiZSBvbmUgb2YgJHthbGxvd2VkTWV0aG9kcy5qb2luKFxuICAgICAgICAgICcsICdcbiAgICAgICAgKX1gXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5kYXRlRm9ybWF0dGVyW21ldGhvZF0oe1xuICAgICAgZGF0ZSxcbiAgICAgIGxvY2FsZSxcbiAgICAgIHdlZWtTdGFydHNPbixcbiAgICAgIGV4Y2x1ZGVEYXlzLFxuICAgICAgZGF5c0luV2Vla1xuICAgIH0pO1xuICB9XG59XG4iXX0=