/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Renderer2, ElementRef, Output, EventEmitter, Inject, Input, NgZone } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { Observable, Subject } from 'rxjs';
import { requestIdleCallbackObservable } from './request-idle-callback';
import { switchMapTo, takeUntil } from 'rxjs/operators';
/** @type {?} */
import * as ɵngcc0 from '@angular/core';
var clickElements = new Set();
/** @type {?} */
var eventName = typeof window !== 'undefined' && typeof window['Hammer'] !== 'undefined'
    ? 'tap'
    : 'click';
var ClickDirective = /** @class */ (function () {
    function ClickDirective(renderer, elm, document, zone) {
        this.renderer = renderer;
        this.elm = elm;
        this.document = document;
        this.zone = zone;
        this.clickListenerDisabled = false;
        this.click = new EventEmitter(); // tslint:disable-line
        // tslint:disable-line
        this.destroy$ = new Subject();
    }
    /**
     * @return {?}
     */
    ClickDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.clickListenerDisabled) {
            this.renderer.setAttribute(this.elm.nativeElement, 'data-calendar-clickable', 'true');
            clickElements.add(this.elm.nativeElement);
            // issue #942 - lazily initialise all click handlers after initial render as hammerjs is slow
            requestIdleCallbackObservable()
                .pipe(switchMapTo(this.listen()), takeUntil(this.destroy$))
                .subscribe((/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                // prevent child click events from firing on parent elements that also have click events
                /** @type {?} */
                var nearestClickableParent = (/** @type {?} */ (event.target));
                while (!clickElements.has(nearestClickableParent) &&
                    nearestClickableParent !== _this.document.body) {
                    nearestClickableParent = nearestClickableParent.parentElement;
                }
                /** @type {?} */
                var isThisClickableElement = _this.elm.nativeElement === nearestClickableParent;
                if (isThisClickableElement) {
                    _this.zone.run((/**
                     * @return {?}
                     */
                    function () {
                        _this.click.next(event);
                    }));
                }
            }));
        }
    };
    /**
     * @return {?}
     */
    ClickDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroy$.next();
        clickElements.delete(this.elm.nativeElement);
    };
    /**
     * @private
     * @return {?}
     */
    ClickDirective.prototype.listen = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            return _this.renderer.listen(_this.elm.nativeElement, eventName, (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                observer.next(event);
            }));
        }));
    };
    /** @nocollapse */
    ClickDirective.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: NgZone }
    ]; };
    ClickDirective.propDecorators = {
        clickListenerDisabled: [{ type: Input }],
        click: [{ type: Output, args: ['mwlClick',] }]
    };
ClickDirective.ɵfac = function ClickDirective_Factory(t) { return new (t || ClickDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
ClickDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ClickDirective, selectors: [["", "mwlClick", ""]], inputs: { clickListenerDisabled: "clickListenerDisabled" }, outputs: { click: "mwlClick" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClickDirective, [{
        type: Directive,
        args: [{
                selector: '[mwlClick]'
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: ɵngcc0.NgZone }]; }, { clickListenerDisabled: [{
            type: Input
        }], click: [{
            type: Output,
            args: ['mwlClick']
        }] }); })();
    return ClickDirective;
}());
export { ClickDirective };
if (false) {
    /** @type {?} */
    ClickDirective.prototype.clickListenerDisabled;
    /** @type {?} */
    ClickDirective.prototype.click;
    /**
     * @type {?}
     * @private
     */
    ClickDirective.prototype.destroy$;
    /**
     * @type {?}
     * @private
     */
    ClickDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    ClickDirective.prototype.elm;
    /**
     * @type {?}
     * @private
     */
    ClickDirective.prototype.document;
    /**
     * @type {?}
     * @private
     */
    ClickDirective.prototype.zone;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpY2suZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyLWNhbGVuZGFyL21vZHVsZXMvY29tbW9uL2NsaWNrLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxTQUFTLEVBQ1QsVUFBVSxFQUdWLE1BQU0sRUFDTixZQUFZLEVBQ1osTUFBTSxFQUNOLEtBQUssRUFDTCxNQUFNLEVBQ1AsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzNDLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEQ7O0FBQ2dCLElBQVYsYUFBYSxHQUFHLElBQUksR0FBRyxFQUFlO0FBQzVDO0FBQ2dCLElBQVYsU0FBUyxHQUNiLE9BQU8sTUFBTSxLQUFLLFdBQVcsSUFBSSxPQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxXQUFXO0FBQzFFLElBQUksQ0FBQyxDQUFDLEtBQUs7QUFDWCxJQUFJLENBQUMsQ0FBQyxPQUFPO0FBRWI7QUFHUyxJQU9QLHdCQUNVLFFBQW1CLEVBQ25CLEdBQTRCLEVBQ1YsUUFBUSxFQUMxQixJQUFZO0FBQ3JCLFFBSlMsYUFBUSxHQUFSLFFBQVEsQ0FBVztBQUFDLFFBQ3BCLFFBQUcsR0FBSCxHQUFHLENBQXlCO0FBQUMsUUFDWCxhQUFRLEdBQVIsUUFBUSxDQUFBO0FBQUMsUUFDM0IsU0FBSSxHQUFKLElBQUksQ0FBUTtBQUN4QixRQVhXLDBCQUFxQixHQUFHLEtBQUssQ0FBQztBQUN6QyxRQUNzQixVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQWMsQ0FBQyxDQUFDLHNCQUFzQjtBQUNwRjtBQUM4QixR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QUMsVUFBVTtBQUFNOzs7Ozs7Ozs7Ozs7Ozs7O29CQUFNO0FBQUMsSUEwRGpDLHFCQUFDO0FBQ0EsQ0FEQSxBQWhFRCxJQWdFQztBQUNELFNBOURhLGNBQWM7QUFBSTtBQUFhO0FBQ3RDLElBQUosK0NBQXVDO0FBQ3pDO0FBQ29CLElBQWxCLCtCQUEyRDtBQUFDO0FBQVE7QUFFckU7QUFBZ0I7QUFBUSxJQUF2QixrQ0FBaUM7QUFDbkM7QUFDTztBQUNFO0FBQWdCO0FBQ3pCLElBREksa0NBQTJCO0FBQUM7QUFDekI7QUFBaUI7QUFBZ0I7QUFDbEMsSUFERiw2QkFBb0M7QUFBQztBQUNsQztBQUFpQjtBQUN4QjtBQUFRLElBREosa0NBQWtDO0FBQUM7QUFDaEM7QUFBaUI7QUFHakI7QUFBUSxJQUhYLDhCQUFvQjtBQUN4QjtBQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBSZW5kZXJlcjIsXG4gIEVsZW1lbnRSZWYsXG4gIE9uSW5pdCxcbiAgT25EZXN0cm95LFxuICBPdXRwdXQsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5qZWN0LFxuICBJbnB1dCxcbiAgTmdab25lXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgcmVxdWVzdElkbGVDYWxsYmFja09ic2VydmFibGUgfSBmcm9tICcuL3JlcXVlc3QtaWRsZS1jYWxsYmFjayc7XG5pbXBvcnQgeyBzd2l0Y2hNYXBUbywgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5jb25zdCBjbGlja0VsZW1lbnRzID0gbmV3IFNldDxIVE1MRWxlbWVudD4oKTtcblxuY29uc3QgZXZlbnROYW1lOiBzdHJpbmcgPVxuICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93WydIYW1tZXInXSAhPT0gJ3VuZGVmaW5lZCdcbiAgICA/ICd0YXAnXG4gICAgOiAnY2xpY2snO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbXdsQ2xpY2tdJ1xufSlcbmV4cG9ydCBjbGFzcyBDbGlja0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgQElucHV0KCkgY2xpY2tMaXN0ZW5lckRpc2FibGVkID0gZmFsc2U7XG5cbiAgQE91dHB1dCgnbXdsQ2xpY2snKSBjbGljayA9IG5ldyBFdmVudEVtaXR0ZXI8TW91c2VFdmVudD4oKTsgLy8gdHNsaW50OmRpc2FibGUtbGluZVxuXG4gIHByaXZhdGUgZGVzdHJveSQgPSBuZXcgU3ViamVjdCgpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICBwcml2YXRlIGVsbTogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG4gICAgQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBkb2N1bWVudCxcbiAgICBwcml2YXRlIHpvbmU6IE5nWm9uZVxuICApIHt9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmNsaWNrTGlzdGVuZXJEaXNhYmxlZCkge1xuICAgICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUoXG4gICAgICAgIHRoaXMuZWxtLm5hdGl2ZUVsZW1lbnQsXG4gICAgICAgICdkYXRhLWNhbGVuZGFyLWNsaWNrYWJsZScsXG4gICAgICAgICd0cnVlJ1xuICAgICAgKTtcbiAgICAgIGNsaWNrRWxlbWVudHMuYWRkKHRoaXMuZWxtLm5hdGl2ZUVsZW1lbnQpO1xuXG4gICAgICAvLyBpc3N1ZSAjOTQyIC0gbGF6aWx5IGluaXRpYWxpc2UgYWxsIGNsaWNrIGhhbmRsZXJzIGFmdGVyIGluaXRpYWwgcmVuZGVyIGFzIGhhbW1lcmpzIGlzIHNsb3dcbiAgICAgIHJlcXVlc3RJZGxlQ2FsbGJhY2tPYnNlcnZhYmxlKClcbiAgICAgICAgLnBpcGUoXG4gICAgICAgICAgc3dpdGNoTWFwVG8odGhpcy5saXN0ZW4oKSksXG4gICAgICAgICAgdGFrZVVudGlsKHRoaXMuZGVzdHJveSQpXG4gICAgICAgIClcbiAgICAgICAgLnN1YnNjcmliZShldmVudCA9PiB7XG4gICAgICAgICAgLy8gcHJldmVudCBjaGlsZCBjbGljayBldmVudHMgZnJvbSBmaXJpbmcgb24gcGFyZW50IGVsZW1lbnRzIHRoYXQgYWxzbyBoYXZlIGNsaWNrIGV2ZW50c1xuICAgICAgICAgIGxldCBuZWFyZXN0Q2xpY2thYmxlUGFyZW50ID0gZXZlbnQudGFyZ2V0IGFzIEhUTUxFbGVtZW50O1xuICAgICAgICAgIHdoaWxlIChcbiAgICAgICAgICAgICFjbGlja0VsZW1lbnRzLmhhcyhuZWFyZXN0Q2xpY2thYmxlUGFyZW50KSAmJlxuICAgICAgICAgICAgbmVhcmVzdENsaWNrYWJsZVBhcmVudCAhPT0gdGhpcy5kb2N1bWVudC5ib2R5XG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBuZWFyZXN0Q2xpY2thYmxlUGFyZW50ID0gbmVhcmVzdENsaWNrYWJsZVBhcmVudC5wYXJlbnRFbGVtZW50O1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBpc1RoaXNDbGlja2FibGVFbGVtZW50ID1cbiAgICAgICAgICAgIHRoaXMuZWxtLm5hdGl2ZUVsZW1lbnQgPT09IG5lYXJlc3RDbGlja2FibGVQYXJlbnQ7XG4gICAgICAgICAgaWYgKGlzVGhpc0NsaWNrYWJsZUVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuem9uZS5ydW4oKCkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLmNsaWNrLm5leHQoZXZlbnQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLmRlc3Ryb3kkLm5leHQoKTtcbiAgICBjbGlja0VsZW1lbnRzLmRlbGV0ZSh0aGlzLmVsbS5uYXRpdmVFbGVtZW50KTtcbiAgfVxuXG4gIHByaXZhdGUgbGlzdGVuKCkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZTxNb3VzZUV2ZW50PihvYnNlcnZlciA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJlci5saXN0ZW4odGhpcy5lbG0ubmF0aXZlRWxlbWVudCwgZXZlbnROYW1lLCBldmVudCA9PiB7XG4gICAgICAgIG9ic2VydmVyLm5leHQoZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==