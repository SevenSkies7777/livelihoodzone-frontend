{"version":3,"sources":["webpack:///src/app/features/CRM/crm-tabbed-wrapper/crm-tabbed-wrapper.component.html","webpack:///src/app/features/CRM/crm-tabbed-wrapper/crm-tabbed-wrapper.component.ts","webpack:///src/app/features/CRM/communications-list/communications-list.component.ts","webpack:///src/app/features/CRM/news-letters/news-letters.component.ts","webpack:///src/app/features/CRM/email-groups-list/email-groups-list.component.ts","webpack:///src/app/features/CRM/contact-groups-list/contact-groups-list.component.ts","webpack:///src/app/features/CRM/contacts-list/contacts-list.component.ts","webpack:///src/app/features/CRM/complaints-listing/complaints-listing.component.ts","webpack:///src/app/features/CRM/crm-routing.module.ts","webpack:///src/app/features/CRM/crm.module.ts","webpack:///src/app/services/auth-checkers.service.ts"],"names":["CrmTabbedWrappercomponent","CommunicationsComponent","NewsLettersComponent","EmailGroupsListComponent","ContactGroupsListComponent","ContactsListComponent","ComplaintsListing","CRMRoutingModule","CRMModule","links","link","label","background","menuActions","routes","path","component","children","redirectTo","pathMatch","headers","title","topActions","rows","key","type","actions","btnText","status","icon","action","modalConf","store","conf","context","titleKey","forChild","AuthCheckerService","_authConfig","allowedOrgTypes","roles","orgType","get","JSON","parse","localStorage","getItem","organization","user","this","getUser","isUndefined","indexOf","currOrg","find","organizations","group_name","isNull","group"],"mappings":"+lBAY4B,kBAI8B,QAAe,Q,iCAH1C,uCAAyB,oCAAzB,CAAyB,qBAGE,+BCPnD,IAAMA,ECaAC,ECAAC,ECEAC,ECAAC,ECAAC,ECAAC,ECSAC,ECoBAC,ER5CN,IAAMR,EA8BT,aAAa,UA7Bb,KAAAS,MAAoB,CAChB,CACIC,KAAM,kBACNC,MAAO,cAEX,CACID,KAAM,gBACNC,MAAO,YAEX,CACID,KAAM,sBACNC,MAAO,kBAEX,CACID,KAAM,oBACNC,MAAO,gBAEX,CACID,KAAM,sBACNC,MAAO,kBAEX,CACID,KAAM,oBACNC,MAAO,iBAGf,KAAAC,WAA2B,UAC3B,KAAAC,YAAc,CAAC,M,oCA5BNb,I,uBAAAA,EAAyB,ykBDTtC,gBACI,cACI,wBAEJ,OAEA,gBACI,gBACI,gBACI,qBACI,gBACI,gBACI,oBAKJ,OACJ,OACA,8BACI,yBACJ,OACJ,OACJ,OACJ,OACJ,OACJ,Q,MAvBQ,0CASoC,kC,uKQAtCc,EAAiB,CACnB,CACIC,KAAM,GACNC,UAAW,EACXC,SAAU,CACN,CAAEF,KAAM,GAAIG,WAAY,aAAcC,UAAW,QACjD,CAAEJ,KAAM,aAAcC,WDMrBV,EAtBb,uBAuBI,KAAAc,QAAsB,CAClB,CAAEC,MAAO,SACT,CAAEA,MAAO,SACT,CAAEA,MAAO,WACT,CAAEA,MAAO,UACT,CAAEA,MAAO,YAGb,KAAAC,WAAyB,GAEzB,KAAAC,KAAmB,CACf,CAAEC,IAAK,YAAaC,KAAM,UAC1B,CAAED,IAAK,QAASC,KAAM,UACtB,CAAED,IAAK,eAAgBC,KAAM,UAC7B,CAAED,IAAK,SAAUC,KAAM,WAG3B,KAAAC,QAAqB,CACjB,CACIC,QAAS,OACTC,OAAQ,UACRC,MAAKA,EACLC,OAAQ,iBACRC,UAAW,CACPC,MAAO,aACPF,OAAQ,YACRH,QAAS,a,sCA3BZrB,I,uBAAAA,EAAiB,qQAdtB,gBACI,gBACI,0BAOJ,OACJ,Q,MANQ,kCAAmB,aAAnB,CAAmB,YAAnB,CAAmB,gBAAnB,CAAmB,0BAAnB,CAAmB,eAAnB,CAAmB,oBAAnB,CAAmB,iB,yFCKvB,CAAES,KAAM,WAAYC,WFKnBX,EAtBb,uBAuBI,KAAAe,QAAsB,CAClB,CAAEC,MAAO,SACT,CAAEA,MAAO,SACT,CAAEA,MAAO,iBAGb,KAAAC,WAAyB,CACrB,CACIK,QAAS,cACTC,OAAQ,UACRE,OAAQ,SACRG,KAAM,CACFC,QAAS,UACTF,MAAO,UACPL,QAAS,UAKrB,KAAAJ,KAAmB,CACf,CAAEC,IAAK,OAAQC,KAAM,UACrB,CAAED,IAAK,QAASC,KAAM,UACtB,CAAED,IAAK,eAAgBC,KAAM,WAGjC,KAAAC,QAAsB,CAClB,CACIC,QAAS,OACTC,OAAQ,SACRC,MAAKA,EACLE,UAAW,CACPC,MAAO,WACPG,SAAU,QACVD,QAAS,WACTP,QAAS,W,sCAnCZtB,I,uBAAAA,EAAqB,iPAd1B,gBACI,gBACI,0BAOJ,OACJ,Q,MANQ,kCAAmB,aAAnB,CAAmB,gBAAnB,CAAmB,0BAAnB,CAAmB,eAAnB,CAAmB,oBAAnB,CAAmB,iB,yFEMvB,CAAEU,KAAM,iBAAkBC,WHIzBZ,EAtBb,uBAuBI,KAAAgB,QAAsB,CAClB,CAAEC,MAAO,QACT,CAAEA,MAAO,gBAGb,KAAAC,WAAyB,CACrB,CACIK,QAAQ,oBACRC,OAAQ,UACRE,OAAQ,SACRG,KAAM,CACFC,QAAS,gBACTF,MAAO,gBACPL,QAAS,UAKrB,KAAAJ,KAAmB,CACf,CAAEC,IAAK,OAAQC,KAAM,UACrB,CAAED,IAAK,cAAeC,KAAM,UAGhC,KAAAC,QAAsB,CAClB,CACIC,QAAS,OACTC,OAAQ,SACRC,MAAKA,EACLE,UAAW,CACPC,MAAO,iBACPG,SAAU,OACVD,QAAS,iBACTP,QAAS,W,sCAjCZvB,I,uBAAAA,EAA0B,6PAd/B,gBACA,gBACI,0BAOJ,OACA,Q,MANI,kCAAmB,aAAnB,CAAmB,gBAAnB,CAAmB,0BAAnB,CAAmB,eAAnB,CAAmB,oBAAnB,CAAmB,iB,yFGOnB,CAAEW,KAAM,eAAgBC,WJGvBb,EAtBb,uBAuBI,KAAAiB,QAAsB,CAClB,CAAEC,MAAO,QACT,CAAEA,MAAO,gBAGb,KAAAC,WAAyB,CACrB,CACIK,QAAQ,kBACRC,OAAQ,UACRE,OAAQ,SACRG,KAAM,CACFC,QAAS,cACTF,MAAO,cACPL,QAAS,UAKrB,KAAAJ,KAAmB,CACf,CAAEC,IAAK,OAAQC,KAAM,UACrB,CAAED,IAAK,cAAeC,KAAM,UAGhC,KAAAC,QAAsB,CAClB,CACIC,QAAS,OACTC,OAAQ,SACRC,MAAKA,EACLE,UAAW,CACPC,MAAO,eACPG,SAAU,OACVD,QAAS,eACTP,QAAS,W,sCAjCZxB,I,uBAAAA,EAAwB,yPAd7B,gBACA,gBACI,0BAOJ,OACA,Q,MANI,kCAAmB,aAAnB,CAAmB,gBAAnB,CAAmB,0BAAnB,CAAmB,eAAnB,CAAmB,oBAAnB,CAAmB,iB,yFIQnB,CAAEY,KAAM,eAAgBC,WLAvBd,EApBb,uBAqBI,KAAAkB,QAAsB,CAClB,CAAEC,MAAO,SACT,CAAEA,MAAO,YAGb,KAAAE,KAAmB,CACf,CAAEC,IAAK,QAASC,KAAM,UACtB,CAAED,IAAK,UAAWC,KAAM,WAG5B,KAAAC,QAAsB,CAClB,CACIC,QAAS,oBACTC,OAAQ,SACRC,MAAKA,EACLE,UAAW,CACPC,MAAO,eACPG,SAAU,QACVD,QAAS,cACTP,QAAS,W,sCApBZzB,I,uBAAAA,EAAoB,uOAdzB,gBACI,gBACI,0BAOJ,OACJ,Q,MANQ,kCAAmB,aAAnB,CAAmB,gBAAnB,CAAmB,eAAnB,CAAmB,oBAAnB,CAAmB,iB,kEKWvB,CAAEa,KAAM,iBAAkBC,WNDzBf,EApBb,uBAqBI,KAAAmB,QAAsB,CAClB,CAAEC,MAAO,QACT,CAAEA,MAAO,WACT,CAAEA,MAAO,WAGb,KAAAR,YAAc,CAAC,IAEf,KAAAU,KAAmB,CACf,CAAEC,IAAK,OAAQC,KAAM,UACrB,CAAED,IAAK,UAAWC,KAAM,UACxB,CAAED,IAAK,SAAUC,KAAM,WAG3B,KAAAC,QAAsB,CAClB,CACIC,QAAS,SACTC,OAAQ,SACRC,MAAKA,EACLE,UAAW,CACPC,MAAO,iBACPG,SAAU,OACVD,QAAS,gBACTP,QAAS,W,sCAxBZ1B,I,uBAAAA,EAAuB,2OAd5B,gBACI,gBACI,0BAOJ,OACJ,Q,MANQ,kCAAmB,aAAnB,CAAmB,gBAAnB,CAAmB,eAAnB,CAAmB,oBAAnB,CAAmB,iB,qEMqB5B,IAAMM,EAAN,yB,qBAAMA,I,oDAAAA,IAAgB,SAJhB,CAAC,IAAa6B,SAAStB,IACtB,O,2BCuBP,IAAMN,EAAN,yB,qBAAMA,I,oDAAAA,IAAS,SA3BT,CACL,IACA,IACA,IACA,IAEA,IACA,IACA,IACA,IAEA,IACA,IACA,IACA,M,wCCvCR,0EAKO,iBAAM6B,EAAN,WACH,WAAoBC,aAAA,KAAAA,c,UADjB,O,EAAA,G,EAAA,uCAKaC,EAAiBC,GAC7B,IAAMC,EAAU,SAAAC,IAAA,CAAIC,KAAKC,MAAMC,aAAaC,QAAQ,iBAAkB,YAChEC,EAAe,SAAAL,IAAA,CAAIC,KAAKC,MAAMC,aAAaC,QAAQ,iBAAkB,gBACrEE,EAAOL,KAAKC,MAAMK,KAAKX,YAAYY,WACzC,GAAI,SAAAC,YAAA,CAAYX,GACZ,OAAO,SAAAY,QAAA,CAAQb,EAAiBE,IAAY,EAE5C,IAAMY,EAAU,SAAAC,KAAA,CAAKN,EAAKO,cAAe,CAAER,gBAAgB,MAC3D,OAAS,SAAAK,QAAA,CAAQZ,EAAOa,EAAQG,aAAe,GACxC,SAAAC,OAAA,CAAOJ,EAAQK,SACf,SAAAN,QAAA,CAAQb,EAAiBE,IAAY,O,2BAfjD,K,6CAAMJ,GAAkB,Y,yBAAlBA,EAAkB,QAAlBA,EAAkB,Y,EAAxB,O","file":"x","sourcesContent":["<div class=\"w-100-p\">\n    <div>\n        <page-header title=\"Customer Relations Management\"\n        [menuActions]=\"menuActions\"></page-header>\n    </div>\n    <!-- Start of content -->\n    <div class=\"w-100-p mt-n3 px-5\">\n        <div class=\"px-5\">\n            <div class=\"px-12 pt-2\">\n                <mat-card class=\"p-0\">\n                    <div mat-card-header class=\"card-header px-0 pb-0\">\n                        <nav mat-tab-nav-bar>\n                            <a mat-tab-link *ngFor=\"let link of links\"\n                               [routerLink]='link?.link' #rla=\"routerLinkActive\"\n                               [routerLinkActiveOptions]=\"{exact:true}\"\n                               [active]=\"rla.isActive\" class=\"tab-link\"\n                               routerLinkActive=\"active\"> {{link.label}} </a>\n                        </nav>\n                    </div>\n                    <mat-card-content class=\"pt-0\">\n                        <router-outlet></router-outlet>\n                    </mat-card-content>\n                </mat-card>\n            </div>\n        </div>\n    </div>\n</div>","import { Component } from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n@Component({\n    selector: 'crm-wrapper',\n    templateUrl: 'crm-tabbed-wrapper.component.html',\n    styleUrls: ['crm-tabbed-wrapper.component.scss'],\n})\n\nexport class CrmTabbedWrappercomponent {\n    links: Array<any> = [\n        {\n            link: '/crm/complaints',\n            label: 'Complaints',\n        },\n        {\n            link: '/crm/contacts',\n            label: 'Contacts',\n        },\n        {\n            link: '/crm/contact-groups',\n            label: 'Contact Groups',\n        },\n        {\n            link: '/crm/email-groups',\n            label: 'Email Groups',\n        },\n        {\n            link: '/crm/communications',\n            label: 'Communications',\n        },\n        {\n            link: '/crm/news-letters',\n            label: 'News Letters',\n        },\n    ];\n    background: ThemePalette = 'primary';\n    menuActions = [{}];\n\n    constructor() {}\n\n}","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'communications',\n    styles: [\n        `:host{ width: 100% }`,\n    ],\n    template: `\n        <div class=\"w-100-p d-flex px-0\">\n            <div class=\"w-100-p d-flex px-0\">\n                <dynamic-table title=\"Listing\"\n                class=\"w-100-p\"\n                [headers]=\"headers\" [no-card]=\"true\"\n                [has-action]=\"true\" store=\"communications\"\n                [hasSearch]=\"true\" \n                [actions]=\"actions\" [rows]=\"rows\">\n                </dynamic-table>\n            </div>\n        </div>\n    `,\n})\n\nexport class CommunicationsComponent {\n    headers: Array<any> = [\n        { title: 'Type' },\n        { title: 'Subject' },\n        { title: 'Status' },\n    ];\n\n    menuActions = [{}];\n\n    rows: Array<any> = [\n        { key: 'type', type: 'string' },\n        { key: 'subject', type: 'string' },\n        { key: 'status', type: 'status' },\n    ];\n\n    actions: Array<any> = [\n        {\n            btnText: 'RESEND',\n            status: 'accent',\n            icon: false,\n            modalConf: {\n                store: 'communicaitons',\n                titleKey: 'type',\n                context: 'Communication',\n                btnText: 'SEND',\n            }\n        }\n    ];\n}","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'news-letters',\n    styles: [\n        `:host{ width: 100% }`,\n    ],\n    template: `\n        <div class=\"w-100-p d-flex px-0\">\n            <div class=\"w-100-p d-flex px-0\">\n                <dynamic-table title=\"Listing\"\n                class=\"w-100-p\"\n                [headers]=\"headers\" [no-card]=\"true\"\n                [has-action]=\"true\" store=\"news-letters\"\n                [hasSearch]=\"true\"\n                [actions]=\"actions\" [rows]=\"rows\">\n                </dynamic-table>\n            </div>\n        </div>\n    `,\n})\n\nexport class NewsLettersComponent {\n    headers: Array<any> = [\n        { title: 'Title' },\n        { title: 'Subject' },\n    ];\n\n    rows: Array<any> = [\n        { key: 'title', type: 'string' },\n        { key: 'subject', type: 'string' },\n    ];\n\n    actions: Array<any> = [\n        {\n            btnText: 'EMAIL NEWS-LETTER',\n            status: 'accent',\n            icon: false,\n            modalConf: {\n                store: 'news-letters',\n                titleKey: 'title',\n                context: 'News Letter',\n                btnText: 'SEND',\n            }\n        }\n    ];\n}","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'email-groups-list',\n    styles: [\n        `:host{\n            width: 100%;\n        }`\n    ],\n    template: `\n        <div class=\"w-100-p d-flex px-0\">\n        <div class=\"w-100-p d-flex px-0\">\n            <dynamic-table title=\"Listing\"\n            class=\"w-100-p\"\n            [headers]=\"headers\" [no-card]=\"true\"\n            [has-action]=\"true\" store=\"email-groups\"\n            [topActions]=\"topActions\" [hasSearch]=\"true\"\n            [actions]=\"actions\" [rows]=\"rows\">\n            </dynamic-table>\n        </div>\n        </div>\n    `,\n})\n\nexport class EmailGroupsListComponent {\n    headers: Array<any> = [\n        { title: 'Name' },\n        { title: 'Subscribers' },\n    ];\n\n    topActions: Array<any> = [\n        {\n            btnText:'ADD EMAIL GROUP',\n            status: 'primary',\n            action: 'inline',\n            conf: {\n                context: 'Email Group',\n                store: 'email-group',\n                btnText: 'SAVE',\n            }\n        },\n    ];\n\n    rows: Array<any> = [\n        { key: 'name', type: 'string' },\n        { key: 'subscribers', type: 'count' },\n    ];\n\n    actions: Array<any> = [\n        {\n            btnText: 'EDIT',\n            status: 'accent',\n            icon: false,\n            modalConf: {\n                store: 'email-groups',\n                titleKey: 'name',\n                context: 'Email Groups',\n                btnText: 'SAVE',\n            }\n        }\n    ];\n}","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'contact-groups-list',\n    styles: [\n        `:host{\n            width: 100%;\n        }`\n    ],\n    template: `\n        <div class=\"w-100-p d-flex px-0\">\n        <div class=\"w-100-p d-flex px-0\">\n            <dynamic-table title=\"Listing\"\n            class=\"w-100-p\"\n            [headers]=\"headers\" [no-card]=\"true\"\n            [has-action]=\"true\" store=\"contact-groups\"\n            [topActions]=\"topActions\" [hasSearch]=\"true\"\n            [actions]=\"actions\" [rows]=\"rows\">\n            </dynamic-table>\n        </div>\n        </div>\n    `,\n})\n\nexport class ContactGroupsListComponent {\n    headers: Array<any> = [\n        { title: 'Name' },\n        { title: 'Subscribers' },\n    ];\n\n    topActions: Array<any> = [\n        {\n            btnText:'ADD CONTACT GROUP',\n            status: 'primary',\n            action: 'inline',\n            conf: {\n                context: 'Contact Group',\n                store: 'contact-group',\n                btnText: 'SAVE',\n            }\n        },\n    ];\n\n    rows: Array<any> = [\n        { key: 'name', type: 'string' },\n        { key: 'subscribers', type: 'count' },\n    ];\n\n    actions: Array<any> = [\n        {\n            btnText: 'EDIT',\n            status: 'accent',\n            icon: false,\n            modalConf: {\n                store: 'contact-groups',\n                titleKey: 'name',\n                context: 'Contact Groups',\n                btnText: 'SAVE',\n            }\n        }\n    ];\n}","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'contacts-list',\n    styles: [\n        `:host{\n            width: 100%;\n        }`\n    ],\n    template: `\n        <div class=\"w-100-p d-flex px-0\">\n            <div class=\"w-100-p d-flex px-0\">\n                <dynamic-table title=\"Listing\"\n                class=\"w-100-p\"\n                [headers]=\"headers\" [no-card]=\"true\"\n                [has-action]=\"true\" store=\"contacts\"\n                [topActions]=\"topActions\" [hasSearch]=\"true\"\n                [actions]=\"actions\" [rows]=\"rows\">\n                </dynamic-table>\n            </div>\n        </div>\n    `,\n})\n\nexport class ContactsListComponent {\n    headers: Array<any> = [\n        { title: 'Names' },\n        { title: 'Email' },\n        { title: 'Phone Number' },\n    ];\n\n    topActions: Array<any> = [\n        {\n            btnText: 'ADD CONTACT',\n            status: 'primary',\n            action: 'inline',\n            conf: {\n                context: 'Contact',\n                store: 'contact',\n                btnText: 'SAVE',\n            }\n        }\n    ];\n\n    rows: Array<any> = [\n        { key: 'name', type: 'string' },\n        { key: 'email', type: 'string' },\n        { key: 'phone_number', type: 'string' },\n    ];\n\n    actions: Array<any> = [\n        {\n            btnText: 'EDIT',\n            status: 'accent',\n            icon: false,\n            modalConf: {\n                store: 'contacts',\n                titleKey: 'names',\n                context: 'Contacts',\n                btnText: 'SAVE',\n            },\n        }\n    ];\n}","import { Component }  from '@angular/core';\n\n@Component({\n    selector: 'complaints-listing',\n    styles: [\n        `:host{\n            width: 100%;\n        }`,\n    ],\n    template: `\n        <div class=\"w-100-p d-flex\">\n            <div class=\"w-100-p d-flex\">\n                <dynamic-table title=\"Complaints Listing\"\n                class=\"w-100-p\" \n                [headers]=\"headers\" [no-card]=\"true\" [addOrg]=\"true\"\n                [has-action]=\"true\" store=\"complaints\"\n                [topActions]=\"topActions\" [hasSearch]=\"true\"\n                [actions]=\"actions\" [rows]=\"rows\">\n                </dynamic-table>\n            </div>\n        </div>\n    `,\n})\n\nexport class ComplaintsListing {\n    headers: Array<any> = [\n        { title: 'Names' },\n        { title: 'Email' },\n        { title: 'Phone #'},\n        { title: 'Status' },\n        { title: 'Actions' }\n    ];\n\n    topActions: Array<any> = [];\n\n    rows: Array<any> = [\n        { key: 'full_name', type: 'string' },\n        { key: 'email', type: 'string' },\n        { key: 'phone_number', type: 'string' },\n        { key: 'status', type: 'status' }\n    ];\n\n    actions:Array<any> = [\n        {\n            btnText: 'VIEW',\n            status: 'success',\n            icon: false,\n            action: 'inlineReadOnly',\n            modalConf: {\n                store: 'complaints',\n                action: 'in_review',\n                btnText: 'REVIEW',\n            }\n        }\n    ];\n}","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { PageContainerComponent } from '@fuse/components/page-container/page-container.component';\nimport { CrmTabbedWrappercomponent } from './crm-tabbed-wrapper/crm-tabbed-wrapper.component';\nimport { ComplaintsListing } from './complaints-listing/complaints-listing.component';\nimport { ContactsListComponent } from './contacts-list/contacts-list.component';\nimport { ContactGroupsListComponent } from './contact-groups-list/contact-groups-list.component';\nimport { EmailGroupsListComponent } from './email-groups-list/email-groups-list.component';\nimport { NewsLettersComponent } from './news-letters/news-letters.component';\nimport { CommunicationsComponent } from './communications-list/communications-list.component';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: CrmTabbedWrappercomponent,\n        children: [\n            { path: '', redirectTo: 'complaints', pathMatch: 'full' },\n            { path: 'complaints', component: ComplaintsListing },\n            { path: 'contacts', component: ContactsListComponent },\n            { path: 'contact-groups', component: ContactGroupsListComponent },\n            { path: 'email-groups', component: EmailGroupsListComponent },\n            { path: 'news-letters', component: NewsLettersComponent },\n            { path: 'communications', component: CommunicationsComponent },\n        ],\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\n\nexport class CRMRoutingModule {}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport { FuseSharedModule } from '@fuse/shared.module';\nimport { PageContainerModule } from '@fuse/components';\nimport { HttpModule } from 'app/services/http/http.module';\nimport { CRMRoutingModule } from './crm-routing.module';\n\nimport { CrmTabbedWrappercomponent } from './crm-tabbed-wrapper/crm-tabbed-wrapper.component';\nimport { PageHeaderModule } from '@fuse/components/page-header/page-header.module';\nimport { ComplaintsListing } from './complaints-listing/complaints-listing.component';\nimport { DynamicTableModule } from '@fuse/components/dynamic-table/dynamic-table.module';\nimport { ContactsListComponent } from './contacts-list/contacts-list.component';\nimport { ContactGroupsListComponent } from './contact-groups-list/contact-groups-list.component';\nimport { EmailGroupsListComponent } from './email-groups-list/email-groups-list.component';\nimport { NewsLettersComponent } from './news-letters/news-letters.component';\nimport { CommunicationsComponent } from './communications-list/communications-list.component';\n\n\n@NgModule({\n    imports: [\n        HttpModule,\n        CommonModule,\n        RouterModule,\n        FuseSharedModule,\n\n        MatTabsModule,\n        MatButtonModule,\n        MatCardModule,\n        MatIconModule,\n\n        PageHeaderModule,\n        DynamicTableModule,\n        PageContainerModule,\n        CRMRoutingModule,\n    ],\n    declarations: [\n        CrmTabbedWrappercomponent,\n        ContactsListComponent,\n        ContactGroupsListComponent,\n        EmailGroupsListComponent,\n        ComplaintsListing,\n        CommunicationsComponent,\n        NewsLettersComponent,\n    ]\n})\n\nexport class CRMModule {}","import { Injectable } from '@angular/core';\nimport { find, get, indexOf, isNull, isUndefined } from 'lodash';\n\nimport { Authorization } from './authorization.service';\n\n@Injectable()\nexport class AuthCheckerService {\n    constructor(private _authConfig: Authorization) {\n\n    }\n\n    isActionAllowed(allowedOrgTypes, roles) {\n        const orgType = get(JSON.parse(localStorage.getItem('organization')), 'org_type');\n        const organization = get(JSON.parse(localStorage.getItem('organization')), 'organization');\n        const user = JSON.parse(this._authConfig.getUser());\n        if (isUndefined(roles)) {\n            return indexOf(allowedOrgTypes, orgType) >= 0;\n        } else {\n            const currOrg = find(user.organizations, { organization }, null);\n            return ( indexOf(roles, currOrg.group_name) >= 0 \n                || isNull(currOrg.group)) \n                && indexOf(allowedOrgTypes, orgType) >= 0;\n        }\n    }\n}"]}