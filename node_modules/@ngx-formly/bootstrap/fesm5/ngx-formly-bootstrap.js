import { take } from 'rxjs/operators';
import { __extends, __spread, __assign } from 'tslib';
import { Component, ViewChild, NgZone, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { SelectControlValueAccessor, ReactiveFormsModule } from '@angular/forms';
import { FieldType, FieldWrapper, FormlyModule } from '@ngx-formly/core';
import { FormlySelectModule } from '@ngx-formly/core/select';
import { FormlyBootstrapAddonsModule } from '@ngx-formly/bootstrap/addons';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '@angular/forms';
import * as ɵngcc3 from '@ngx-formly/core';
import * as ɵngcc4 from '@ngx-formly/core/select';

function FormlyFieldCheckbox_label_2_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1, "*");
    ɵngcc0.ɵɵelementEnd();
} }
function FormlyFieldCheckbox_label_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "label", 3);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵtemplate(2, FormlyFieldCheckbox_label_2_span_2_Template, 2, 0, "span", 4);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("form-check-label", ctx_r0.to.formCheck.indexOf("custom") === -1)("custom-control-label", ctx_r0.to.formCheck.indexOf("custom") === 0);
    ɵngcc0.ɵɵproperty("for", ctx_r0.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r0.to.label, " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.to.required && ctx_r0.to.hideRequiredMarker !== true);
} }
var _c0 = function (a0, a1, a2, a3, a4, a5) { return { "form-check": a0, "form-check-inline": a1, "custom-control": a2, "custom-checkbox": a3, "custom-control-inline": a4, "custom-switch": a5 }; };
function FormlyFieldMultiCheckbox_div_1_Template(rf, ctx) { if (rf & 1) {
    var _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 1);
    ɵngcc0.ɵɵelementStart(1, "input", 2);
    ɵngcc0.ɵɵlistener("change", function FormlyFieldMultiCheckbox_div_1_Template_input_change_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); var option_r1 = ctx.$implicit; var ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.onChange(option_r1.value, $event.target.checked); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "label", 3);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var option_r1 = ctx.$implicit;
    var i_r2 = ctx.index;
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction6(15, _c0, ctx_r0.to.formCheck.indexOf("custom") === -1, ctx_r0.to.formCheck === "inline", ctx_r0.to.formCheck.indexOf("custom") === 0, ctx_r0.to.formCheck === "custom" || ctx_r0.to.formCheck === "custom-inline", ctx_r0.to.formCheck === "custom-inline", ctx_r0.to.formCheck === "custom-switch"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("form-check-input", ctx_r0.to.formCheck.indexOf("custom") === -1)("custom-control-input", ctx_r0.to.formCheck.indexOf("custom") === 0);
    ɵngcc0.ɵɵproperty("id", ctx_r0.id + "_" + i_r2)("value", option_r1.value)("checked", ctx_r0.isChecked(option_r1))("formlyAttributes", ctx_r0.field);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("form-check-label", ctx_r0.to.formCheck.indexOf("custom") === -1)("custom-control-label", ctx_r0.to.formCheck.indexOf("custom") === 0);
    ɵngcc0.ɵɵproperty("for", ctx_r0.id + "_" + i_r2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", option_r1.label, " ");
} }
function FormlyFieldInput_input_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "input", 2);
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("is-invalid", ctx_r0.showError);
    ɵngcc0.ɵɵproperty("type", ctx_r0.type)("formControl", ctx_r0.formControl)("formlyAttributes", ctx_r0.field);
} }
function FormlyFieldInput_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "input", 3);
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("is-invalid", ctx_r2.showError);
    ɵngcc0.ɵɵproperty("formControl", ctx_r2.formControl)("formlyAttributes", ctx_r2.field);
} }
var _c1 = function (a0, a1, a2, a3) { return { "form-check": a0, "form-check-inline": a1, "custom-control custom-radio": a2, "custom-control-inline": a3 }; };
function FormlyFieldRadio_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 1);
    ɵngcc0.ɵɵelement(1, "input", 2);
    ɵngcc0.ɵɵelementStart(2, "label", 3);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var option_r1 = ctx.$implicit;
    var i_r2 = ctx.index;
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction4(20, _c1, ctx_r0.to.formCheck.indexOf("custom") === -1, ctx_r0.to.formCheck === "inline", ctx_r0.to.formCheck.indexOf("custom") === 0, ctx_r0.to.formCheck === "custom-inline"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("form-check-input", ctx_r0.to.formCheck.indexOf("custom") === -1)("custom-control-input", ctx_r0.to.formCheck.indexOf("custom") === 0)("is-invalid", ctx_r0.showError);
    ɵngcc0.ɵɵproperty("id", ctx_r0.id + "_" + i_r2)("name", ctx_r0.field.name || ctx_r0.id)("value", option_r1.value)("formControl", ctx_r0.formControl)("formlyAttributes", ctx_r0.field);
    ɵngcc0.ɵɵattribute("value", option_r1.value)("disabled", option_r1.disabled || ctx_r0.formControl.disabled ? true : null);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("form-check-label", ctx_r0.to.formCheck.indexOf("custom") === -1)("custom-control-label", ctx_r0.to.formCheck.indexOf("custom") === 0);
    ɵngcc0.ɵɵproperty("for", ctx_r0.id + "_" + i_r2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", option_r1.label, " ");
} }
function FormlyFieldSelect_select_0_ng_container_1_ng_container_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "option", 7);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var opt_r9 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngValue", opt_r9.value)("disabled", opt_r9.disabled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(opt_r9.label);
} }
function FormlyFieldSelect_select_0_ng_container_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, FormlyFieldSelect_select_0_ng_container_1_ng_container_1_ng_container_1_Template, 3, 3, "ng-container", 6);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var opts_r4 = ɵngcc0.ɵɵnextContext().ngIf;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", opts_r4);
} }
function FormlyFieldSelect_select_0_ng_container_1_ng_template_2_ng_container_0_option_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "option", 7);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var opt_r12 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("ngValue", opt_r12.value)("disabled", opt_r12.disabled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(opt_r12.label);
} }
function FormlyFieldSelect_select_0_ng_container_1_ng_template_2_ng_container_0_ng_template_2_option_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "option", 7);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var child_r18 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngValue", child_r18.value)("disabled", child_r18.disabled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", child_r18.label, " ");
} }
function FormlyFieldSelect_select_0_ng_container_1_ng_template_2_ng_container_0_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "optgroup", 10);
    ɵngcc0.ɵɵtemplate(1, FormlyFieldSelect_select_0_ng_container_1_ng_template_2_ng_container_0_ng_template_2_option_1_Template, 2, 3, "option", 11);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var opt_r12 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("label", opt_r12.label);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", opt_r12.group);
} }
function FormlyFieldSelect_select_0_ng_container_1_ng_template_2_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, FormlyFieldSelect_select_0_ng_container_1_ng_template_2_ng_container_0_option_1_Template, 2, 3, "option", 8);
    ɵngcc0.ɵɵtemplate(2, FormlyFieldSelect_select_0_ng_container_1_ng_template_2_ng_container_0_ng_template_2_Template, 2, 2, "ng-template", null, 9, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var opt_r12 = ctx.$implicit;
    var _r14 = ɵngcc0.ɵɵreference(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !opt_r12.group)("ngIfElse", _r14);
} }
function FormlyFieldSelect_select_0_ng_container_1_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, FormlyFieldSelect_select_0_ng_container_1_ng_template_2_ng_container_0_Template, 4, 2, "ng-container", 6);
} if (rf & 2) {
    var opts_r4 = ɵngcc0.ɵɵnextContext().ngIf;
    ɵngcc0.ɵɵproperty("ngForOf", opts_r4);
} }
function FormlyFieldSelect_select_0_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, FormlyFieldSelect_select_0_ng_container_1_ng_container_1_Template, 2, 1, "ng-container", 4);
    ɵngcc0.ɵɵtemplate(2, FormlyFieldSelect_select_0_ng_container_1_ng_template_2_Template, 1, 1, "ng-template", null, 5, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var _r6 = ɵngcc0.ɵɵreference(3);
    var ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.to._flatOptions)("ngIfElse", _r6);
} }
function FormlyFieldSelect_select_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "select", 2);
    ɵngcc0.ɵɵtemplate(1, FormlyFieldSelect_select_0_ng_container_1_Template, 4, 2, "ng-container", 3);
    ɵngcc0.ɵɵpipe(2, "async");
    ɵngcc0.ɵɵpipe(3, "formlySelectOptions");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("custom-select", ctx_r0.to.customSelect)("is-invalid", ctx_r0.showError);
    ɵngcc0.ɵɵproperty("formControl", ctx_r0.formControl)("compareWith", ctx_r0.to.compareWith)("formlyAttributes", ctx_r0.field);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(2, 8, ɵngcc0.ɵɵpipeBind2(3, 10, ctx_r0.to.options, ctx_r0.field)));
} }
function FormlyFieldSelect_ng_template_1_option_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "option", 14);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r21 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngValue", null);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r21.to.placeholder);
} }
function FormlyFieldSelect_ng_template_1_ng_container_2_ng_container_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "option", 7);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var opt_r28 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngValue", opt_r28.value)("disabled", opt_r28.disabled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(opt_r28.label);
} }
function FormlyFieldSelect_ng_template_1_ng_container_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, FormlyFieldSelect_ng_template_1_ng_container_2_ng_container_1_ng_container_1_Template, 3, 3, "ng-container", 6);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var opts_r23 = ɵngcc0.ɵɵnextContext().ngIf;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", opts_r23);
} }
function FormlyFieldSelect_ng_template_1_ng_container_2_ng_template_2_ng_container_0_option_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "option", 7);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var opt_r31 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("ngValue", opt_r31.value)("disabled", opt_r31.disabled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(opt_r31.label);
} }
function FormlyFieldSelect_ng_template_1_ng_container_2_ng_template_2_ng_container_0_ng_template_2_option_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "option", 7);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var child_r37 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngValue", child_r37.value)("disabled", child_r37.disabled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", child_r37.label, " ");
} }
function FormlyFieldSelect_ng_template_1_ng_container_2_ng_template_2_ng_container_0_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "optgroup", 10);
    ɵngcc0.ɵɵtemplate(1, FormlyFieldSelect_ng_template_1_ng_container_2_ng_template_2_ng_container_0_ng_template_2_option_1_Template, 2, 3, "option", 11);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var opt_r31 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("label", opt_r31.label);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", opt_r31.group);
} }
function FormlyFieldSelect_ng_template_1_ng_container_2_ng_template_2_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, FormlyFieldSelect_ng_template_1_ng_container_2_ng_template_2_ng_container_0_option_1_Template, 2, 3, "option", 8);
    ɵngcc0.ɵɵtemplate(2, FormlyFieldSelect_ng_template_1_ng_container_2_ng_template_2_ng_container_0_ng_template_2_Template, 2, 2, "ng-template", null, 9, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var opt_r31 = ctx.$implicit;
    var _r33 = ɵngcc0.ɵɵreference(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !opt_r31.group)("ngIfElse", _r33);
} }
function FormlyFieldSelect_ng_template_1_ng_container_2_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, FormlyFieldSelect_ng_template_1_ng_container_2_ng_template_2_ng_container_0_Template, 4, 2, "ng-container", 6);
} if (rf & 2) {
    var opts_r23 = ɵngcc0.ɵɵnextContext().ngIf;
    ɵngcc0.ɵɵproperty("ngForOf", opts_r23);
} }
function FormlyFieldSelect_ng_template_1_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, FormlyFieldSelect_ng_template_1_ng_container_2_ng_container_1_Template, 2, 1, "ng-container", 4);
    ɵngcc0.ɵɵtemplate(2, FormlyFieldSelect_ng_template_1_ng_container_2_ng_template_2_Template, 1, 1, "ng-template", null, 5, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var _r25 = ɵngcc0.ɵɵreference(3);
    var ctx_r22 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r22.to._flatOptions)("ngIfElse", _r25);
} }
function FormlyFieldSelect_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "select", 12);
    ɵngcc0.ɵɵtemplate(1, FormlyFieldSelect_ng_template_1_option_1_Template, 2, 2, "option", 13);
    ɵngcc0.ɵɵtemplate(2, FormlyFieldSelect_ng_template_1_ng_container_2_Template, 4, 2, "ng-container", 3);
    ɵngcc0.ɵɵpipe(3, "async");
    ɵngcc0.ɵɵpipe(4, "formlySelectOptions");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("custom-select", ctx_r2.to.customSelect)("is-invalid", ctx_r2.showError);
    ɵngcc0.ɵɵproperty("formControl", ctx_r2.formControl)("compareWith", ctx_r2.to.compareWith)("formlyAttributes", ctx_r2.field);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.to.placeholder);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(3, 9, ɵngcc0.ɵɵpipeBind2(4, 11, ctx_r2.to.options, ctx_r2.field)));
} }
function FormlyWrapperFormField_label_1_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1, "*");
    ɵngcc0.ɵɵelementEnd();
} }
function FormlyWrapperFormField_label_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "label");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵtemplate(2, FormlyWrapperFormField_label_1_span_2_Template, 2, 0, "span", 1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵattribute("for", ctx_r0.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r0.to.label, " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.to.required && ctx_r0.to.hideRequiredMarker !== true);
} }
function FormlyWrapperFormField_ng_template_2_Template(rf, ctx) { }
function FormlyWrapperFormField_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 5);
    ɵngcc0.ɵɵelement(1, "formly-validation-message", 6);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵstyleProp("display", "block");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("field", ctx_r3.field);
} }
function FormlyWrapperFormField_small_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "small", 7);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r4.to.description);
} }
var FormlyFieldCheckbox = /** @class */ (function (_super) {
    __extends(FormlyFieldCheckbox, _super);
    function FormlyFieldCheckbox() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.defaultOptions = {
            templateOptions: {
                indeterminate: true,
                hideLabel: true,
                formCheck: 'custom',
            },
        };
        return _this;
    }
FormlyFieldCheckbox.ɵfac = function FormlyFieldCheckbox_Factory(t) { return ɵFormlyFieldCheckbox_BaseFactory(t || FormlyFieldCheckbox); };
FormlyFieldCheckbox.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormlyFieldCheckbox, selectors: [["formly-field-checkbox"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 20, consts: [[3, "ngClass"], ["type", "checkbox", 3, "indeterminate", "formControl", "formlyAttributes"], [3, "for", "form-check-label", "custom-control-label", 4, "ngIf"], [3, "for"], [4, "ngIf"]], template: function FormlyFieldCheckbox_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelement(1, "input", 1);
        ɵngcc0.ɵɵtemplate(2, FormlyFieldCheckbox_label_2_Template, 3, 7, "label", 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction6(13, _c0, ctx.to.formCheck.indexOf("custom") === -1, ctx.to.formCheck === "inline", ctx.to.formCheck.indexOf("custom") === 0, ctx.to.formCheck === "custom" || ctx.to.formCheck === "custom-inline", ctx.to.formCheck === "custom-inline", ctx.to.formCheck === "custom-switch"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassProp("is-invalid", ctx.showError)("form-check-input", ctx.to.formCheck.indexOf("custom") === -1)("position-static", ctx.to.formCheck === "nolabel")("custom-control-input", ctx.to.formCheck.indexOf("custom") === 0);
        ɵngcc0.ɵɵproperty("indeterminate", ctx.to.indeterminate && ctx.formControl.value === null)("formControl", ctx.formControl)("formlyAttributes", ctx.field);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.to.formCheck !== "nolabel");
    } }, directives: [ɵngcc1.NgClass, ɵngcc2.CheckboxControlValueAccessor, ɵngcc2.NgControlStatus, ɵngcc2.FormControlDirective, ɵngcc3.FormlyAttributes, ɵngcc1.NgIf], encapsulation: 2 });
var ɵFormlyFieldCheckbox_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(FormlyFieldCheckbox);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyFieldCheckbox, [{
        type: Component,
        args: [{
                selector: 'formly-field-checkbox',
                template: "\n    <div [ngClass]=\"{\n      'form-check': to.formCheck.indexOf('custom') === -1,\n      'form-check-inline': to.formCheck === 'inline',\n      'custom-control': to.formCheck.indexOf('custom') === 0,\n      'custom-checkbox': to.formCheck === 'custom' || to.formCheck === 'custom-inline',\n      'custom-control-inline': to.formCheck === 'custom-inline',\n      'custom-switch': to.formCheck === 'custom-switch'\n    }\">\n      <input type=\"checkbox\"\n        [class.is-invalid]=\"showError\"\n        [class.form-check-input]=\"to.formCheck.indexOf('custom') === -1\"\n        [class.position-static]=\"to.formCheck === 'nolabel'\"\n        [class.custom-control-input]=\"to.formCheck.indexOf('custom') === 0\"\n        [indeterminate]=\"to.indeterminate && formControl.value === null\"\n        [formControl]=\"formControl\"\n        [formlyAttributes]=\"field\">\n      <label [for]=\"id\"\n        *ngIf=\"to.formCheck !== 'nolabel'\"\n        [class.form-check-label]=\"to.formCheck.indexOf('custom') === -1\"\n        [class.custom-control-label]=\"to.formCheck.indexOf('custom') === 0\"\n      >\n        {{ to.label }}\n        <span *ngIf=\"to.required && to.hideRequiredMarker !== true\">*</span>\n      </label>\n    </div>\n  "
            }]
    }], null, null); })();
    return FormlyFieldCheckbox;
}(FieldType));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FormlyFieldMultiCheckbox = /** @class */ (function (_super) {
    __extends(FormlyFieldMultiCheckbox, _super);
    function FormlyFieldMultiCheckbox() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.defaultOptions = {
            templateOptions: {
                options: [],
                formCheck: 'custom',
            },
        };
        return _this;
    }
    /**
     * @param {?} value
     * @param {?} checked
     * @return {?}
     */
    FormlyFieldMultiCheckbox.prototype.onChange = /**
     * @param {?} value
     * @param {?} checked
     * @return {?}
     */
    function (value, checked) {
        var _a;
        if (this.to.type === 'array') {
            this.formControl.patchValue(checked
                ? __spread((this.formControl.value || []), [value]) : __spread((this.formControl.value || [])).filter((/**
             * @param {?} o
             * @return {?}
             */
            function (o) { return o !== value; })));
        }
        else {
            this.formControl.patchValue(__assign({}, this.formControl.value, (_a = {}, _a[value] = checked, _a)));
        }
        this.formControl.markAsTouched();
    };
    /**
     * @param {?} option
     * @return {?}
     */
    FormlyFieldMultiCheckbox.prototype.isChecked = /**
     * @param {?} option
     * @return {?}
     */
    function (option) {
        /** @type {?} */
        var value = this.formControl.value;
        return value && (this.to.type === 'array'
            ? (value.indexOf(option.value) !== -1)
            : value[option.value]);
    };
FormlyFieldMultiCheckbox.ɵfac = function FormlyFieldMultiCheckbox_Factory(t) { return ɵFormlyFieldMultiCheckbox_BaseFactory(t || FormlyFieldMultiCheckbox); };
FormlyFieldMultiCheckbox.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormlyFieldMultiCheckbox, selectors: [["formly-field-multicheckbox"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 4, vars: 6, consts: [[3, "ngClass", 4, "ngFor", "ngForOf"], [3, "ngClass"], ["type", "checkbox", 3, "id", "value", "checked", "formlyAttributes", "change"], [3, "for"]], template: function FormlyFieldMultiCheckbox_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵtemplate(1, FormlyFieldMultiCheckbox_div_1_Template, 4, 22, "div", 0);
        ɵngcc0.ɵɵpipe(2, "async");
        ɵngcc0.ɵɵpipe(3, "formlySelectOptions");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(2, 1, ɵngcc0.ɵɵpipeBind2(3, 3, ctx.to.options, ctx.field)));
    } }, directives: [ɵngcc1.NgForOf, ɵngcc1.NgClass, ɵngcc3.FormlyAttributes], pipes: [ɵngcc1.AsyncPipe, ɵngcc4.ɵa], encapsulation: 2 });
var ɵFormlyFieldMultiCheckbox_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(FormlyFieldMultiCheckbox);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyFieldMultiCheckbox, [{
        type: Component,
        args: [{
                selector: 'formly-field-multicheckbox',
                template: "\n    <div>\n      <div *ngFor=\"let option of to.options | formlySelectOptions:field | async; let i = index;\"\n        [ngClass]=\"{\n          'form-check': to.formCheck.indexOf('custom') === -1,\n          'form-check-inline': to.formCheck === 'inline',\n          'custom-control': to.formCheck.indexOf('custom') === 0,\n          'custom-checkbox': to.formCheck === 'custom' || to.formCheck === 'custom-inline',\n          'custom-control-inline': to.formCheck === 'custom-inline',\n          'custom-switch': to.formCheck === 'custom-switch'\n        }\"\n      >\n        <input type=\"checkbox\"\n          [id]=\"id + '_' + i\"\n          [class.form-check-input]=\"to.formCheck.indexOf('custom') === -1\"\n          [class.custom-control-input]=\"to.formCheck.indexOf('custom') === 0\"\n          [value]=\"option.value\"\n          [checked]=\"isChecked(option)\"\n          [formlyAttributes]=\"field\"\n          (change)=\"onChange(option.value, $event.target.checked)\">\n        <label\n          [class.form-check-label]=\"to.formCheck.indexOf('custom') === -1\"\n          [class.custom-control-label]=\"to.formCheck.indexOf('custom') === 0\"\n          [for]=\"id + '_' + i\">\n          {{ option.label }}\n        </label>\n      </div>\n    </div>\n  "
            }]
    }], null, null); })();
    return FormlyFieldMultiCheckbox;
}(FieldType));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FormlyFieldInput = /** @class */ (function (_super) {
    __extends(FormlyFieldInput, _super);
    function FormlyFieldInput() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(FormlyFieldInput.prototype, "type", {
        get: /**
         * @return {?}
         */
        function () {
            return this.to.type || 'text';
        },
        enumerable: true,
        configurable: true
    });
FormlyFieldInput.ɵfac = function FormlyFieldInput_Factory(t) { return ɵFormlyFieldInput_BaseFactory(t || FormlyFieldInput); };
FormlyFieldInput.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormlyFieldInput, selectors: [["formly-field-input"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 2, consts: [["class", "form-control", 3, "type", "formControl", "formlyAttributes", "is-invalid", 4, "ngIf", "ngIfElse"], ["numberTmp", ""], [1, "form-control", 3, "type", "formControl", "formlyAttributes"], ["type", "number", 1, "form-control", 3, "formControl", "formlyAttributes"]], template: function FormlyFieldInput_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, FormlyFieldInput_input_0_Template, 1, 5, "input", 0);
        ɵngcc0.ɵɵtemplate(1, FormlyFieldInput_ng_template_1_Template, 1, 4, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        var _r1 = ɵngcc0.ɵɵreference(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.type !== "number")("ngIfElse", _r1);
    } }, directives: [ɵngcc1.NgIf, ɵngcc2.DefaultValueAccessor, ɵngcc2.NgControlStatus, ɵngcc2.FormControlDirective, ɵngcc3.FormlyAttributes, ɵngcc2.NumberValueAccessor], encapsulation: 2 });
var ɵFormlyFieldInput_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(FormlyFieldInput);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyFieldInput, [{
        type: Component,
        args: [{
                selector: 'formly-field-input',
                template: "\n    <input *ngIf=\"type !== 'number' else numberTmp\" [type]=\"type\" [formControl]=\"formControl\" class=\"form-control\" [formlyAttributes]=\"field\" [class.is-invalid]=\"showError\">\n    <ng-template #numberTmp>\n      <input type=\"number\" [formControl]=\"formControl\" class=\"form-control\" [formlyAttributes]=\"field\" [class.is-invalid]=\"showError\">\n    </ng-template>\n  "
            }]
    }], null, null); })();
    return FormlyFieldInput;
}(FieldType));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FormlyFieldRadio = /** @class */ (function (_super) {
    __extends(FormlyFieldRadio, _super);
    function FormlyFieldRadio() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.defaultOptions = {
            templateOptions: {
                options: [],
                formCheck: 'custom',
            },
        };
        return _this;
    }
FormlyFieldRadio.ɵfac = function FormlyFieldRadio_Factory(t) { return ɵFormlyFieldRadio_BaseFactory(t || FormlyFieldRadio); };
FormlyFieldRadio.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormlyFieldRadio, selectors: [["formly-field-radio"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 4, vars: 6, consts: [[3, "ngClass", 4, "ngFor", "ngForOf"], [3, "ngClass"], ["type", "radio", 3, "id", "name", "value", "formControl", "formlyAttributes"], [3, "for"]], template: function FormlyFieldRadio_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵtemplate(1, FormlyFieldRadio_div_1_Template, 4, 25, "div", 0);
        ɵngcc0.ɵɵpipe(2, "async");
        ɵngcc0.ɵɵpipe(3, "formlySelectOptions");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(2, 1, ɵngcc0.ɵɵpipeBind2(3, 3, ctx.to.options, ctx.field)));
    } }, directives: [ɵngcc1.NgForOf, ɵngcc1.NgClass, ɵngcc2.RadioControlValueAccessor, ɵngcc2.DefaultValueAccessor, ɵngcc2.NgControlStatus, ɵngcc2.FormControlDirective, ɵngcc3.FormlyAttributes], pipes: [ɵngcc1.AsyncPipe, ɵngcc4.ɵa], encapsulation: 2 });
var ɵFormlyFieldRadio_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(FormlyFieldRadio);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyFieldRadio, [{
        type: Component,
        args: [{
                selector: 'formly-field-radio',
                template: "\n    <div>\n      <div *ngFor=\"let option of to.options | formlySelectOptions:field | async; let i = index;\"\n        [ngClass]=\"{\n          'form-check': to.formCheck.indexOf('custom') === -1,\n          'form-check-inline': to.formCheck === 'inline',\n          'custom-control custom-radio': to.formCheck.indexOf('custom') === 0,\n          'custom-control-inline': to.formCheck === 'custom-inline'\n        }\"\n      >\n        <input type=\"radio\"\n          [id]=\"id + '_' + i\"\n          [class.form-check-input]=\"to.formCheck.indexOf('custom') === -1\"\n          [class.custom-control-input]=\"to.formCheck.indexOf('custom') === 0\"\n          [name]=\"field.name || id\"\n          [class.is-invalid]=\"showError\"\n          [attr.value]=\"option.value\"\n          [value]=\"option.value\"\n          [formControl]=\"formControl\"\n          [formlyAttributes]=\"field\"\n          [attr.disabled]=\"option.disabled || formControl.disabled ? true : null\">\n        <label\n          [class.form-check-label]=\"to.formCheck.indexOf('custom') === -1\"\n          [class.custom-control-label]=\"to.formCheck.indexOf('custom') === 0\"\n          [for]=\"id + '_' + i\">\n          {{ option.label }}\n        </label>\n      </div>\n    </div>\n  "
            }]
    }], null, null); })();
    return FormlyFieldRadio;
}(FieldType));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FormlyFieldTextArea = /** @class */ (function (_super) {
    __extends(FormlyFieldTextArea, _super);
    function FormlyFieldTextArea() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.defaultOptions = {
            templateOptions: {
                cols: 1,
                rows: 1,
            },
        };
        return _this;
    }
FormlyFieldTextArea.ɵfac = function FormlyFieldTextArea_Factory(t) { return ɵFormlyFieldTextArea_BaseFactory(t || FormlyFieldTextArea); };
FormlyFieldTextArea.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormlyFieldTextArea, selectors: [["formly-field-textarea"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 2, vars: 6, consts: [[1, "form-control", 3, "formControl", "cols", "rows", "formlyAttributes"]], template: function FormlyFieldTextArea_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "textarea", 0);
        ɵngcc0.ɵɵtext(1, "    ");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("is-invalid", ctx.showError);
        ɵngcc0.ɵɵproperty("formControl", ctx.formControl)("cols", ctx.to.cols)("rows", ctx.to.rows)("formlyAttributes", ctx.field);
    } }, directives: [ɵngcc2.DefaultValueAccessor, ɵngcc2.NgControlStatus, ɵngcc2.FormControlDirective, ɵngcc3.FormlyAttributes], encapsulation: 2 });
var ɵFormlyFieldTextArea_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(FormlyFieldTextArea);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyFieldTextArea, [{
        type: Component,
        args: [{
                selector: 'formly-field-textarea',
                template: "\n    <textarea [formControl]=\"formControl\" [cols]=\"to.cols\"\n      [rows]=\"to.rows\" class=\"form-control\" [class.is-invalid]=\"showError\"\n      [formlyAttributes]=\"field\">\n    </textarea>\n  "
            }]
    }], null, null); })();
    return FormlyFieldTextArea;
}(FieldType));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FormlyFieldSelect = /** @class */ (function (_super) {
    __extends(FormlyFieldSelect, _super);
    function FormlyFieldSelect(ngZone) {
        var _this = _super.call(this) || this;
        _this.ngZone = ngZone;
        _this.defaultOptions = {
            templateOptions: {
                options: [],
                compareWith: /**
                 * @param {?} o1
                 * @param {?} o2
                 * @return {?}
                 */
                function (o1, o2) {
                    return o1 === o2;
                },
            },
        };
        return _this;
    }
    Object.defineProperty(FormlyFieldSelect.prototype, "selectAccessor", {
        // workaround for https://github.com/angular/angular/issues/10010
        set: 
        // workaround for https://github.com/angular/angular/issues/10010
        /**
         * @param {?} s
         * @return {?}
         */
        function (s) {
            var _this = this;
            if (!s)
                return;
            /** @type {?} */
            var writeValue = s.writeValue.bind(s);
            if (s._getOptionId(s.value) === null) {
                writeValue(s.value);
            }
            s.writeValue = (/**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                /** @type {?} */
                var id = s._idCounter;
                writeValue(value);
                if (value === null) {
                    _this.ngZone.onStable.asObservable().pipe(take(1)).subscribe((/**
                     * @return {?}
                     */
                    function () {
                        if (id !== s._idCounter && s._getOptionId(value) === null && s._elementRef.nativeElement.selectedIndex !== -1) {
                            writeValue(value);
                        }
                    }));
                }
            });
        },
        enumerable: true,
        configurable: true
    });
    /** @nocollapse */
    FormlyFieldSelect.ctorParameters = function () { return [
        { type: NgZone }
    ]; };
    FormlyFieldSelect.propDecorators = {
        selectAccessor: [{ type: ViewChild, args: [SelectControlValueAccessor,] }]
    };
FormlyFieldSelect.ɵfac = function FormlyFieldSelect_Factory(t) { return new (t || FormlyFieldSelect)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
FormlyFieldSelect.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormlyFieldSelect, selectors: [["formly-field-select"]], viewQuery: function FormlyFieldSelect_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(SelectControlValueAccessor, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.selectAccessor = _t.first);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 2, consts: [["class", "form-control", "multiple", "", 3, "custom-select", "formControl", "compareWith", "is-invalid", "formlyAttributes", 4, "ngIf", "ngIfElse"], ["singleSelect", ""], ["multiple", "", 1, "form-control", 3, "formControl", "compareWith", "formlyAttributes"], [4, "ngIf"], [4, "ngIf", "ngIfElse"], ["grouplist", ""], [4, "ngFor", "ngForOf"], [3, "ngValue", "disabled"], [3, "ngValue", "disabled", 4, "ngIf", "ngIfElse"], ["optgroup", ""], [3, "label"], [3, "ngValue", "disabled", 4, "ngFor", "ngForOf"], [1, "form-control", 3, "formControl", "compareWith", "formlyAttributes"], [3, "ngValue", 4, "ngIf"], [3, "ngValue"]], template: function FormlyFieldSelect_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, FormlyFieldSelect_select_0_Template, 4, 13, "select", 0);
        ɵngcc0.ɵɵtemplate(1, FormlyFieldSelect_ng_template_1_Template, 5, 14, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        var _r1 = ɵngcc0.ɵɵreference(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.to.multiple)("ngIfElse", _r1);
    } }, directives: [ɵngcc1.NgIf, ɵngcc2.SelectMultipleControlValueAccessor, ɵngcc2.NgControlStatus, ɵngcc2.FormControlDirective, ɵngcc3.FormlyAttributes, ɵngcc1.NgForOf, ɵngcc2.NgSelectOption, ɵngcc2.ɵangular_packages_forms_forms_x, ɵngcc2.SelectControlValueAccessor], pipes: [ɵngcc1.AsyncPipe, ɵngcc4.ɵa], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyFieldSelect, [{
        type: Component,
        args: [{
                selector: 'formly-field-select',
                template: "\n    <select *ngIf=\"to.multiple; else singleSelect\" class=\"form-control\"\n      multiple\n      [class.custom-select]=\"to.customSelect\"\n      [formControl]=\"formControl\"\n      [compareWith]=\"to.compareWith\"\n      [class.is-invalid]=\"showError\"\n      [formlyAttributes]=\"field\">\n      <ng-container *ngIf=\"to.options | formlySelectOptions:field | async as opts\">\n        <ng-container *ngIf=\"to._flatOptions else grouplist\">\n          <ng-container *ngFor=\"let opt of opts\">\n            <option [ngValue]=\"opt.value\" [disabled]=\"opt.disabled\">{{ opt.label }}</option>\n          </ng-container>\n        </ng-container>\n\n        <ng-template #grouplist>\n          <ng-container *ngFor=\"let opt of opts\">\n            <option *ngIf=\"!opt.group else optgroup\" [ngValue]=\"opt.value\" [disabled]=\"opt.disabled\">{{ opt.label }}</option>\n            <ng-template #optgroup>\n              <optgroup [label]=\"opt.label\">\n                <option *ngFor=\"let child of opt.group\" [ngValue]=\"child.value\" [disabled]=\"child.disabled\">\n                  {{ child.label }}\n                </option>\n              </optgroup>\n            </ng-template>\n          </ng-container>\n        </ng-template>\n      </ng-container>\n    </select>\n\n    <ng-template #singleSelect>\n      <select class=\"form-control\"\n        [formControl]=\"formControl\"\n        [compareWith]=\"to.compareWith\"\n        [class.custom-select]=\"to.customSelect\"\n        [class.is-invalid]=\"showError\"\n        [formlyAttributes]=\"field\">\n        <option *ngIf=\"to.placeholder\" [ngValue]=\"null\">{{ to.placeholder }}</option>\n        <ng-container *ngIf=\"to.options | formlySelectOptions:field | async as opts\">\n          <ng-container *ngIf=\"to._flatOptions else grouplist\">\n            <ng-container *ngFor=\"let opt of opts\">\n              <option [ngValue]=\"opt.value\" [disabled]=\"opt.disabled\">{{ opt.label }}</option>\n            </ng-container>\n          </ng-container>\n\n          <ng-template #grouplist>\n            <ng-container *ngFor=\"let opt of opts\">\n              <option *ngIf=\"!opt.group else optgroup\" [ngValue]=\"opt.value\" [disabled]=\"opt.disabled\">{{ opt.label }}</option>\n              <ng-template #optgroup>\n                <optgroup [label]=\"opt.label\">\n                  <option *ngFor=\"let child of opt.group\" [ngValue]=\"child.value\" [disabled]=\"child.disabled\">\n                    {{ child.label }}\n                  </option>\n                </optgroup>\n              </ng-template>\n            </ng-container>\n          </ng-template>\n        </ng-container>\n      </select>\n    </ng-template>\n  "
            }]
    }], function () { return [{ type: ɵngcc0.NgZone }]; }, { selectAccessor: [{
            type: ViewChild,
            args: [SelectControlValueAccessor]
        }] }); })();
    return FormlyFieldSelect;
}(FieldType));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FormlyWrapperFormField = /** @class */ (function (_super) {
    __extends(FormlyWrapperFormField, _super);
    function FormlyWrapperFormField() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
FormlyWrapperFormField.ɵfac = function FormlyWrapperFormField_Factory(t) { return ɵFormlyWrapperFormField_BaseFactory(t || FormlyWrapperFormField); };
FormlyWrapperFormField.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormlyWrapperFormField, selectors: [["formly-wrapper-form-field"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 6, vars: 5, consts: [[1, "form-group"], [4, "ngIf"], ["fieldComponent", ""], ["class", "invalid-feedback", 3, "display", 4, "ngIf"], ["class", "form-text text-muted", 4, "ngIf"], [1, "invalid-feedback"], [3, "field"], [1, "form-text", "text-muted"]], template: function FormlyWrapperFormField_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, FormlyWrapperFormField_label_1_Template, 3, 3, "label", 1);
        ɵngcc0.ɵɵtemplate(2, FormlyWrapperFormField_ng_template_2_Template, 0, 0, "ng-template", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(4, FormlyWrapperFormField_div_4_Template, 2, 3, "div", 3);
        ɵngcc0.ɵɵtemplate(5, FormlyWrapperFormField_small_5_Template, 2, 1, "small", 4);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("has-error", ctx.showError);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.to.label && ctx.to.hideLabel !== true);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showError);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.to.description);
    } }, directives: [ɵngcc1.NgIf, ɵngcc3.ɵc], encapsulation: 2 });
var ɵFormlyWrapperFormField_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(FormlyWrapperFormField);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyWrapperFormField, [{
        type: Component,
        args: [{
                selector: 'formly-wrapper-form-field',
                template: "\n    <div class=\"form-group\" [class.has-error]=\"showError\">\n      <label *ngIf=\"to.label && to.hideLabel !== true\" [attr.for]=\"id\">\n        {{ to.label }}\n        <span *ngIf=\"to.required && to.hideRequiredMarker !== true\">*</span>\n      </label>\n\n      <ng-template #fieldComponent></ng-template>\n\n      <div *ngIf=\"showError\" class=\"invalid-feedback\" [style.display]=\"'block'\">\n        <formly-validation-message [field]=\"field\"></formly-validation-message>\n      </div>\n\n      <small *ngIf=\"to.description\" class=\"form-text text-muted\">{{ to.description }}</small>\n    </div>\n  "
            }]
    }], null, null); })();
    return FormlyWrapperFormField;
}(FieldWrapper));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var FIELD_TYPE_COMPONENTS = [
    // types
    FormlyFieldInput,
    FormlyFieldCheckbox,
    FormlyFieldRadio,
    FormlyFieldSelect,
    FormlyFieldTextArea,
    FormlyFieldMultiCheckbox,
    // wrappers
    FormlyWrapperFormField,
];
/** @type {?} */
var BOOTSTRAP_FORMLY_CONFIG = {
    types: [
        {
            name: 'input',
            component: FormlyFieldInput,
            wrappers: ['form-field'],
        },
        {
            name: 'checkbox',
            component: FormlyFieldCheckbox,
            wrappers: ['form-field'],
        },
        {
            name: 'radio',
            component: FormlyFieldRadio,
            wrappers: ['form-field'],
        },
        {
            name: 'select',
            component: FormlyFieldSelect,
            wrappers: ['form-field'],
        },
        {
            name: 'textarea',
            component: FormlyFieldTextArea,
            wrappers: ['form-field'],
        },
        {
            name: 'multicheckbox',
            component: FormlyFieldMultiCheckbox,
            wrappers: ['form-field'],
        },
    ],
    wrappers: [
        { name: 'form-field', component: FormlyWrapperFormField },
    ],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FormlyBootstrapModule = /** @class */ (function () {
    function FormlyBootstrapModule() {
    }
FormlyBootstrapModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: FormlyBootstrapModule });
FormlyBootstrapModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function FormlyBootstrapModule_Factory(t) { return new (t || FormlyBootstrapModule)(); }, imports: [[
            CommonModule,
            ReactiveFormsModule,
            FormlySelectModule,
            FormlyModule.forChild(BOOTSTRAP_FORMLY_CONFIG),
            FormlyBootstrapAddonsModule,
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FormlyBootstrapModule, { declarations: function () { return [FormlyFieldInput, FormlyFieldCheckbox, FormlyFieldRadio, FormlyFieldSelect, FormlyFieldTextArea, FormlyFieldMultiCheckbox, FormlyWrapperFormField]; }, imports: function () { return [CommonModule,
        ReactiveFormsModule,
        FormlySelectModule, ɵngcc3.FormlyModule, FormlyBootstrapAddonsModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyBootstrapModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    FIELD_TYPE_COMPONENTS,
                ],
                imports: [
                    CommonModule,
                    ReactiveFormsModule,
                    FormlySelectModule,
                    FormlyModule.forChild(BOOTSTRAP_FORMLY_CONFIG),
                    FormlyBootstrapAddonsModule,
                ]
            }]
    }], function () { return []; }, null); })();
    return FormlyBootstrapModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FormlyBootstrapModule, FormlyFieldCheckbox, FormlyFieldMultiCheckbox, FormlyFieldInput, FormlyFieldRadio, FormlyFieldTextArea, FormlyFieldSelect, FormlyWrapperFormField, BOOTSTRAP_FORMLY_CONFIG as ɵb, FIELD_TYPE_COMPONENTS as ɵa };

//# sourceMappingURL=ngx-formly-bootstrap.js.map