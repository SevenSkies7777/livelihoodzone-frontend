/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormlyModule } from '@ngx-formly/core';
import { ReactiveFormsModule } from '@angular/forms';
import { FormlyWrapperAddons } from './addons.component';
import { addonsExtension } from './addon.extension';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@ngx-formly/core';
var FormlyBootstrapAddonsModule = /** @class */ (function () {
    function FormlyBootstrapAddonsModule() {
    }
FormlyBootstrapAddonsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: FormlyBootstrapAddonsModule });
FormlyBootstrapAddonsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function FormlyBootstrapAddonsModule_Factory(t) { return new (t || FormlyBootstrapAddonsModule)(); }, imports: [[
            CommonModule,
            ReactiveFormsModule,
            FormlyModule.forChild({
                wrappers: [
                    { name: 'addons', component: FormlyWrapperAddons },
                ],
                extensions: [
                    { name: 'addons', extension: { postPopulate: addonsExtension } },
                ]
            }),
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FormlyBootstrapAddonsModule, { declarations: function () { return [FormlyWrapperAddons]; }, imports: function () { return [CommonModule,
        ReactiveFormsModule, ɵngcc1.FormlyModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyBootstrapAddonsModule, [{
        type: NgModule,
        args: [{
                declarations: [FormlyWrapperAddons],
                imports: [
                    CommonModule,
                    ReactiveFormsModule,
                    FormlyModule.forChild({
                        wrappers: [
                            { name: 'addons', component: FormlyWrapperAddons },
                        ],
                        extensions: [
                            { name: 'addons', extension: { postPopulate: addonsExtension } },
                        ]
                    }),
                ]
            }]
    }], function () { return []; }, null); })();
    return FormlyBootstrapAddonsModule;
}());
export { FormlyBootstrapAddonsModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkb25zLm1vZHVsZS5qcyIsInNvdXJjZXMiOlsiQG5neC1mb3JtbHkvYm9vdHN0cmFwL2FkZG9ucy9hZGRvbnMubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDaEQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFckQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDekQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG1CQUFtQixDQUFDOzs7QUFFcEQ7QUFFWSxJQUZaO0FBQzZCLElBZWMsQ0FBQzsrREFoQjNDLFFBQVEsU0FBQztHQUNSLFlBQVksRUFBRSxDQUFDLG1CQUFtQixDQUFDLHNCQUNuQyxPQUFPLEVBQUUsMEJBQ1AsWUFBWSwwQkFDWixtQkFBbUIsMEJBRW5CO01BQVksQ0FBQyxRQUFRLENBQUM7b0JBQ3BCLFFBQVEsRUFBRTsrQkFDUixFQUFFO0NBQUksRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFO2VBQW1CLEVBQUUsK0JBQ25EO01BQ0QsVUFBVSxFQUFFOztHQUNWLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsRUFBRSxZQUFZLEVBQUUsZUFBZSxFQUFFLEVBQUU7WUFDakU7O0tBQ0YsQ0FBQztjQUNILG1CQUNGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O2dEQUNRO0FBQUMsSUFBaUMsa0NBQUM7QUFDM0MsQ0FEMkMsQUFoQjVDLElBZ0I0QztBQUM1QyxTQURhLDJCQUEyQjtBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBGb3JtbHlNb2R1bGUgfSBmcm9tICdAbmd4LWZvcm1seS9jb3JlJztcbmltcG9ydCB7IFJlYWN0aXZlRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmltcG9ydCB7IEZvcm1seVdyYXBwZXJBZGRvbnMgfSBmcm9tICcuL2FkZG9ucy5jb21wb25lbnQnO1xuaW1wb3J0IHsgYWRkb25zRXh0ZW5zaW9uIH0gZnJvbSAnLi9hZGRvbi5leHRlbnNpb24nO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtGb3JtbHlXcmFwcGVyQWRkb25zXSxcbiAgaW1wb3J0czogW1xuICAgIENvbW1vbk1vZHVsZSxcbiAgICBSZWFjdGl2ZUZvcm1zTW9kdWxlLFxuXG4gICAgRm9ybWx5TW9kdWxlLmZvckNoaWxkKHtcbiAgICAgIHdyYXBwZXJzOiBbXG4gICAgICAgIHsgbmFtZTogJ2FkZG9ucycsIGNvbXBvbmVudDogRm9ybWx5V3JhcHBlckFkZG9ucyB9LFxuICAgICAgXSxcbiAgICAgIGV4dGVuc2lvbnM6IFtcbiAgICAgICAgeyBuYW1lOiAnYWRkb25zJywgZXh0ZW5zaW9uOiB7IHBvc3RQb3B1bGF0ZTogYWRkb25zRXh0ZW5zaW9uIH0gfSxcbiAgICAgIF0sXG4gICAgfSksXG4gIF0sXG59KVxuZXhwb3J0IGNsYXNzIEZvcm1seUJvb3RzdHJhcEFkZG9uc01vZHVsZSB7IH1cbiJdfQ==