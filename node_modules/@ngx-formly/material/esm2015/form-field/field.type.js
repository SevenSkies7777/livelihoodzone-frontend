/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { TemplateRef, ViewChild, Type } from '@angular/core';
import { FieldType as CoreFieldType, ɵdefineHiddenProp as defineHiddenProp } from '@ngx-formly/core';
import { Subject } from 'rxjs';
import { FormlyErrorStateMatcher } from './formly.error-state-matcher';
/**
 * @abstract
 * @template F
 */
import * as ɵngcc0 from '@angular/core';

const _c0 = ["matPrefix"];
const _c1 = ["matSuffix"];
export class FieldType extends CoreFieldType {
    constructor() {
        super(...arguments);
        this.errorStateMatcher = new FormlyErrorStateMatcher(this);
        this.stateChanges = new Subject();
        this._errorState = false;
    }
    /**
     * @return {?}
     */
    get formFieldControl() { return this._control || this; }
    /**
     * @param {?} control
     * @return {?}
     */
    set formFieldControl(control) {
        this._control = control;
        if (this.formField && control !== this.formField._control) {
            this.formField._control = control;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.formField) {
            this.formField._control = this.formFieldControl;
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.matPrefix || this.matSuffix) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                defineHiddenProp(this.field, '_matprefix', this.matPrefix);
                defineHiddenProp(this.field, '_matsuffix', this.matSuffix);
                ((/** @type {?} */ (this.options)))._markForCheck(this.field);
            }));
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.formField) {
            delete this.formField._control;
        }
        this.stateChanges.complete();
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    setDescribedByIds(ids) { }
    /**
     * @param {?} event
     * @return {?}
     */
    onContainerClick(event) {
        this.field.focus = true;
        this.stateChanges.next();
    }
    /**
     * @return {?}
     */
    get errorState() {
        /** @type {?} */
        const showError = (/** @type {?} */ ((/** @type {?} */ (this.options)).showError))(this);
        if (showError !== this._errorState) {
            this._errorState = showError;
            this.stateChanges.next();
        }
        return showError;
    }
    /**
     * @return {?}
     */
    get controlType() {
        if (this.to.type) {
            return this.to.type;
        }
        if (((/** @type {?} */ (this.field.type))) instanceof Type) {
            return (/** @type {?} */ (this.field.type)).constructor.name;
        }
        return (/** @type {?} */ (this.field.type));
    }
    /**
     * @return {?}
     */
    get focused() { return !!this.field.focus && !this.disabled; }
    /**
     * @return {?}
     */
    get disabled() { return !!this.to.disabled; }
    /**
     * @return {?}
     */
    get required() { return !!this.to.required; }
    /**
     * @return {?}
     */
    get placeholder() { return this.to.placeholder || ''; }
    /**
     * @return {?}
     */
    get shouldPlaceholderFloat() { return this.shouldLabelFloat; }
    /**
     * @return {?}
     */
    get value() { return this.formControl.value; }
    /**
     * @param {?} value
     * @return {?}
     */
    set value(value) { this.formControl.patchValue(value); }
    /**
     * @return {?}
     */
    get ngControl() { return (/** @type {?} */ (this.formControl)); }
    /**
     * @return {?}
     */
    get empty() { return this.value === undefined || this.value === null || this.value === ''; }
    /**
     * @return {?}
     */
    get shouldLabelFloat() { return this.focused || !this.empty; }
    /**
     * @return {?}
     */
    get formField() { return this.field ? ((/** @type {?} */ (this.field)))['__formField__'] : null; }
}
FieldType.ɵfac = function FieldType_Factory(t) { return ɵFieldType_BaseFactory(t || FieldType); };
FieldType.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FieldType, viewQuery: function FieldType_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
        ɵngcc0.ɵɵviewQuery(_c1, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.matPrefix = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.matSuffix = _t.first);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
FieldType.propDecorators = {
    matPrefix: [{ type: ViewChild, args: ['matPrefix',] }],
    matSuffix: [{ type: ViewChild, args: ['matSuffix',] }]
};
const ɵFieldType_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(FieldType);
if (false) {
    /** @type {?} */
    FieldType.prototype.matPrefix;
    /** @type {?} */
    FieldType.prototype.matSuffix;
    /** @type {?} */
    FieldType.prototype.errorStateMatcher;
    /** @type {?} */
    FieldType.prototype.stateChanges;
    /** @type {?} */
    FieldType.prototype._errorState;
    /**
     * @type {?}
     * @private
     */
    FieldType.prototype._control;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,