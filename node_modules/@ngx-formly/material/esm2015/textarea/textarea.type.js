/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild } from '@angular/core';
import { MatInput } from '@angular/material/input';
import { FieldType } from '@ngx-formly/material/form-field';
import { MAT_INPUT_VALUE_ACCESSOR } from '@angular/material/input';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/material/input';
import * as ɵngcc2 from '@angular/forms';
import * as ɵngcc3 from '@angular/cdk/text-field';
import * as ɵngcc4 from '@ngx-formly/core';
export class FormlyFieldTextArea extends FieldType {
    constructor() {
        super(...arguments);
        this.defaultOptions = {
            templateOptions: {
                cols: 1,
                rows: 1,
            },
        };
    }
}
FormlyFieldTextArea.ɵfac = function FormlyFieldTextArea_Factory(t) { return ɵFormlyFieldTextArea_BaseFactory(t || FormlyFieldTextArea); };
FormlyFieldTextArea.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormlyFieldTextArea, selectors: [["formly-field-mat-textarea"]], viewQuery: function FormlyFieldTextArea_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(MatInput, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.formFieldControl = _t.first);
    } }, features: [ɵngcc0.ɵɵProvidersFeature([
            // fix for https://github.com/ngx-formly/ngx-formly/issues/1688
            // rely on formControl value instead of elementRef which return empty value in Firefox.
            { provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: FormlyFieldTextArea },
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 2, vars: 15, consts: [["matInput", "", 3, "id", "readonly", "required", "formControl", "errorStateMatcher", "cols", "rows", "formlyAttributes", "placeholder", "tabindex", "cdkTextareaAutosize", "cdkAutosizeMinRows", "cdkAutosizeMaxRows"]], template: function FormlyFieldTextArea_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "textarea", 0);
        ɵngcc0.ɵɵtext(1, "    ");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("cdk-textarea-autosize", ctx.to.autosize);
        ɵngcc0.ɵɵproperty("id", ctx.id)("readonly", ctx.to.readonly)("required", ctx.to.required)("formControl", ctx.formControl)("errorStateMatcher", ctx.errorStateMatcher)("cols", ctx.to.cols)("rows", ctx.to.rows)("formlyAttributes", ctx.field)("placeholder", ctx.to.placeholder)("tabindex", ctx.to.tabindex)("cdkTextareaAutosize", ctx.to.autosize)("cdkAutosizeMinRows", ctx.to.autosizeMinRows)("cdkAutosizeMaxRows", ctx.to.autosizeMaxRows);
    } }, directives: [ɵngcc1.MatInput, ɵngcc2.DefaultValueAccessor, ɵngcc3.CdkTextareaAutosize, ɵngcc2.RequiredValidator, ɵngcc2.NgControlStatus, ɵngcc2.FormControlDirective, ɵngcc4.FormlyAttributes], encapsulation: 2 });
FormlyFieldTextArea.propDecorators = {
    formFieldControl: [{ type: ViewChild, args: [MatInput, (/** @type {?} */ ({ static: true })),] }]
};
const ɵFormlyFieldTextArea_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(FormlyFieldTextArea);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyFieldTextArea, [{
        type: Component,
        args: [{
                selector: 'formly-field-mat-textarea',
                template: `
    <textarea matInput
      [id]="id"
      [readonly]="to.readonly"
      [required]="to.required"
      [formControl]="formControl"
      [errorStateMatcher]="errorStateMatcher"
      [cols]="to.cols"
      [rows]="to.rows"
      [formlyAttributes]="field"
      [placeholder]="to.placeholder"
      [tabindex]="to.tabindex"
      [cdkTextareaAutosize]="to.autosize"
      [cdkAutosizeMinRows]="to.autosizeMinRows"
      [cdkAutosizeMaxRows]="to.autosizeMaxRows"
      [class.cdk-textarea-autosize]="to.autosize"
      >
    </textarea>
  `,
                providers: [
                    // fix for https://github.com/ngx-formly/ngx-formly/issues/1688
                    // rely on formControl value instead of elementRef which return empty value in Firefox.
                    { provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: FormlyFieldTextArea },
                ]
            }]
    }], null, { formFieldControl: [{
            type: ViewChild,
            args: [MatInput, ( /** @type {?} */({ static: true }))]
        }] }); })();
if (false) {
    /** @type {?} */
    FormlyFieldTextArea.prototype.formFieldControl;
    /** @type {?} */
    FormlyFieldTextArea.prototype.defaultOptions;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dGFyZWEudHlwZS5qcyIsInNvdXJjZXMiOlsiQG5neC1mb3JtbHkvbWF0ZXJpYWwvdGV4dGFyZWEvdGV4dGFyZWEudHlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ25ELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUM1RCxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQzs7Ozs7O0FBNkJuRSxNQUFNLE9BQU8sbUJBQW9CLFNBQVEsU0FBUztBQUFHLElBM0JyRDtBQUNHO0FBQTZCLFFBNEI5QixtQkFBYyxHQUFHO0FBQ25CLFlBQUksZUFBZSxFQUFFO0FBQ3JCLGdCQUFNLElBQUksRUFBRSxDQUFDO0FBQ2IsZ0JBQU0sSUFBSSxFQUFFLENBQUM7QUFDYixhQUFLO0FBQ0wsU0FBRyxDQUFDO0FBQ0osSUFBQSxDQUFDO0FBQ0Q7K0NBcENDLFNBQVMsU0FBQyxrQkFDVCxRQUFRLEVBQUUsMkJBQTJCLGtCQUNyQztPQUFRLEVBQUU7Ozs7Ozs7cURBa0JULGtCQUNELFNBQVMsRUFBRTtJQUNULCtEQUErRDtHQUMvRCx1RkFBdUYscUJBQ3ZGLEVBQUUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLFdBQVcsRUFBRSxtQkFBbUIsRUFBRSxtQkFDeEUsY0FDRjs7Ozs7Ozs2TkFDRztBQUFDO0FBQXVDLCtCQUN6QyxTQUFTLFNBQUMsUUFBUSxFQUFFLG1CQUFNLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxFQUFBO0FBQU07Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQztBQUFhO0FBQ3ZELElBRFYsK0NBQXlFO0FBQzNFO0FBQ0EsSUFERSw2Q0FLRTtBQUNKO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYXRJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2lucHV0JztcbmltcG9ydCB7IEZpZWxkVHlwZSB9IGZyb20gJ0BuZ3gtZm9ybWx5L21hdGVyaWFsL2Zvcm0tZmllbGQnO1xuaW1wb3J0IHsgTUFUX0lOUFVUX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvaW5wdXQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdmb3JtbHktZmllbGQtbWF0LXRleHRhcmVhJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8dGV4dGFyZWEgbWF0SW5wdXRcbiAgICAgIFtpZF09XCJpZFwiXG4gICAgICBbcmVhZG9ubHldPVwidG8ucmVhZG9ubHlcIlxuICAgICAgW3JlcXVpcmVkXT1cInRvLnJlcXVpcmVkXCJcbiAgICAgIFtmb3JtQ29udHJvbF09XCJmb3JtQ29udHJvbFwiXG4gICAgICBbZXJyb3JTdGF0ZU1hdGNoZXJdPVwiZXJyb3JTdGF0ZU1hdGNoZXJcIlxuICAgICAgW2NvbHNdPVwidG8uY29sc1wiXG4gICAgICBbcm93c109XCJ0by5yb3dzXCJcbiAgICAgIFtmb3JtbHlBdHRyaWJ1dGVzXT1cImZpZWxkXCJcbiAgICAgIFtwbGFjZWhvbGRlcl09XCJ0by5wbGFjZWhvbGRlclwiXG4gICAgICBbdGFiaW5kZXhdPVwidG8udGFiaW5kZXhcIlxuICAgICAgW2Nka1RleHRhcmVhQXV0b3NpemVdPVwidG8uYXV0b3NpemVcIlxuICAgICAgW2Nka0F1dG9zaXplTWluUm93c109XCJ0by5hdXRvc2l6ZU1pblJvd3NcIlxuICAgICAgW2Nka0F1dG9zaXplTWF4Um93c109XCJ0by5hdXRvc2l6ZU1heFJvd3NcIlxuICAgICAgW2NsYXNzLmNkay10ZXh0YXJlYS1hdXRvc2l6ZV09XCJ0by5hdXRvc2l6ZVwiXG4gICAgICA+XG4gICAgPC90ZXh0YXJlYT5cbiAgYCxcbiAgcHJvdmlkZXJzOiBbXG4gICAgLy8gZml4IGZvciBodHRwczovL2dpdGh1Yi5jb20vbmd4LWZvcm1seS9uZ3gtZm9ybWx5L2lzc3Vlcy8xNjg4XG4gICAgLy8gcmVseSBvbiBmb3JtQ29udHJvbCB2YWx1ZSBpbnN0ZWFkIG9mIGVsZW1lbnRSZWYgd2hpY2ggcmV0dXJuIGVtcHR5IHZhbHVlIGluIEZpcmVmb3guXG4gICAgeyBwcm92aWRlOiBNQVRfSU5QVVRfVkFMVUVfQUNDRVNTT1IsIHVzZUV4aXN0aW5nOiBGb3JtbHlGaWVsZFRleHRBcmVhIH0sXG4gIF0sXG59KVxuZXhwb3J0IGNsYXNzIEZvcm1seUZpZWxkVGV4dEFyZWEgZXh0ZW5kcyBGaWVsZFR5cGUgaW1wbGVtZW50cyBPbkluaXQge1xuICBAVmlld0NoaWxkKE1hdElucHV0LCA8YW55PiB7IHN0YXRpYzogdHJ1ZSB9KSBmb3JtRmllbGRDb250cm9sITogTWF0SW5wdXQ7XG4gIGRlZmF1bHRPcHRpb25zID0ge1xuICAgIHRlbXBsYXRlT3B0aW9uczoge1xuICAgICAgY29sczogMSxcbiAgICAgIHJvd3M6IDEsXG4gICAgfSxcbiAgfTtcbn1cbiJdfQ==