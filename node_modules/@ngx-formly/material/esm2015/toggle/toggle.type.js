/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild } from '@angular/core';
import { FieldType } from '@ngx-formly/material/form-field';
import { MatSlideToggle } from '@angular/material/slide-toggle';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/material/slide-toggle';
import * as ɵngcc2 from '@angular/forms';
import * as ɵngcc3 from '@ngx-formly/core';
export class FormlyToggleTypeComponent extends FieldType {
    constructor() {
        super(...arguments);
        this.defaultOptions = {
            templateOptions: {
                hideFieldUnderline: true,
                floatLabel: 'always',
                hideLabel: true,
            },
        };
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onContainerClick(event) {
        this.slideToggle.focus();
        super.onContainerClick(event);
    }
}
FormlyToggleTypeComponent.ɵfac = function FormlyToggleTypeComponent_Factory(t) { return ɵFormlyToggleTypeComponent_BaseFactory(t || FormlyToggleTypeComponent); };
FormlyToggleTypeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormlyToggleTypeComponent, selectors: [["formly-field-mat-toggle"]], viewQuery: function FormlyToggleTypeComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(MatSlideToggle, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.slideToggle = _t.first);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 2, vars: 7, consts: [[3, "id", "formControl", "formlyAttributes", "color", "tabIndex", "required"]], template: function FormlyToggleTypeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-slide-toggle", 0);
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("id", ctx.id)("formControl", ctx.formControl)("formlyAttributes", ctx.field)("color", ctx.to.color)("tabIndex", ctx.to.tabindex)("required", ctx.to.required);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.to.label, " ");
    } }, directives: [ɵngcc1.MatSlideToggle, ɵngcc1.MatSlideToggleRequiredValidator, ɵngcc2.NgControlStatus, ɵngcc2.FormControlDirective, ɵngcc3.FormlyAttributes, ɵngcc2.RequiredValidator], encapsulation: 2 });
FormlyToggleTypeComponent.propDecorators = {
    slideToggle: [{ type: ViewChild, args: [MatSlideToggle,] }]
};
const ɵFormlyToggleTypeComponent_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(FormlyToggleTypeComponent);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyToggleTypeComponent, [{
        type: Component,
        args: [{
                selector: 'formly-field-mat-toggle',
                template: `
    <mat-slide-toggle
      [id]="id"
      [formControl]="formControl"
      [formlyAttributes]="field"
      [color]="to.color"
      [tabIndex]="to.tabindex"
      [required]="to.required">
      {{ to.label }}
    </mat-slide-toggle>
  `
            }]
    }], null, { slideToggle: [{
            type: ViewChild,
            args: [MatSlideToggle]
        }] }); })();
if (false) {
    /** @type {?} */
    FormlyToggleTypeComponent.prototype.slideToggle;
    /** @type {?} */
    FormlyToggleTypeComponent.prototype.defaultOptions;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9nZ2xlLnR5cGUuanMiLCJzb3VyY2VzIjpbIkBuZ3gtZm9ybWx5L21hdGVyaWFsL3RvZ2dsZS90b2dnbGUudHlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQzVELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQzs7Ozs7QUFnQmhFLE1BQU0sT0FBTyx5QkFBMEIsU0FBUSxTQUFTO0FBQ3hELElBZkE7QUFDRztBQUE2QixRQWU5QixtQkFBYyxHQUFHO0FBQ25CLFlBQUksZUFBZSxFQUFFO0FBQ3JCLGdCQUFNLGtCQUFrQixFQUFFLElBQUk7QUFDOUIsZ0JBQU0sVUFBVSxFQUFFLFFBQVE7QUFDMUIsZ0JBQU0sU0FBUyxFQUFFLElBQUk7QUFDckIsYUFBSztBQUNMLFNBQUcsQ0FBQztBQUNKLElBS0EsQ0FBQztBQUNEO0FBQVE7QUFBd0I7QUFBbUI7QUFBUSxJQUx6RCxnQkFBZ0IsQ0FBQyxLQUFpQjtBQUFJLFFBQ3BDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDN0IsUUFBSSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDbEMsSUFBRSxDQUFDO0FBQ0g7cURBNUJDLFNBQVMsU0FBQyxrQkFDVCxRQUFRLEVBQUUseUJBQXlCLGtCQUNuQyxRQUFRLEVBQUU7O29CQVVULGNBQ0Y7Ozs7Ozs7Ozs7OztrTkFDRztBQUFDO0FBQTZDLDBCQUMvQyxTQUFTLFNBQUMsY0FBYztBQUFNOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQztBQUFhO0FBQ3RDLElBRFQsZ0RBQXdEO0FBQzFEO0FBQ0EsSUFERSxtREFNRTtBQUNKO0FBQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRmllbGRUeXBlIH0gZnJvbSAnQG5neC1mb3JtbHkvbWF0ZXJpYWwvZm9ybS1maWVsZCc7XG5pbXBvcnQgeyBNYXRTbGlkZVRvZ2dsZSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3NsaWRlLXRvZ2dsZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2Zvcm1seS1maWVsZC1tYXQtdG9nZ2xlJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8bWF0LXNsaWRlLXRvZ2dsZVxuICAgICAgW2lkXT1cImlkXCJcbiAgICAgIFtmb3JtQ29udHJvbF09XCJmb3JtQ29udHJvbFwiXG4gICAgICBbZm9ybWx5QXR0cmlidXRlc109XCJmaWVsZFwiXG4gICAgICBbY29sb3JdPVwidG8uY29sb3JcIlxuICAgICAgW3RhYkluZGV4XT1cInRvLnRhYmluZGV4XCJcbiAgICAgIFtyZXF1aXJlZF09XCJ0by5yZXF1aXJlZFwiPlxuICAgICAge3sgdG8ubGFiZWwgfX1cbiAgICA8L21hdC1zbGlkZS10b2dnbGU+XG4gIGAsXG59KVxuZXhwb3J0IGNsYXNzIEZvcm1seVRvZ2dsZVR5cGVDb21wb25lbnQgZXh0ZW5kcyBGaWVsZFR5cGUge1xuICBAVmlld0NoaWxkKE1hdFNsaWRlVG9nZ2xlKSBzbGlkZVRvZ2dsZSE6IE1hdFNsaWRlVG9nZ2xlO1xuICBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICB0ZW1wbGF0ZU9wdGlvbnM6IHtcbiAgICAgIGhpZGVGaWVsZFVuZGVybGluZTogdHJ1ZSxcbiAgICAgIGZsb2F0TGFiZWw6ICdhbHdheXMnLFxuICAgICAgaGlkZUxhYmVsOiB0cnVlLFxuICAgIH0sXG4gIH07XG5cbiAgb25Db250YWluZXJDbGljayhldmVudDogTW91c2VFdmVudCk6IHZvaWQge1xuICAgIHRoaXMuc2xpZGVUb2dnbGUuZm9jdXMoKTtcbiAgICBzdXBlci5vbkNvbnRhaW5lckNsaWNrKGV2ZW50KTtcbiAgfVxufVxuIl19