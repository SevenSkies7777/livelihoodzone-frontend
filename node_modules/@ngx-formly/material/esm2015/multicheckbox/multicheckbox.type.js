/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChildren, QueryList } from '@angular/core';
import { FieldType } from '@ngx-formly/material/form-field';
import { MatCheckbox } from '@angular/material/checkbox';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '@angular/material/checkbox';
import * as ɵngcc3 from '@ngx-formly/core';
import * as ɵngcc4 from '@ngx-formly/core/select';

function FormlyFieldMultiCheckbox_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "mat-checkbox", 1);
    ɵngcc0.ɵɵlistener("change", function FormlyFieldMultiCheckbox_ng_container_0_Template_mat_checkbox_change_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const option_r1 = ctx.$implicit; const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.onChange(option_r1.value, $event.checked); });
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const option_r1 = ctx.$implicit;
    const i_r2 = ctx.index;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("id", ctx_r0.id + "_" + i_r2)("formlyAttributes", ctx_r0.field)("tabIndex", ctx_r0.to.tabindex)("color", ctx_r0.to.color)("labelPosition", ctx_r0.to.labelPosition)("checked", ctx_r0.isChecked(option_r1))("disabled", ctx_r0.formControl.disabled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", option_r1.label, " ");
} }
export class FormlyFieldMultiCheckbox extends FieldType {
    constructor() {
        super(...arguments);
        this.defaultOptions = {
            templateOptions: {
                hideFieldUnderline: true,
                floatLabel: 'always',
                options: [],
                color: 'accent',
            },
        };
    }
    /**
     * @param {?} value
     * @param {?} checked
     * @return {?}
     */
    onChange(value, checked) {
        if (this.to.type === 'array') {
            this.formControl.patchValue(checked
                ? [...(this.formControl.value || []), value]
                : [...(this.formControl.value || [])].filter((/**
                 * @param {?} o
                 * @return {?}
                 */
                o => o !== value)));
        }
        else {
            this.formControl.patchValue(Object.assign({}, this.formControl.value, { [value]: checked }));
        }
        this.formControl.markAsTouched();
    }
    // TODO: find a solution to prevent scroll on focus
    /**
     * @return {?}
     */
    onContainerClick() { }
    /**
     * @param {?} option
     * @return {?}
     */
    isChecked(option) {
        /** @type {?} */
        const value = this.formControl.value;
        return value && (this.to.type === 'array'
            ? (value.indexOf(option.value) !== -1)
            : value[option.value]);
    }
}
FormlyFieldMultiCheckbox.ɵfac = function FormlyFieldMultiCheckbox_Factory(t) { return ɵFormlyFieldMultiCheckbox_BaseFactory(t || FormlyFieldMultiCheckbox); };
FormlyFieldMultiCheckbox.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormlyFieldMultiCheckbox, selectors: [["formly-field-mat-multicheckbox"]], viewQuery: function FormlyFieldMultiCheckbox_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(MatCheckbox, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.checkboxes = _t);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 6, consts: [[4, "ngFor", "ngForOf"], [3, "id", "formlyAttributes", "tabIndex", "color", "labelPosition", "checked", "disabled", "change"]], template: function FormlyFieldMultiCheckbox_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, FormlyFieldMultiCheckbox_ng_container_0_Template, 3, 8, "ng-container", 0);
        ɵngcc0.ɵɵpipe(1, "async");
        ɵngcc0.ɵɵpipe(2, "formlySelectOptions");
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(1, 1, ɵngcc0.ɵɵpipeBind2(2, 3, ctx.to.options, ctx.field)));
    } }, directives: [ɵngcc1.NgForOf, ɵngcc2.MatCheckbox, ɵngcc3.FormlyAttributes], pipes: [ɵngcc1.AsyncPipe, ɵngcc4.ɵa], encapsulation: 2 });
FormlyFieldMultiCheckbox.propDecorators = {
    checkboxes: [{ type: ViewChildren, args: [MatCheckbox,] }]
};
const ɵFormlyFieldMultiCheckbox_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(FormlyFieldMultiCheckbox);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyFieldMultiCheckbox, [{
        type: Component,
        args: [{
                selector: 'formly-field-mat-multicheckbox',
                template: `
    <ng-container *ngFor="let option of to.options | formlySelectOptions:field | async; let i = index;">
      <mat-checkbox
        [id]="id + '_' + i"
        [formlyAttributes]="field"
        [tabIndex]="to.tabindex"
        [color]="to.color"
        [labelPosition]="to.labelPosition"
        [checked]="isChecked(option)"
        [disabled]="formControl.disabled"
        (change)="onChange(option.value, $event.checked)">
          {{ option.label }}
      </mat-checkbox>
    </ng-container>
  `
            }]
    }], null, { checkboxes: [{
            type: ViewChildren,
            args: [MatCheckbox]
        }] }); })();
if (false) {
    /** @type {?} */
    FormlyFieldMultiCheckbox.prototype.checkboxes;
    /** @type {?} */
    FormlyFieldMultiCheckbox.prototype.defaultOptions;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGljaGVja2JveC50eXBlLmpzIiwic291cmNlcyI6WyJAbmd4LWZvcm1seS9tYXRlcmlhbC9tdWx0aWNoZWNrYm94L211bHRpY2hlY2tib3gudHlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25FLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUM1RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW9CekQsTUFBTSxPQUFPLHdCQUF5QixTQUFRLFNBQVM7QUFDdkQsSUFuQkE7QUFDRztBQUE2QixRQW9COUIsbUJBQWMsR0FBRztBQUNuQixZQUFJLGVBQWUsRUFBRTtBQUNyQixnQkFBTSxrQkFBa0IsRUFBRSxJQUFJO0FBQzlCLGdCQUFNLFVBQVUsRUFBRSxRQUFRO0FBQzFCLGdCQUFNLE9BQU8sRUFBRSxFQUFFO0FBQ2pCLGdCQUFNLEtBQUssRUFBRSxRQUFRO0FBQUUsYUFDbEI7QUFDTCxTQUFHLENBQUM7QUFDSixJQXlCQSxDQUFDO0FBQ0Q7QUFBUTtBQUF3QjtBQUEwQjtBQUFtQjtBQUFRLElBekJuRixRQUFRLENBQUMsS0FBVSxFQUFFLE9BQWdCO0FBQ3ZDLFFBQUksSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksS0FBSyxPQUFPLEVBQUU7QUFDbEMsWUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxPQUFPO0FBQ3pDLGdCQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUM7QUFDcEQsZ0JBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTTtBQUFNO0FBRWpEO0FBQ2tCO0FBQW9CLGdCQUhNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLEtBQUssRUFBQyxDQUMvRCxDQUFDO0FBQ1IsU0FBSztBQUFDLGFBQUs7QUFDWCxZQUFNLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxtQkFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssSUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sSUFBRyxDQUFDO0FBQ25GLFNBQUs7QUFDTCxRQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDckMsSUFBRSxDQUFDO0FBQ0g7QUFFQztBQUFRO0FBRU47QUFBUSxJQUZULGdCQUFnQixLQUFJLENBQUM7QUFDdkI7QUFDTztBQUNGO0FBQW1CO0FBQVEsSUFEOUIsU0FBUyxDQUFDLE1BQVc7QUFDdkI7QUFBeUIsY0FBZixLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLO0FBQ3hDLFFBQ0ksT0FBTyxLQUFLLElBQUksQ0FDZCxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksS0FBSyxPQUFPO0FBQzlCLFlBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDOUMsWUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FDeEIsQ0FBQztBQUNOLElBQUUsQ0FBQztBQUNIO29EQXREQyxTQUFTLFNBQUMsa0JBQ1QsUUFBUSxFQUFFLGdDQUFnQyxrQkFDMUMsUUFBUSxFQUFFOzs7Ozs7MkhBY1QsY0FDRjs7Ozs7OzhJQUNHO0FBQUM7QUFBNEMseUJBQzlDLFlBQVksU0FBQyxXQUFXO0FBQU07Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQztBQUFhO0FBRTlDLElBRkQsOENBQStEO0FBQ2pFO0FBQ29CLElBQWxCLGtEQU9FO0FBQ0o7QUFDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgVmlld0NoaWxkcmVuLCBRdWVyeUxpc3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZpZWxkVHlwZSB9IGZyb20gJ0BuZ3gtZm9ybWx5L21hdGVyaWFsL2Zvcm0tZmllbGQnO1xuaW1wb3J0IHsgTWF0Q2hlY2tib3ggfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9jaGVja2JveCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2Zvcm1seS1maWVsZC1tYXQtbXVsdGljaGVja2JveCcsXG4gIHRlbXBsYXRlOiBgXG4gICAgPG5nLWNvbnRhaW5lciAqbmdGb3I9XCJsZXQgb3B0aW9uIG9mIHRvLm9wdGlvbnMgfCBmb3JtbHlTZWxlY3RPcHRpb25zOmZpZWxkIHwgYXN5bmM7IGxldCBpID0gaW5kZXg7XCI+XG4gICAgICA8bWF0LWNoZWNrYm94XG4gICAgICAgIFtpZF09XCJpZCArICdfJyArIGlcIlxuICAgICAgICBbZm9ybWx5QXR0cmlidXRlc109XCJmaWVsZFwiXG4gICAgICAgIFt0YWJJbmRleF09XCJ0by50YWJpbmRleFwiXG4gICAgICAgIFtjb2xvcl09XCJ0by5jb2xvclwiXG4gICAgICAgIFtsYWJlbFBvc2l0aW9uXT1cInRvLmxhYmVsUG9zaXRpb25cIlxuICAgICAgICBbY2hlY2tlZF09XCJpc0NoZWNrZWQob3B0aW9uKVwiXG4gICAgICAgIFtkaXNhYmxlZF09XCJmb3JtQ29udHJvbC5kaXNhYmxlZFwiXG4gICAgICAgIChjaGFuZ2UpPVwib25DaGFuZ2Uob3B0aW9uLnZhbHVlLCAkZXZlbnQuY2hlY2tlZClcIj5cbiAgICAgICAgICB7eyBvcHRpb24ubGFiZWwgfX1cbiAgICAgIDwvbWF0LWNoZWNrYm94PlxuICAgIDwvbmctY29udGFpbmVyPlxuICBgLFxufSlcbmV4cG9ydCBjbGFzcyBGb3JtbHlGaWVsZE11bHRpQ2hlY2tib3ggZXh0ZW5kcyBGaWVsZFR5cGUge1xuICBAVmlld0NoaWxkcmVuKE1hdENoZWNrYm94KSBjaGVja2JveGVzITogUXVlcnlMaXN0PE1hdENoZWNrYm94PjtcblxuICBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICB0ZW1wbGF0ZU9wdGlvbnM6IHtcbiAgICAgIGhpZGVGaWVsZFVuZGVybGluZTogdHJ1ZSxcbiAgICAgIGZsb2F0TGFiZWw6ICdhbHdheXMnLFxuICAgICAgb3B0aW9uczogW10sXG4gICAgICBjb2xvcjogJ2FjY2VudCcsIC8vIHdvcmthcm91bmQgZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2NvbXBvbmVudHMvaXNzdWVzLzE4NDY1XG4gICAgfSxcbiAgfTtcblxuICBvbkNoYW5nZSh2YWx1ZTogYW55LCBjaGVja2VkOiBib29sZWFuKSB7XG4gICAgaWYgKHRoaXMudG8udHlwZSA9PT0gJ2FycmF5Jykge1xuICAgICAgdGhpcy5mb3JtQ29udHJvbC5wYXRjaFZhbHVlKGNoZWNrZWRcbiAgICAgICAgPyBbLi4uKHRoaXMuZm9ybUNvbnRyb2wudmFsdWUgfHwgW10pLCB2YWx1ZV1cbiAgICAgICAgOiBbLi4uKHRoaXMuZm9ybUNvbnRyb2wudmFsdWUgfHwgW10pXS5maWx0ZXIobyA9PiBvICE9PSB2YWx1ZSksXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmZvcm1Db250cm9sLnBhdGNoVmFsdWUoeyAuLi50aGlzLmZvcm1Db250cm9sLnZhbHVlLCBbdmFsdWVdOiBjaGVja2VkIH0pO1xuICAgIH1cbiAgICB0aGlzLmZvcm1Db250cm9sLm1hcmtBc1RvdWNoZWQoKTtcbiAgfVxuXG4gIC8vIFRPRE86IGZpbmQgYSBzb2x1dGlvbiB0byBwcmV2ZW50IHNjcm9sbCBvbiBmb2N1c1xuICBvbkNvbnRhaW5lckNsaWNrKCkge31cblxuICBpc0NoZWNrZWQob3B0aW9uOiBhbnkpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZm9ybUNvbnRyb2wudmFsdWU7XG5cbiAgICByZXR1cm4gdmFsdWUgJiYgKFxuICAgICAgdGhpcy50by50eXBlID09PSAnYXJyYXknXG4gICAgICAgID8gKHZhbHVlLmluZGV4T2Yob3B0aW9uLnZhbHVlKSAhPT0gLTEpXG4gICAgICAgIDogdmFsdWVbb3B0aW9uLnZhbHVlXVxuICAgICk7XG4gIH1cbn1cbiJdfQ==