/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ViewChild, Renderer2 } from '@angular/core';
import { FieldType } from '@ngx-formly/material/form-field';
import { MatCheckbox } from '@angular/material/checkbox';
import { FocusMonitor } from '@angular/cdk/a11y';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/cdk/a11y';
import * as ɵngcc2 from '@angular/material/checkbox';
import * as ɵngcc3 from '@angular/forms';
import * as ɵngcc4 from '@ngx-formly/core';
import * as ɵngcc5 from '@angular/common';

function FormlyFieldCheckbox_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 2);
    ɵngcc0.ɵɵtext(1, "*");
    ɵngcc0.ɵɵelementEnd();
} }
var FormlyFieldCheckbox = /** @class */ (function (_super) {
    tslib_1.__extends(FormlyFieldCheckbox, _super);
    function FormlyFieldCheckbox(renderer, focusMonitor) {
        var _this = _super.call(this) || this;
        _this.renderer = renderer;
        _this.focusMonitor = focusMonitor;
        _this.defaultOptions = {
            templateOptions: {
                hideFieldUnderline: true,
                indeterminate: true,
                floatLabel: 'always',
                hideLabel: true,
                align: 'start',
                // start or end
                color: 'accent',
            },
        };
        return _this;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    FormlyFieldCheckbox.prototype.onContainerClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.checkbox.focus();
        _super.prototype.onContainerClick.call(this, event);
    };
    /**
     * @return {?}
     */
    FormlyFieldCheckbox.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.focusMonitor.monitor(this.checkbox._inputElement, true).subscribe((/**
         * @param {?} focusOrigin
         * @return {?}
         */
        function (focusOrigin) {
            if (focusOrigin) {
                _this.to.focus && _this.to.focus(_this.field);
            }
            else {
                _this.to.blur && _this.to.blur(_this.field);
            }
        }));
    };
    /**
     * @return {?}
     */
    FormlyFieldCheckbox.prototype.ngAfterViewChecked = /**
     * @return {?}
     */
    function () {
        if (this.required !== this._required && this.checkbox && this.checkbox._inputElement) {
            this._required = this.required;
            /** @type {?} */
            var inputElement = this.checkbox._inputElement.nativeElement;
            if (this.required) {
                this.renderer.setAttribute(inputElement, 'required', 'required');
            }
            else {
                this.renderer.removeAttribute(inputElement, 'required');
            }
        }
    };
    /**
     * @return {?}
     */
    FormlyFieldCheckbox.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.checkbox) {
            this.focusMonitor.stopMonitoring(this.checkbox._inputElement);
        }
    };
    /** @nocollapse */
    FormlyFieldCheckbox.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: FocusMonitor }
    ]; };
    FormlyFieldCheckbox.propDecorators = {
        checkbox: [{ type: ViewChild, args: [MatCheckbox,] }]
    };
FormlyFieldCheckbox.ɵfac = function FormlyFieldCheckbox_Factory(t) { return new (t || FormlyFieldCheckbox)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor)); };
FormlyFieldCheckbox.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormlyFieldCheckbox, selectors: [["formly-field-mat-checkbox"]], viewQuery: function FormlyFieldCheckbox_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(MatCheckbox, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.checkbox = _t.first);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 9, consts: [[3, "formControl", "id", "formlyAttributes", "tabIndex", "indeterminate", "color", "labelPosition"], ["class", "mat-form-field-required-marker", 4, "ngIf"], [1, "mat-form-field-required-marker"]], template: function FormlyFieldCheckbox_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-checkbox", 0);
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵtemplate(2, FormlyFieldCheckbox_span_2_Template, 2, 0, "span", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("formControl", ctx.formControl)("id", ctx.id)("formlyAttributes", ctx.field)("tabIndex", ctx.to.tabindex)("indeterminate", ctx.to.indeterminate && ctx.formControl.value === null)("color", ctx.to.color)("labelPosition", ctx.to.align || ctx.to.labelPosition);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.to.label, " ");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.to.required && ctx.to.hideRequiredMarker !== true);
    } }, directives: [ɵngcc2.MatCheckbox, ɵngcc3.NgControlStatus, ɵngcc3.FormControlDirective, ɵngcc4.FormlyAttributes, ɵngcc5.NgIf], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyFieldCheckbox, [{
        type: Component,
        args: [{
                selector: 'formly-field-mat-checkbox',
                template: "\n    <mat-checkbox\n      [formControl]=\"formControl\"\n      [id]=\"id\"\n      [formlyAttributes]=\"field\"\n      [tabIndex]=\"to.tabindex\"\n      [indeterminate]=\"to.indeterminate && formControl.value === null\"\n      [color]=\"to.color\"\n      [labelPosition]=\"to.align || to.labelPosition\">\n      {{ to.label }}\n      <span *ngIf=\"to.required && to.hideRequiredMarker !== true\" class=\"mat-form-field-required-marker\">*</span>\n    </mat-checkbox>\n  "
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc1.FocusMonitor }]; }, { checkbox: [{
            type: ViewChild,
            args: [MatCheckbox]
        }] }); })();
    return FormlyFieldCheckbox;
}(FieldType));
export { FormlyFieldCheckbox };
if (false) {
    /** @type {?} */
    FormlyFieldCheckbox.prototype.checkbox;
    /** @type {?} */
    FormlyFieldCheckbox.prototype.defaultOptions;
    /**
     * @type {?}
     * @private
     */
    FormlyFieldCheckbox.prototype._required;
    /**
     * @type {?}
     * @private
     */
    FormlyFieldCheckbox.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    FormlyFieldCheckbox.prototype.focusMonitor;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3gudHlwZS5qcyIsInNvdXJjZXMiOlsiQG5neC1mb3JtbHkvbWF0ZXJpYWwvY2hlY2tib3gvY2hlY2tib3gudHlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBOEMsTUFBTSxlQUFlLENBQUM7QUFDNUcsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQzVELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7Ozs7Ozs7Ozs7Ozs7QUFFakQ7QUFFTyxJQWNrQywrQ0FBUztBQUFDLElBY2pELDZCQUFvQixRQUFtQixFQUFVLFlBQTBCO0FBQzdFLFFBREUsWUFDRSxpQkFBTyxTQUNSO0FBQ0gsUUFIc0IsY0FBUSxHQUFSLFFBQVEsQ0FBVztBQUFDLFFBQVMsa0JBQVksR0FBWixZQUFZLENBQWM7QUFBQyxRQVo1RSxvQkFBYyxHQUFHO0FBQ25CLFlBQUksZUFBZSxFQUFFO0FBQ3JCLGdCQUFNLGtCQUFrQixFQUFFLElBQUk7QUFDOUIsZ0JBQU0sYUFBYSxFQUFFLElBQUk7QUFDekIsZ0JBQU0sVUFBVSxFQUFFLFFBQVE7QUFDMUIsZ0JBQU0sU0FBUyxFQUFFLElBQUk7QUFDckIsZ0JBQU0sS0FBSyxFQUFFLE9BQU87QUFBRTtBQUNOLGdCQUFWLEtBQUssRUFBRSxRQUFRO0FBQUUsYUFDbEI7QUFDTCxTQUFHLENBQUM7QUFDSjtBQUNxQixJQUduQixDQUFDO0FBQ0g7QUFDTztBQUF3QjtBQUMzQjtBQUFRLElBRFYsOENBQWdCO0FBQU87QUFDdEI7QUFBbUI7QUFDbkIsSUFGRCxVQUFpQixLQUFpQjtBQUFJLFFBQ3BDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDMUIsUUFBSSxpQkFBTSxnQkFBZ0IsWUFBQyxLQUFLLENBQUMsQ0FBQztBQUNsQyxJQUFFLENBQUM7QUFFSDtBQUFRO0FBQ0g7QUFBUSxJQURYLDZDQUFlO0FBQ2Y7QUFBbUI7QUFBUSxJQUQzQjtBQUFjLFFBQWQsaUJBUUM7QUFDSCxRQVJJLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxDQUFDLFNBQVM7QUFBTTtBQUMxRDtBQUNGO0FBQVksUUFGMkMsVUFBQSxXQUFXO0FBQUksWUFDcEYsSUFBSSxXQUFXLEVBQUU7QUFDdkIsZ0JBQVEsS0FBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLElBQUksS0FBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ25ELGFBQU87QUFBQyxpQkFBSztBQUNiLGdCQUFRLEtBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxJQUFJLEtBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNqRCxhQUFPO0FBQ1AsUUFBSSxDQUFDLEVBQUMsQ0FBQztBQUNQLElBQUUsQ0FBQztBQUVIO0FBQVE7QUFDTjtBQUFRLElBRFIsZ0RBQWtCO0FBQ2xCO0FBQW1CO0FBQVEsSUFEM0I7QUFBYyxRQUNaLElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUU7QUFDMUYsWUFBTSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7QUFDckM7QUFBNkIsZ0JBQWpCLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxhQUFhO0FBQ3BFLFlBQU0sSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO0FBQ3pCLGdCQUFRLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxVQUFVLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDekUsYUFBTztBQUFDLGlCQUFLO0FBQ2IsZ0JBQVEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsWUFBWSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ2hFLGFBQU87QUFDUCxTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBRUg7QUFBUTtBQUNDO0FBQVEsSUFEZix5Q0FBVztBQUNYO0FBQW1CO0FBQ2pCLElBRkY7QUFBYyxRQUNaLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtBQUN2QixZQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDcEUsU0FBSztBQUNMLElBQUUsQ0FBQyxDQWpESztBQUFDO2dDQWhCUixTQUFTLFNBQUMsbERBZ0JxQjtRQWY5QixRQUFRLEVBQUUsbEJBZW9GLGdCQXJCakUsU0FBUztnQkFNRCxoQkFOSyxnQkFHbkMsWUFBWTtPQUluQixQQUpzQjtLQUlkLEVBQUUsUEFKc0I7QUFHckIsMkJBZ0JWLFNBQVMsU0FBQyxXQUFXO0FBQU07O3FLQUgzQixrQkFDRjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBRW1DO0FBQUMsSUFpRHJDLDBCQUFDO0FBQ0EsQ0FEQSxBQWxFRCxDQWdCeUMsU0FBUyxHQWtEakQ7QUFDRCxTQW5EYSxtQkFBbUI7QUFBSTtBQUFhO0FBQXFCLElBQ3BFLHVDQUErQztBQUNqRDtBQUNBLElBREUsNkNBU0U7QUFDSjtBQUNPO0FBQWlCO0FBQ2Y7QUFBUSxJQURmLHdDQUE0QjtBQUM5QjtBQUFRO0FBQWlCO0FBQWdCO0FBQVEsSUFBbkMsdUNBQTJCO0FBQUM7QUFBUTtBQUFpQjtBQUNqRTtBQUFRLElBRGlDLDJDQUFrQztBQUFDO0FBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIFZpZXdDaGlsZCwgUmVuZGVyZXIyLCBBZnRlclZpZXdDaGVja2VkLCBPbkRlc3Ryb3ksIEFmdGVyVmlld0luaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZpZWxkVHlwZSB9IGZyb20gJ0BuZ3gtZm9ybWx5L21hdGVyaWFsL2Zvcm0tZmllbGQnO1xuaW1wb3J0IHsgTWF0Q2hlY2tib3ggfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9jaGVja2JveCc7XG5pbXBvcnQgeyBGb2N1c01vbml0b3IgfSBmcm9tICdAYW5ndWxhci9jZGsvYTExeSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2Zvcm1seS1maWVsZC1tYXQtY2hlY2tib3gnLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxtYXQtY2hlY2tib3hcbiAgICAgIFtmb3JtQ29udHJvbF09XCJmb3JtQ29udHJvbFwiXG4gICAgICBbaWRdPVwiaWRcIlxuICAgICAgW2Zvcm1seUF0dHJpYnV0ZXNdPVwiZmllbGRcIlxuICAgICAgW3RhYkluZGV4XT1cInRvLnRhYmluZGV4XCJcbiAgICAgIFtpbmRldGVybWluYXRlXT1cInRvLmluZGV0ZXJtaW5hdGUgJiYgZm9ybUNvbnRyb2wudmFsdWUgPT09IG51bGxcIlxuICAgICAgW2NvbG9yXT1cInRvLmNvbG9yXCJcbiAgICAgIFtsYWJlbFBvc2l0aW9uXT1cInRvLmFsaWduIHx8IHRvLmxhYmVsUG9zaXRpb25cIj5cbiAgICAgIHt7IHRvLmxhYmVsIH19XG4gICAgICA8c3BhbiAqbmdJZj1cInRvLnJlcXVpcmVkICYmIHRvLmhpZGVSZXF1aXJlZE1hcmtlciAhPT0gdHJ1ZVwiIGNsYXNzPVwibWF0LWZvcm0tZmllbGQtcmVxdWlyZWQtbWFya2VyXCI+Kjwvc3Bhbj5cbiAgICA8L21hdC1jaGVja2JveD5cbiAgYCxcbn0pXG5leHBvcnQgY2xhc3MgRm9ybWx5RmllbGRDaGVja2JveCBleHRlbmRzIEZpZWxkVHlwZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIEFmdGVyVmlld0NoZWNrZWQsIE9uRGVzdHJveSB7XG4gIEBWaWV3Q2hpbGQoTWF0Q2hlY2tib3gpIGNoZWNrYm94ITogTWF0Q2hlY2tib3g7XG4gIGRlZmF1bHRPcHRpb25zID0ge1xuICAgIHRlbXBsYXRlT3B0aW9uczoge1xuICAgICAgaGlkZUZpZWxkVW5kZXJsaW5lOiB0cnVlLFxuICAgICAgaW5kZXRlcm1pbmF0ZTogdHJ1ZSxcbiAgICAgIGZsb2F0TGFiZWw6ICdhbHdheXMnLFxuICAgICAgaGlkZUxhYmVsOiB0cnVlLFxuICAgICAgYWxpZ246ICdzdGFydCcsIC8vIHN0YXJ0IG9yIGVuZFxuICAgICAgY29sb3I6ICdhY2NlbnQnLCAvLyB3b3JrYXJvdW5kIGZvciBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9jb21wb25lbnRzL2lzc3Vlcy8xODQ2NVxuICAgIH0sXG4gIH07XG5cbiAgcHJpdmF0ZSBfcmVxdWlyZWQhOiBib29sZWFuO1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsIHByaXZhdGUgZm9jdXNNb25pdG9yOiBGb2N1c01vbml0b3IpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgb25Db250YWluZXJDbGljayhldmVudDogTW91c2VFdmVudCk6IHZvaWQge1xuICAgIHRoaXMuY2hlY2tib3guZm9jdXMoKTtcbiAgICBzdXBlci5vbkNvbnRhaW5lckNsaWNrKGV2ZW50KTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLmZvY3VzTW9uaXRvci5tb25pdG9yKHRoaXMuY2hlY2tib3guX2lucHV0RWxlbWVudCwgdHJ1ZSkuc3Vic2NyaWJlKGZvY3VzT3JpZ2luID0+IHtcbiAgICAgIGlmIChmb2N1c09yaWdpbikge1xuICAgICAgICB0aGlzLnRvLmZvY3VzICYmIHRoaXMudG8uZm9jdXModGhpcy5maWVsZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnRvLmJsdXIgJiYgdGhpcy50by5ibHVyKHRoaXMuZmllbGQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgbmdBZnRlclZpZXdDaGVja2VkKCkge1xuICAgIGlmICh0aGlzLnJlcXVpcmVkICE9PSB0aGlzLl9yZXF1aXJlZCAmJiB0aGlzLmNoZWNrYm94ICYmIHRoaXMuY2hlY2tib3guX2lucHV0RWxlbWVudCkge1xuICAgICAgdGhpcy5fcmVxdWlyZWQgPSB0aGlzLnJlcXVpcmVkO1xuICAgICAgY29uc3QgaW5wdXRFbGVtZW50ID0gdGhpcy5jaGVja2JveC5faW5wdXRFbGVtZW50Lm5hdGl2ZUVsZW1lbnQ7XG4gICAgICBpZiAodGhpcy5yZXF1aXJlZCkge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZShpbnB1dEVsZW1lbnQsICdyZXF1aXJlZCcsICdyZXF1aXJlZCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVBdHRyaWJ1dGUoaW5wdXRFbGVtZW50LCAncmVxdWlyZWQnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5jaGVja2JveCkge1xuICAgICAgdGhpcy5mb2N1c01vbml0b3Iuc3RvcE1vbml0b3JpbmcodGhpcy5jaGVja2JveC5faW5wdXRFbGVtZW50KTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==