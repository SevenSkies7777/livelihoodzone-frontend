/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ViewChild } from '@angular/core';
import { FieldType } from '@ngx-formly/material/form-field';
import { MatRadioGroup } from '@angular/material/radio';
import { ɵwrapProperty as wrapProperty } from '@ngx-formly/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/material/radio';
import * as ɵngcc2 from '@angular/forms';
import * as ɵngcc3 from '@ngx-formly/core';
import * as ɵngcc4 from '@angular/common';
import * as ɵngcc5 from '@ngx-formly/core/select';

function FormlyFieldRadio_mat_radio_button_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-radio-button", 2);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var option_r1 = ctx.$implicit;
    var i_r2 = ctx.index;
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("id", ctx_r0.id + "_" + i_r2)("color", ctx_r0.to.color)("labelPosition", ctx_r0.to.labelPosition)("disabled", option_r1.disabled)("value", option_r1.value);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", option_r1.label, " ");
} }
var FormlyFieldRadio = /** @class */ (function (_super) {
    tslib_1.__extends(FormlyFieldRadio, _super);
    function FormlyFieldRadio() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.defaultOptions = {
            templateOptions: {
                hideFieldUnderline: true,
                floatLabel: 'always',
                options: [],
                tabindex: -1,
            },
        };
        return _this;
    }
    /**
     * @return {?}
     */
    FormlyFieldRadio.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.focusObserver = wrapProperty(this.field, 'focus', (/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var currentValue = _a.currentValue;
            if (_this.to.tabindex === -1
                && currentValue
                && _this.radioGroup._radios.length > 0) {
                // https://github.com/ngx-formly/ngx-formly/issues/2498
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    /** @type {?} */
                    var radio = _this.radioGroup.selected
                        ? _this.radioGroup.selected
                        : _this.radioGroup._radios.first;
                    radio._elementRef.nativeElement.focus({ preventScroll: true });
                }));
            }
        }));
    };
    // TODO: find a solution to prevent scroll on focus
    // TODO: find a solution to prevent scroll on focus
    /**
     * @return {?}
     */
    FormlyFieldRadio.prototype.onContainerClick = 
    // TODO: find a solution to prevent scroll on focus
    /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    FormlyFieldRadio.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.focusObserver && this.focusObserver();
    };
    FormlyFieldRadio.propDecorators = {
        radioGroup: [{ type: ViewChild, args: [MatRadioGroup,] }]
    };
FormlyFieldRadio.ɵfac = function FormlyFieldRadio_Factory(t) { return ɵFormlyFieldRadio_BaseFactory(t || FormlyFieldRadio); };
FormlyFieldRadio.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormlyFieldRadio, selectors: [["formly-field-mat-radio"]], viewQuery: function FormlyFieldRadio_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(MatRadioGroup, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.radioGroup = _t.first);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 4, vars: 10, consts: [[3, "formControl", "formlyAttributes", "required", "tabindex"], [3, "id", "color", "labelPosition", "disabled", "value", 4, "ngFor", "ngForOf"], [3, "id", "color", "labelPosition", "disabled", "value"]], template: function FormlyFieldRadio_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-radio-group", 0);
        ɵngcc0.ɵɵtemplate(1, FormlyFieldRadio_mat_radio_button_1_Template, 2, 6, "mat-radio-button", 1);
        ɵngcc0.ɵɵpipe(2, "async");
        ɵngcc0.ɵɵpipe(3, "formlySelectOptions");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("formControl", ctx.formControl)("formlyAttributes", ctx.field)("required", ctx.to.required)("tabindex", ctx.to.tabindex);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(2, 5, ɵngcc0.ɵɵpipeBind2(3, 7, ctx.to.options, ctx.field)));
    } }, directives: [ɵngcc1.MatRadioGroup, ɵngcc2.NgControlStatus, ɵngcc2.FormControlDirective, ɵngcc3.FormlyAttributes, ɵngcc2.RequiredValidator, ɵngcc4.NgForOf, ɵngcc1.MatRadioButton], pipes: [ɵngcc4.AsyncPipe, ɵngcc5.ɵa], encapsulation: 2 });
var ɵFormlyFieldRadio_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(FormlyFieldRadio);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyFieldRadio, [{
        type: Component,
        args: [{
                selector: 'formly-field-mat-radio',
                template: "\n    <mat-radio-group\n      [formControl]=\"formControl\"\n      [formlyAttributes]=\"field\"\n      [required]=\"to.required\"\n      [tabindex]=\"to.tabindex\">\n      <mat-radio-button *ngFor=\"let option of to.options | formlySelectOptions:field | async; let i = index;\"\n        [id]=\"id + '_' + i\"\n        [color]=\"to.color\"\n        [labelPosition]=\"to.labelPosition\"\n        [disabled]=\"option.disabled\"\n        [value]=\"option.value\">\n        {{ option.label }}\n      </mat-radio-button>\n    </mat-radio-group>\n  "
            }]
    }], null, { radioGroup: [{
            type: ViewChild,
            args: [MatRadioGroup]
        }] }); })();
    return FormlyFieldRadio;
}(FieldType));
export { FormlyFieldRadio };
if (false) {
    /** @type {?} */
    FormlyFieldRadio.prototype.radioGroup;
    /** @type {?} */
    FormlyFieldRadio.prototype.defaultOptions;
    /**
     * @type {?}
     * @private
     */
    FormlyFieldRadio.prototype.focusObserver;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkaW8udHlwZS5qcyIsInNvdXJjZXMiOlsiQG5neC1mb3JtbHkvbWF0ZXJpYWwvcmFkaW8vcmFkaW8udHlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUE0QixNQUFNLGVBQWUsQ0FBQztBQUMvRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDNUQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3hELE9BQU8sRUFBRSxhQUFhLElBQUksWUFBWSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRWpFO0FBRU8sSUFpQitCLDRDQUFTO0FBQUMsSUFuQmhEO0FBQ2lCLFFBRGpCLHFFQXdEQztBQUNELFFBcENFLG9CQUFjLEdBQUc7QUFDbkIsWUFBSSxlQUFlLEVBQUU7QUFDckIsZ0JBQU0sa0JBQWtCLEVBQUUsSUFBSTtBQUM5QixnQkFBTSxVQUFVLEVBQUUsUUFBUTtBQUMxQixnQkFBTSxPQUFPLEVBQUUsRUFBRTtBQUNqQixnQkFBTSxRQUFRLEVBQUUsQ0FBQyxDQUFDO0FBQ2xCLGFBQUs7QUFDTCxTQUFHLENBQUM7QUFDSjtBQUNxQixJQTBCckIsQ0FBQztBQUNEO0FBQVE7QUFBbUI7QUFBUSxJQTFCakMsMENBQWU7QUFDZjtBQUFtQjtBQUFRLElBRDNCO0FBQWMsUUFBZCxpQkFpQkM7QUFDSCxRQWpCSSxJQUFJLENBQUMsYUFBYSxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLE9BQU87QUFBTztBQUN6RDtBQUNZO0FBQVksUUFGNEIsVUFBQyxFQUFnQjtBQUFJLGdCQUFsQiw4QkFBWTtBQUFFLFlBQ3RFLElBQ0UsS0FBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEtBQUssQ0FBQyxDQUFDO0FBQy9CLG1CQUFXLFlBQVk7QUFDdkIsbUJBQVcsS0FBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFDckM7QUFDUixnQkFBUSx1REFBdUQ7QUFDL0QsZ0JBQVEsVUFBVTtBQUFNO0FBQ0k7QUFBb0IsZ0JBRDdCO0FBQ2I7QUFBcUMsd0JBQTNCLEtBQUssR0FBRyxLQUFJLENBQUMsVUFBVSxDQUFDLFFBQVE7QUFDaEQsd0JBQVksQ0FBQyxDQUFDLEtBQUksQ0FBQyxVQUFVLENBQUMsUUFBUTtBQUN0Qyx3QkFBWSxDQUFDLENBQUMsS0FBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsS0FBSztBQUMzQyxvQkFDVSxLQUFLLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUN6RSxnQkFBUSxDQUFDLEVBQUMsQ0FBQztBQUNYLGFBQU87QUFDUCxRQUFJLENBQUMsRUFBQyxDQUFDO0FBQ1AsSUFBRSxDQUFDO0FBRUgsSUFBRSxtREFBbUQ7QUFDckQ7QUFHYTtBQUFRO0FBQW1CO0FBQ3hDLElBSkUsMkNBQWdCO0FBQUk7QUFHYTtBQUFRO0FBR25DO0FBQVEsSUFOZCxjQUFvQixDQUFDO0FBRXZCO0FBQVE7QUFDQztBQUFRLElBRGYsc0NBQVc7QUFDWDtBQUFtQjtBQUFRLElBRDNCO0FBQWMsUUFDWixJQUFJLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztBQUMvQyxJQUFFLENBQUMsQ0FwQ0s7QUFBQztZQW5CUixTQUFTLFNBQUMsc0JBQ1QsUUFBUSxFQUFFLDlEQWtCcUMsNkJBQzlDLFNBQVMsU0FBQyxhQUFhO0FBQU07YUFuQkksc0JBQ2xDLFFBQVEsRUFBRTs7Ozs7O3dHQWVULGtCQUNGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBRXFDO0FBQUMsSUFvQ3ZDLHVCQUFDO0FBQ0EsQ0FEQSxBQXhERCxDQW1Cc0MsU0FBUyxHQXFDOUM7QUFDRCxTQXRDYSxnQkFBZ0I7QUFBSTtBQUFhO0FBQXFCLElBQ2pFLHNDQUFxRDtBQUN2RDtBQUNBLElBREUsMENBT0U7QUFDSjtBQUNPO0FBQWlCO0FBQ3BCO0FBQVEsSUFEVix5Q0FBaUM7QUFDbkM7QUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgVmlld0NoaWxkLCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZpZWxkVHlwZSB9IGZyb20gJ0BuZ3gtZm9ybWx5L21hdGVyaWFsL2Zvcm0tZmllbGQnO1xuaW1wb3J0IHsgTWF0UmFkaW9Hcm91cCB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3JhZGlvJztcbmltcG9ydCB7IMm1d3JhcFByb3BlcnR5IGFzIHdyYXBQcm9wZXJ0eSB9IGZyb20gJ0BuZ3gtZm9ybWx5L2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdmb3JtbHktZmllbGQtbWF0LXJhZGlvJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8bWF0LXJhZGlvLWdyb3VwXG4gICAgICBbZm9ybUNvbnRyb2xdPVwiZm9ybUNvbnRyb2xcIlxuICAgICAgW2Zvcm1seUF0dHJpYnV0ZXNdPVwiZmllbGRcIlxuICAgICAgW3JlcXVpcmVkXT1cInRvLnJlcXVpcmVkXCJcbiAgICAgIFt0YWJpbmRleF09XCJ0by50YWJpbmRleFwiPlxuICAgICAgPG1hdC1yYWRpby1idXR0b24gKm5nRm9yPVwibGV0IG9wdGlvbiBvZiB0by5vcHRpb25zIHwgZm9ybWx5U2VsZWN0T3B0aW9uczpmaWVsZCB8IGFzeW5jOyBsZXQgaSA9IGluZGV4O1wiXG4gICAgICAgIFtpZF09XCJpZCArICdfJyArIGlcIlxuICAgICAgICBbY29sb3JdPVwidG8uY29sb3JcIlxuICAgICAgICBbbGFiZWxQb3NpdGlvbl09XCJ0by5sYWJlbFBvc2l0aW9uXCJcbiAgICAgICAgW2Rpc2FibGVkXT1cIm9wdGlvbi5kaXNhYmxlZFwiXG4gICAgICAgIFt2YWx1ZV09XCJvcHRpb24udmFsdWVcIj5cbiAgICAgICAge3sgb3B0aW9uLmxhYmVsIH19XG4gICAgICA8L21hdC1yYWRpby1idXR0b24+XG4gICAgPC9tYXQtcmFkaW8tZ3JvdXA+XG4gIGAsXG59KVxuZXhwb3J0IGNsYXNzIEZvcm1seUZpZWxkUmFkaW8gZXh0ZW5kcyBGaWVsZFR5cGUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuICBAVmlld0NoaWxkKE1hdFJhZGlvR3JvdXApIHJhZGlvR3JvdXAhOiBNYXRSYWRpb0dyb3VwO1xuICBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICB0ZW1wbGF0ZU9wdGlvbnM6IHtcbiAgICAgIGhpZGVGaWVsZFVuZGVybGluZTogdHJ1ZSxcbiAgICAgIGZsb2F0TGFiZWw6ICdhbHdheXMnLFxuICAgICAgb3B0aW9uczogW10sXG4gICAgICB0YWJpbmRleDogLTEsXG4gICAgfSxcbiAgfTtcblxuICBwcml2YXRlIGZvY3VzT2JzZXJ2ZXIhOiBGdW5jdGlvbjtcbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMuZm9jdXNPYnNlcnZlciA9IHdyYXBQcm9wZXJ0eSh0aGlzLmZpZWxkLCAnZm9jdXMnLCAoeyBjdXJyZW50VmFsdWUgfSkgPT4ge1xuICAgICAgaWYgKFxuICAgICAgICB0aGlzLnRvLnRhYmluZGV4ID09PSAtMVxuICAgICAgICAmJiBjdXJyZW50VmFsdWVcbiAgICAgICAgJiYgdGhpcy5yYWRpb0dyb3VwLl9yYWRpb3MubGVuZ3RoID4gMFxuICAgICAgKSB7XG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9uZ3gtZm9ybWx5L25neC1mb3JtbHkvaXNzdWVzLzI0OThcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgY29uc3QgcmFkaW8gPSB0aGlzLnJhZGlvR3JvdXAuc2VsZWN0ZWRcbiAgICAgICAgICAgID8gdGhpcy5yYWRpb0dyb3VwLnNlbGVjdGVkXG4gICAgICAgICAgICA6IHRoaXMucmFkaW9Hcm91cC5fcmFkaW9zLmZpcnN0O1xuXG4gICAgICAgICAgcmFkaW8uX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5mb2N1cyh7IHByZXZlbnRTY3JvbGw6IHRydWUgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLy8gVE9ETzogZmluZCBhIHNvbHV0aW9uIHRvIHByZXZlbnQgc2Nyb2xsIG9uIGZvY3VzXG4gIG9uQ29udGFpbmVyQ2xpY2soKSB7fVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuZm9jdXNPYnNlcnZlciAmJiB0aGlzLmZvY3VzT2JzZXJ2ZXIoKTtcbiAgfVxufVxuIl19