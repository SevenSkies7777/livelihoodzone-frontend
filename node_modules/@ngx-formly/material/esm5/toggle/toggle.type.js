/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ViewChild } from '@angular/core';
import { FieldType } from '@ngx-formly/material/form-field';
import { MatSlideToggle } from '@angular/material/slide-toggle';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/material/slide-toggle';
import * as ɵngcc2 from '@angular/forms';
import * as ɵngcc3 from '@ngx-formly/core';
var FormlyToggleTypeComponent = /** @class */ (function (_super) {
    tslib_1.__extends(FormlyToggleTypeComponent, _super);
    function FormlyToggleTypeComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.defaultOptions = {
            templateOptions: {
                hideFieldUnderline: true,
                floatLabel: 'always',
                hideLabel: true,
            },
        };
        return _this;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    FormlyToggleTypeComponent.prototype.onContainerClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.slideToggle.focus();
        _super.prototype.onContainerClick.call(this, event);
    };
    FormlyToggleTypeComponent.propDecorators = {
        slideToggle: [{ type: ViewChild, args: [MatSlideToggle,] }]
    };
FormlyToggleTypeComponent.ɵfac = function FormlyToggleTypeComponent_Factory(t) { return ɵFormlyToggleTypeComponent_BaseFactory(t || FormlyToggleTypeComponent); };
FormlyToggleTypeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormlyToggleTypeComponent, selectors: [["formly-field-mat-toggle"]], viewQuery: function FormlyToggleTypeComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(MatSlideToggle, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.slideToggle = _t.first);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 2, vars: 7, consts: [[3, "id", "formControl", "formlyAttributes", "color", "tabIndex", "required"]], template: function FormlyToggleTypeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-slide-toggle", 0);
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("id", ctx.id)("formControl", ctx.formControl)("formlyAttributes", ctx.field)("color", ctx.to.color)("tabIndex", ctx.to.tabindex)("required", ctx.to.required);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.to.label, " ");
    } }, directives: [ɵngcc1.MatSlideToggle, ɵngcc1.MatSlideToggleRequiredValidator, ɵngcc2.NgControlStatus, ɵngcc2.FormControlDirective, ɵngcc3.FormlyAttributes, ɵngcc2.RequiredValidator], encapsulation: 2 });
var ɵFormlyToggleTypeComponent_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(FormlyToggleTypeComponent);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyToggleTypeComponent, [{
        type: Component,
        args: [{
                selector: 'formly-field-mat-toggle',
                template: "\n    <mat-slide-toggle\n      [id]=\"id\"\n      [formControl]=\"formControl\"\n      [formlyAttributes]=\"field\"\n      [color]=\"to.color\"\n      [tabIndex]=\"to.tabindex\"\n      [required]=\"to.required\">\n      {{ to.label }}\n    </mat-slide-toggle>\n  "
            }]
    }], null, { slideToggle: [{
            type: ViewChild,
            args: [MatSlideToggle]
        }] }); })();
    return FormlyToggleTypeComponent;
}(FieldType));
export { FormlyToggleTypeComponent };
if (false) {
    /** @type {?} */
    FormlyToggleTypeComponent.prototype.slideToggle;
    /** @type {?} */
    FormlyToggleTypeComponent.prototype.defaultOptions;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9nZ2xlLnR5cGUuanMiLCJzb3VyY2VzIjpbIkBuZ3gtZm9ybWx5L21hdGVyaWFsL3RvZ2dsZS90b2dnbGUudHlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUM1RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7Ozs7O0FBRWhFO0FBR0MsSUFXOEMscURBQVM7QUFBQyxJQWR6RDtBQUMwQixRQUQxQixxRUE0QkM7QUFDRCxRQWJFLG9CQUFjLEdBQUc7QUFDbkIsWUFBSSxlQUFlLEVBQUU7QUFDckIsZ0JBQU0sa0JBQWtCLEVBQUUsSUFBSTtBQUM5QixnQkFBTSxVQUFVLEVBQUUsUUFBUTtBQUMxQixnQkFBTSxTQUFTLEVBQUUsSUFBSTtBQUNyQixhQUFLO0FBQ0wsU0FBRyxDQUFDO0FBQ0o7QUFDcUIsSUFJckIsQ0FBQztBQUNEO0FBQVE7QUFBd0I7QUFBbUI7QUFBUSxJQUx6RCxvREFBZ0I7QUFBTztBQUN0QjtBQUFtQjtBQUN0QixJQUZFLFVBQWlCLEtBQWlCO0FBQUksUUFDcEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUM3QixRQUFJLGlCQUFNLGdCQUFnQixZQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2xDLElBQUUsQ0FBQyxDQWJLO0FBQUM7WUFkUixTQUFTLFNBQUMsc0JBQ1QsUUFBUSxFQUFFLDlEQWE4Qyw4QkFDdkQsU0FBUyxTQUFDLGNBQWM7QUFBTTtZQWRJLHNCQUNuQyxRQUFRLEVBQUU7a0pBVVQsa0JBQ0Y7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFFc0M7QUFBQyxJQWF4QyxnQ0FBQztBQUNBLENBREEsQUE1QkQsQ0FjK0MsU0FBUyxHQWN2RDtBQUNELFNBZmEseUJBQXlCO0FBQUk7QUFBYTtBQUN0QyxJQUFmLGdEQUF3RDtBQUMxRDtBQUNBLElBREUsbURBTUU7QUFDSjtBQUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZpZWxkVHlwZSB9IGZyb20gJ0BuZ3gtZm9ybWx5L21hdGVyaWFsL2Zvcm0tZmllbGQnO1xuaW1wb3J0IHsgTWF0U2xpZGVUb2dnbGUgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9zbGlkZS10b2dnbGUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdmb3JtbHktZmllbGQtbWF0LXRvZ2dsZScsXG4gIHRlbXBsYXRlOiBgXG4gICAgPG1hdC1zbGlkZS10b2dnbGVcbiAgICAgIFtpZF09XCJpZFwiXG4gICAgICBbZm9ybUNvbnRyb2xdPVwiZm9ybUNvbnRyb2xcIlxuICAgICAgW2Zvcm1seUF0dHJpYnV0ZXNdPVwiZmllbGRcIlxuICAgICAgW2NvbG9yXT1cInRvLmNvbG9yXCJcbiAgICAgIFt0YWJJbmRleF09XCJ0by50YWJpbmRleFwiXG4gICAgICBbcmVxdWlyZWRdPVwidG8ucmVxdWlyZWRcIj5cbiAgICAgIHt7IHRvLmxhYmVsIH19XG4gICAgPC9tYXQtc2xpZGUtdG9nZ2xlPlxuICBgLFxufSlcbmV4cG9ydCBjbGFzcyBGb3JtbHlUb2dnbGVUeXBlQ29tcG9uZW50IGV4dGVuZHMgRmllbGRUeXBlIHtcbiAgQFZpZXdDaGlsZChNYXRTbGlkZVRvZ2dsZSkgc2xpZGVUb2dnbGUhOiBNYXRTbGlkZVRvZ2dsZTtcbiAgZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgdGVtcGxhdGVPcHRpb25zOiB7XG4gICAgICBoaWRlRmllbGRVbmRlcmxpbmU6IHRydWUsXG4gICAgICBmbG9hdExhYmVsOiAnYWx3YXlzJyxcbiAgICAgIGhpZGVMYWJlbDogdHJ1ZSxcbiAgICB9LFxuICB9O1xuXG4gIG9uQ29udGFpbmVyQ2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICB0aGlzLnNsaWRlVG9nZ2xlLmZvY3VzKCk7XG4gICAgc3VwZXIub25Db250YWluZXJDbGljayhldmVudCk7XG4gIH1cbn1cbiJdfQ==