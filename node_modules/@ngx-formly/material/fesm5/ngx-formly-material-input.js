import { CommonModule } from '@angular/common';
import { FormlyModule } from '@ngx-formly/core';
import { ReactiveFormsModule } from '@angular/forms';
import { __extends } from 'tslib';
import { Component, ViewChild, NgModule } from '@angular/core';
import { MatInput, MatInputModule } from '@angular/material/input';
import { FieldType, FormlyMatFormFieldModule } from '@ngx-formly/material/form-field';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '@angular/material/input';
import * as ɵngcc3 from '@angular/forms';
import * as ɵngcc4 from '@ngx-formly/core';

function FormlyFieldInput_input_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "input", 2);
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("id", ctx_r0.id)("type", ctx_r0.type || "text")("readonly", ctx_r0.to.readonly)("required", ctx_r0.to.required)("errorStateMatcher", ctx_r0.errorStateMatcher)("formControl", ctx_r0.formControl)("formlyAttributes", ctx_r0.field)("tabindex", ctx_r0.to.tabindex)("placeholder", ctx_r0.to.placeholder);
} }
function FormlyFieldInput_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "input", 3);
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("id", ctx_r2.id)("readonly", ctx_r2.to.readonly)("required", ctx_r2.to.required)("errorStateMatcher", ctx_r2.errorStateMatcher)("formControl", ctx_r2.formControl)("formlyAttributes", ctx_r2.field)("tabIndex", ctx_r2.to.tabindex)("placeholder", ctx_r2.to.placeholder);
} }
var FormlyFieldInput = /** @class */ (function (_super) {
    __extends(FormlyFieldInput, _super);
    function FormlyFieldInput() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(FormlyFieldInput.prototype, "type", {
        get: /**
         * @return {?}
         */
        function () {
            return this.to.type || 'text';
        },
        enumerable: true,
        configurable: true
    });
    FormlyFieldInput.propDecorators = {
        formFieldControl: [{ type: ViewChild, args: [MatInput, (/** @type {?} */ ({ static: false })),] }]
    };
FormlyFieldInput.ɵfac = function FormlyFieldInput_Factory(t) { return ɵFormlyFieldInput_BaseFactory(t || FormlyFieldInput); };
FormlyFieldInput.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormlyFieldInput, selectors: [["formly-field-mat-input"]], viewQuery: function FormlyFieldInput_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(MatInput, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.formFieldControl = _t.first);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 2, consts: [["matInput", "", 3, "id", "type", "readonly", "required", "errorStateMatcher", "formControl", "formlyAttributes", "tabindex", "placeholder", 4, "ngIf", "ngIfElse"], ["numberTmp", ""], ["matInput", "", 3, "id", "type", "readonly", "required", "errorStateMatcher", "formControl", "formlyAttributes", "tabindex", "placeholder"], ["matInput", "", "type", "number", 3, "id", "readonly", "required", "errorStateMatcher", "formControl", "formlyAttributes", "tabIndex", "placeholder"]], template: function FormlyFieldInput_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, FormlyFieldInput_input_0_Template, 1, 9, "input", 0);
        ɵngcc0.ɵɵtemplate(1, FormlyFieldInput_ng_template_1_Template, 1, 8, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        var _r1 = ɵngcc0.ɵɵreference(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.type !== "number")("ngIfElse", _r1);
    } }, directives: [ɵngcc1.NgIf, ɵngcc2.MatInput, ɵngcc3.DefaultValueAccessor, ɵngcc3.RequiredValidator, ɵngcc3.NgControlStatus, ɵngcc3.FormControlDirective, ɵngcc4.FormlyAttributes, ɵngcc3.NumberValueAccessor], encapsulation: 2 });
var ɵFormlyFieldInput_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(FormlyFieldInput);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyFieldInput, [{
        type: Component,
        args: [{
                selector: 'formly-field-mat-input',
                template: "\n    <input *ngIf=\"type !== 'number'; else numberTmp\"\n      matInput\n      [id]=\"id\"\n      [type]=\"type || 'text'\"\n      [readonly]=\"to.readonly\"\n      [required]=\"to.required\"\n      [errorStateMatcher]=\"errorStateMatcher\"\n      [formControl]=\"formControl\"\n      [formlyAttributes]=\"field\"\n      [tabindex]=\"to.tabindex\"\n      [placeholder]=\"to.placeholder\">\n    <ng-template #numberTmp>\n      <input matInput\n             [id]=\"id\"\n             type=\"number\"\n             [readonly]=\"to.readonly\"\n             [required]=\"to.required\"\n             [errorStateMatcher]=\"errorStateMatcher\"\n             [formControl]=\"formControl\"\n             [formlyAttributes]=\"field\"\n             [tabIndex]=\"to.tabindex\"\n             [placeholder]=\"to.placeholder\">\n    </ng-template>\n  "
            }]
    }], null, { formFieldControl: [{
            type: ViewChild,
            args: [MatInput, ( /** @type {?} */({ static: false }))]
        }] }); })();
    return FormlyFieldInput;
}(FieldType));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FormlyMatInputModule = /** @class */ (function () {
    function FormlyMatInputModule() {
    }
FormlyMatInputModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: FormlyMatInputModule });
FormlyMatInputModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function FormlyMatInputModule_Factory(t) { return new (t || FormlyMatInputModule)(); }, imports: [[
            CommonModule,
            ReactiveFormsModule,
            MatInputModule,
            FormlyMatFormFieldModule,
            FormlyModule.forChild({
                types: [
                    {
                        name: 'input',
                        component: FormlyFieldInput,
                        wrappers: ['form-field']
                    },
                ]
            }),
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FormlyMatInputModule, { declarations: function () { return [FormlyFieldInput]; }, imports: function () { return [CommonModule,
        ReactiveFormsModule,
        MatInputModule,
        FormlyMatFormFieldModule, ɵngcc4.FormlyModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyMatInputModule, [{
        type: NgModule,
        args: [{
                declarations: [FormlyFieldInput],
                imports: [
                    CommonModule,
                    ReactiveFormsModule,
                    MatInputModule,
                    FormlyMatFormFieldModule,
                    FormlyModule.forChild({
                        types: [
                            {
                                name: 'input',
                                component: FormlyFieldInput,
                                wrappers: ['form-field']
                            },
                        ]
                    }),
                ]
            }]
    }], function () { return []; }, null); })();
    return FormlyMatInputModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FormlyMatInputModule, FormlyFieldInput };

//# sourceMappingURL=ngx-formly-material-input.js.map