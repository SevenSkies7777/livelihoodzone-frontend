(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@angular/material/input'),require('@angular/forms'),require('@ngx-formly/core'),require('@angular/common'),require('@ngx-formly/core/select'),require('@ngx-formly/material/form-field'),exports, require('@angular/common'), require('@ngx-formly/core'), require('@ngx-formly/core/select'), require('@angular/forms'), require('@angular/core'), require('@ngx-formly/material/form-field'), require('@angular/material/input')) :
    typeof define === 'function' && define.amd ? define('@ngx-formly/material/native-select', ['@angular/core','@angular/material/input','@angular/forms','@ngx-formly/core','@angular/common','@ngx-formly/core/select','@ngx-formly/material/form-field','exports', '@angular/common', '@ngx-formly/core', '@ngx-formly/core/select', '@angular/forms', '@angular/core', '@ngx-formly/material/form-field', '@angular/material/input'], factory) :
    (factory(global.ng.core,global.ng.material.input,global.ng.forms,global.ngxFormly.core,global.ng.common,global.ngxFormly.core.select,global.ngxFormly.material.formField,(global['ngx-formly'] = global['ngx-formly'] || {}, global['ngx-formly'].material = global['ngx-formly'].material || {}, global['ngx-formly'].material['native-select'] = {}),global.ng.common,global.core,global.select,global.ng.forms,global.ng.core,global['ngx-formly'].material['form-field'],global.ng.material.input));
}(this, (function (ɵngcc0,ɵngcc1,ɵngcc2,ɵngcc3,ɵngcc4,ɵngcc5,ɵngcc6,exports,common,core,select,forms,core$1,formField,input) { 
function FormlyFieldNativeSelect_option_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "option", 3);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngValue", null);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.to.placeholder);
} }
function FormlyFieldNativeSelect_ng_container_2_ng_container_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "option", 7);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var opt_r7 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngValue", opt_r7.value)("disabled", opt_r7.disabled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(opt_r7.label);
} }
function FormlyFieldNativeSelect_ng_container_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, FormlyFieldNativeSelect_ng_container_2_ng_container_1_ng_container_1_Template, 3, 3, "ng-container", 6);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var opts_r2 = ɵngcc0.ɵɵnextContext().ngIf;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", opts_r2);
} }
function FormlyFieldNativeSelect_ng_container_2_ng_template_2_ng_container_0_option_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "option", 7);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var opt_r10 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("ngValue", opt_r10.value)("disabled", opt_r10.disabled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(opt_r10.label);
} }
function FormlyFieldNativeSelect_ng_container_2_ng_template_2_ng_container_0_ng_template_2_option_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "option", 7);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var child_r16 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngValue", child_r16.value)("disabled", child_r16.disabled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", child_r16.label, " ");
} }
function FormlyFieldNativeSelect_ng_container_2_ng_template_2_ng_container_0_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "optgroup", 10);
    ɵngcc0.ɵɵtemplate(1, FormlyFieldNativeSelect_ng_container_2_ng_template_2_ng_container_0_ng_template_2_option_1_Template, 2, 3, "option", 11);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var opt_r10 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("label", opt_r10.label);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", opt_r10.group);
} }
function FormlyFieldNativeSelect_ng_container_2_ng_template_2_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, FormlyFieldNativeSelect_ng_container_2_ng_template_2_ng_container_0_option_1_Template, 2, 3, "option", 8);
    ɵngcc0.ɵɵtemplate(2, FormlyFieldNativeSelect_ng_container_2_ng_template_2_ng_container_0_ng_template_2_Template, 2, 2, "ng-template", null, 9, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var opt_r10 = ctx.$implicit;
    var _r12 = ɵngcc0.ɵɵreference(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !opt_r10.group)("ngIfElse", _r12);
} }
function FormlyFieldNativeSelect_ng_container_2_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, FormlyFieldNativeSelect_ng_container_2_ng_template_2_ng_container_0_Template, 4, 2, "ng-container", 6);
} if (rf & 2) {
    var opts_r2 = ɵngcc0.ɵɵnextContext().ngIf;
    ɵngcc0.ɵɵproperty("ngForOf", opts_r2);
} }
function FormlyFieldNativeSelect_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, FormlyFieldNativeSelect_ng_container_2_ng_container_1_Template, 2, 1, "ng-container", 4);
    ɵngcc0.ɵɵtemplate(2, FormlyFieldNativeSelect_ng_container_2_ng_template_2_Template, 1, 1, "ng-template", null, 5, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var _r4 = ɵngcc0.ɵɵreference(3);
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.to._flatOptions)("ngIfElse", _r4);
} }
'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormlyFieldNativeSelect = /** @class */ (function (_super) {
        __extends(FormlyFieldNativeSelect, _super);
        function FormlyFieldNativeSelect() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.defaultOptions = {
                templateOptions: {
                    options: [],
                },
            };
            return _this;
        }
        FormlyFieldNativeSelect.propDecorators = {
            formFieldControl: [{ type: core$1.ViewChild, args: [input.MatInput, ( /** @type {?} */({ static: true })),] }]
        };
FormlyFieldNativeSelect.ɵfac = function FormlyFieldNativeSelect_Factory(t) { return ɵFormlyFieldNativeSelect_BaseFactory(t || FormlyFieldNativeSelect); };
FormlyFieldNativeSelect.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormlyFieldNativeSelect, selectors: [["formly-field-mat-native-select"]], viewQuery: function FormlyFieldNativeSelect_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(input.MatInput, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.formFieldControl = _t.first);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 5, vars: 13, consts: [["matNativeControl", "", 3, "id", "readonly", "required", "errorStateMatcher", "formControl", "formlyAttributes"], [3, "ngValue", 4, "ngIf"], [4, "ngIf"], [3, "ngValue"], [4, "ngIf", "ngIfElse"], ["grouplist", ""], [4, "ngFor", "ngForOf"], [3, "ngValue", "disabled"], [3, "ngValue", "disabled", 4, "ngIf", "ngIfElse"], ["optgroup", ""], [3, "label"], [3, "ngValue", "disabled", 4, "ngFor", "ngForOf"]], template: function FormlyFieldNativeSelect_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "select", 0);
        ɵngcc0.ɵɵtemplate(1, FormlyFieldNativeSelect_option_1_Template, 2, 2, "option", 1);
        ɵngcc0.ɵɵtemplate(2, FormlyFieldNativeSelect_ng_container_2_Template, 4, 2, "ng-container", 2);
        ɵngcc0.ɵɵpipe(3, "async");
        ɵngcc0.ɵɵpipe(4, "formlySelectOptions");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("id", ctx.id)("readonly", ctx.to.readonly)("required", ctx.to.required)("errorStateMatcher", ctx.errorStateMatcher)("formControl", ctx.formControl)("formlyAttributes", ctx.field);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.to.placeholder);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(3, 8, ɵngcc0.ɵɵpipeBind2(4, 10, ctx.to.options, ctx.field)));
    } }, directives: [ɵngcc1.MatInput, ɵngcc2.SelectControlValueAccessor, ɵngcc2.RequiredValidator, ɵngcc2.NgControlStatus, ɵngcc2.FormControlDirective, ɵngcc3.FormlyAttributes, ɵngcc4.NgIf, ɵngcc2.NgSelectOption, ɵngcc2.ɵangular_packages_forms_forms_x, ɵngcc4.NgForOf], pipes: [ɵngcc4.AsyncPipe, ɵngcc5.ɵa], encapsulation: 2 });
var ɵFormlyFieldNativeSelect_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(FormlyFieldNativeSelect);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyFieldNativeSelect, [{
        type: core$1.Component,
        args: [{
                selector: 'formly-field-mat-native-select',
                template: "\n    <select matNativeControl\n      [id]=\"id\"\n      [readonly]=\"to.readonly\"\n      [required]=\"to.required\"\n      [errorStateMatcher]=\"errorStateMatcher\"\n      [formControl]=\"formControl\"\n      [formlyAttributes]=\"field\">\n      <option *ngIf=\"to.placeholder\" [ngValue]=\"null\">{{ to.placeholder }}</option>\n      <ng-container *ngIf=\"to.options | formlySelectOptions:field | async as opts\">\n        <ng-container *ngIf=\"to._flatOptions else grouplist\">\n          <ng-container *ngFor=\"let opt of opts\">\n            <option [ngValue]=\"opt.value\" [disabled]=\"opt.disabled\">{{ opt.label }}</option>\n          </ng-container>\n        </ng-container>\n\n        <ng-template #grouplist>\n          <ng-container *ngFor=\"let opt of opts\">\n            <option *ngIf=\"!opt.group else optgroup\" [ngValue]=\"opt.value\" [disabled]=\"opt.disabled\">{{ opt.label }}</option>\n            <ng-template #optgroup>\n              <optgroup [label]=\"opt.label\">\n                <option *ngFor=\"let child of opt.group\" [ngValue]=\"child.value\" [disabled]=\"child.disabled\">\n                  {{ child.label }}\n                </option>\n              </optgroup>\n            </ng-template>\n          </ng-container>\n        </ng-template>\n      </ng-container>\n    </select>\n  "
            }]
    }], null, { formFieldControl: [{
            type: core$1.ViewChild,
            args: [input.MatInput, ( /** @type {?} */({ static: true }))]
        }] }); })();
        return FormlyFieldNativeSelect;
    }(formField.FieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormlyMatNativeSelectModule = /** @class */ (function () {
        function FormlyMatNativeSelectModule() {
        }
FormlyMatNativeSelectModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: FormlyMatNativeSelectModule });
FormlyMatNativeSelectModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function FormlyMatNativeSelectModule_Factory(t) { return new (t || FormlyMatNativeSelectModule)(); }, imports: [[
            common.CommonModule,
            forms.ReactiveFormsModule,
            input.MatInputModule,
            formField.FormlyMatFormFieldModule,
            select.FormlySelectModule,
            core.FormlyModule.forChild({
                types: [
                    {
                        name: 'native-select',
                        component: FormlyFieldNativeSelect,
                        wrappers: ['form-field']
                    },
                ]
            }),
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FormlyMatNativeSelectModule, { declarations: [FormlyFieldNativeSelect], imports: [ɵngcc4.CommonModule, ɵngcc2.ReactiveFormsModule, ɵngcc1.MatInputModule, ɵngcc6.FormlyMatFormFieldModule, ɵngcc5.FormlySelectModule, ɵngcc3.FormlyModule] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyMatNativeSelectModule, [{
        type: core$1.NgModule,
        args: [{
                declarations: [FormlyFieldNativeSelect],
                imports: [
                    common.CommonModule,
                    forms.ReactiveFormsModule,
                    input.MatInputModule,
                    formField.FormlyMatFormFieldModule,
                    select.FormlySelectModule,
                    core.FormlyModule.forChild({
                        types: [
                            {
                                name: 'native-select',
                                component: FormlyFieldNativeSelect,
                                wrappers: ['form-field']
                            },
                        ]
                    }),
                ]
            }]
    }], function () { return []; }, null); })();
        return FormlyMatNativeSelectModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.FormlyMatNativeSelectModule = FormlyMatNativeSelectModule;
    exports.FormlyFieldNativeSelect = FormlyFieldNativeSelect;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-formly-material-native-select.umd.js.map