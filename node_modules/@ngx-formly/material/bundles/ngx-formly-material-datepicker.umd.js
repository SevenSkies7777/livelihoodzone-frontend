(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@angular/material/input'),require('@angular/forms'),require('@angular/material/datepicker'),require('@ngx-formly/core'),require('@angular/common'),require('@ngx-formly/material/form-field'),exports, require('@angular/common'), require('@angular/forms'), require('@angular/core'), require('@ngx-formly/core'), require('@ngx-formly/material/form-field'), require('@angular/material/input'), require('@angular/material/datepicker')) :
    typeof define === 'function' && define.amd ? define('@ngx-formly/material/datepicker', ['@angular/core','@angular/material/input','@angular/forms','@angular/material/datepicker','@ngx-formly/core','@angular/common','@ngx-formly/material/form-field','exports', '@angular/common', '@angular/forms', '@angular/core', '@ngx-formly/core', '@ngx-formly/material/form-field', '@angular/material/input', '@angular/material/datepicker'], factory) :
    (factory(global.ng.core,global.ng.material.input,global.ng.forms,global.ng.material.datepicker,global.ngxFormly.core,global.ng.common,global.ngxFormly.material.formField,(global['ngx-formly'] = global['ngx-formly'] || {}, global['ngx-formly'].material = global['ngx-formly'].material || {}, global['ngx-formly'].material.datepicker = {}),global.ng.common,global.ng.forms,global.ng.core,global.core$1,global['ngx-formly'].material['form-field'],global.ng.material.input,global.ng.material.datepicker));
}(this, (function (ɵngcc0,ɵngcc1,ɵngcc2,ɵngcc3,ɵngcc4,ɵngcc5,ɵngcc6,exports,common,forms,core,core$1,formField,input,datepicker) { 
var _c0 = ["datepickerToggle"];
function FormlyDatepickerTypeComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "mat-datepicker-toggle", 4);
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    var _r2 = ɵngcc0.ɵɵreference(4);
    ɵngcc0.ɵɵproperty("disabled", ctx_r1.to.disabled)("for", _r2);
} }
'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormlyDatepickerTypeComponent = /** @class */ (function (_super) {
        __extends(FormlyDatepickerTypeComponent, _super);
        function FormlyDatepickerTypeComponent() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.defaultOptions = {
                templateOptions: {
                    datepickerOptions: {
                        startView: 'month',
                        datepickerTogglePosition: 'suffix',
                        dateInput: ( /**
                         * @return {?}
                         */function () { }),
                        dateChange: ( /**
                         * @return {?}
                         */function () { }),
                        monthSelected: ( /**
                         * @return {?}
                         */function () { }),
                        yearSelected: ( /**
                         * @return {?}
                         */function () { }),
                    },
                },
            };
            return _this;
        }
        /**
         * @return {?}
         */
        FormlyDatepickerTypeComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                _super.prototype.ngAfterViewInit.call(this);
                // temporary fix for https://github.com/angular/material2/issues/6728
                (( /** @type {?} */(this.datepickerInput)))._formField = this.formField;
                setTimeout(( /**
                 * @return {?}
                 */function () {
                    core$1.ɵdefineHiddenProp(_this.field, '_mat' + _this.to.datepickerOptions.datepickerTogglePosition, _this.datepickerToggle);
                    (( /** @type {?} */(_this.options)))._markForCheck(_this.field);
                }));
            };
        FormlyDatepickerTypeComponent.propDecorators = {
            formFieldControl: [{ type: core.ViewChild, args: [input.MatInput, ( /** @type {?} */({ static: true })),] }],
            datepickerInput: [{ type: core.ViewChild, args: [datepicker.MatDatepickerInput,] }],
            datepickerToggle: [{ type: core.ViewChild, args: ['datepickerToggle',] }]
        };
FormlyDatepickerTypeComponent.ɵfac = function FormlyDatepickerTypeComponent_Factory(t) { return ɵFormlyDatepickerTypeComponent_BaseFactory(t || FormlyDatepickerTypeComponent); };
FormlyDatepickerTypeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormlyDatepickerTypeComponent, selectors: [["formly-field-mat-datepicker"]], viewQuery: function FormlyDatepickerTypeComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(input.MatInput, true);
        ɵngcc0.ɵɵviewQuery(datepicker.MatDatepickerInput, true);
        ɵngcc0.ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.formFieldControl = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.datepickerInput = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.datepickerToggle = _t.first);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 5, vars: 20, consts: [["matInput", "", 3, "id", "errorStateMatcher", "formControl", "matDatepicker", "matDatepickerFilter", "max", "min", "formlyAttributes", "placeholder", "tabindex", "readonly", "required", "dateInput", "dateChange"], ["datepickerToggle", ""], [3, "color", "dateClass", "disabled", "opened", "panelClass", "startAt", "startView", "touchUi", "monthSelected", "yearSelected"], ["picker", ""], [3, "disabled", "for"]], template: function FormlyDatepickerTypeComponent_Template(rf, ctx) { if (rf & 1) {
        var _r3 = ɵngcc0.ɵɵgetCurrentView();
        ɵngcc0.ɵɵelementStart(0, "input", 0);
        ɵngcc0.ɵɵlistener("dateInput", function FormlyDatepickerTypeComponent_Template_input_dateInput_0_listener($event) { return ctx.to.datepickerOptions.dateInput(ctx.field, $event); })("dateChange", function FormlyDatepickerTypeComponent_Template_input_dateChange_0_listener($event) { return ctx.to.datepickerOptions.dateChange(ctx.field, $event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(1, FormlyDatepickerTypeComponent_ng_template_1_Template, 1, 2, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementStart(3, "mat-datepicker", 2, 3);
        ɵngcc0.ɵɵlistener("monthSelected", function FormlyDatepickerTypeComponent_Template_mat_datepicker_monthSelected_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); var _r2 = ɵngcc0.ɵɵreference(4); return ctx.to.datepickerOptions.monthSelected(ctx.field, $event, _r2); })("yearSelected", function FormlyDatepickerTypeComponent_Template_mat_datepicker_yearSelected_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); var _r2 = ɵngcc0.ɵɵreference(4); return ctx.to.datepickerOptions.yearSelected(ctx.field, $event, _r2); });
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        var _r2 = ɵngcc0.ɵɵreference(4);
        ɵngcc0.ɵɵproperty("id", ctx.id)("errorStateMatcher", ctx.errorStateMatcher)("formControl", ctx.formControl)("matDatepicker", _r2)("matDatepickerFilter", ctx.to.datepickerOptions.filter)("max", ctx.to.datepickerOptions.max)("min", ctx.to.datepickerOptions.min)("formlyAttributes", ctx.field)("placeholder", ctx.to.placeholder)("tabindex", ctx.to.tabindex)("readonly", ctx.to.readonly)("required", ctx.to.required);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("color", ctx.to.color)("dateClass", ctx.to.datepickerOptions.dateClass)("disabled", ctx.to.datepickerOptions.disabled)("opened", ctx.to.datepickerOptions.opened)("panelClass", ctx.to.datepickerOptions.panelClass)("startAt", ctx.to.datepickerOptions.startAt)("startView", ctx.to.datepickerOptions.startView)("touchUi", ctx.to.datepickerOptions.touchUi);
    } }, directives: [ɵngcc1.MatInput, ɵngcc2.DefaultValueAccessor, ɵngcc3.MatDatepickerInput, ɵngcc2.NgControlStatus, ɵngcc2.FormControlDirective, ɵngcc4.FormlyAttributes, ɵngcc2.RequiredValidator, ɵngcc3.MatDatepicker, ɵngcc3.MatDatepickerToggle], encapsulation: 2 });
var ɵFormlyDatepickerTypeComponent_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(FormlyDatepickerTypeComponent);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyDatepickerTypeComponent, [{
        type: core.Component,
        args: [{
                selector: 'formly-field-mat-datepicker',
                template: "\n    <input matInput\n      [id]=\"id\"\n      [errorStateMatcher]=\"errorStateMatcher\"\n      [formControl]=\"formControl\"\n      [matDatepicker]=\"picker\"\n      [matDatepickerFilter]=\"to.datepickerOptions.filter\"\n      [max]=\"to.datepickerOptions.max\"\n      [min]=\"to.datepickerOptions.min\"\n      [formlyAttributes]=\"field\"\n      [placeholder]=\"to.placeholder\"\n      [tabindex]=\"to.tabindex\"\n      [readonly]=\"to.readonly\"\n      [required]=\"to.required\"\n      (dateInput)=\"to.datepickerOptions.dateInput(field, $event)\"\n      (dateChange)=\"to.datepickerOptions.dateChange(field, $event)\">\n    <ng-template #datepickerToggle>\n      <mat-datepicker-toggle [disabled]=\"to.disabled\" [for]=\"picker\"></mat-datepicker-toggle>\n    </ng-template>\n    <mat-datepicker #picker\n      [color]=\"to.color\"\n      [dateClass]=\"to.datepickerOptions.dateClass\"\n      [disabled]=\"to.datepickerOptions.disabled\"\n      [opened]=\"to.datepickerOptions.opened\"\n      [panelClass]=\"to.datepickerOptions.panelClass\"\n      [startAt]=\"to.datepickerOptions.startAt\"\n      [startView]=\"to.datepickerOptions.startView\"\n      [touchUi]=\"to.datepickerOptions.touchUi\"\n      (monthSelected)=\"to.datepickerOptions.monthSelected(field, $event, picker)\"\n      (yearSelected)=\"to.datepickerOptions.yearSelected(field, $event, picker)\"\n    >\n    </mat-datepicker>\n  "
            }]
    }], null, { formFieldControl: [{
            type: core.ViewChild,
            args: [input.MatInput, ( /** @type {?} */({ static: true }))]
        }], datepickerInput: [{
            type: core.ViewChild,
            args: [datepicker.MatDatepickerInput]
        }], datepickerToggle: [{
            type: core.ViewChild,
            args: ['datepickerToggle']
        }] }); })();
        return FormlyDatepickerTypeComponent;
    }(formField.FieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormlyMatDatepickerModule = /** @class */ (function () {
        function FormlyMatDatepickerModule() {
        }
FormlyMatDatepickerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: FormlyMatDatepickerModule });
FormlyMatDatepickerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function FormlyMatDatepickerModule_Factory(t) { return new (t || FormlyMatDatepickerModule)(); }, imports: [[
            common.CommonModule,
            forms.ReactiveFormsModule,
            input.MatInputModule,
            datepicker.MatDatepickerModule,
            formField.FormlyMatFormFieldModule,
            core$1.FormlyModule.forChild({
                types: [{
                        name: 'datepicker',
                        component: FormlyDatepickerTypeComponent,
                        wrappers: ['form-field']
                    }]
            }),
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FormlyMatDatepickerModule, { declarations: [FormlyDatepickerTypeComponent], imports: [ɵngcc5.CommonModule, ɵngcc2.ReactiveFormsModule, ɵngcc1.MatInputModule, ɵngcc3.MatDatepickerModule, ɵngcc6.FormlyMatFormFieldModule, ɵngcc4.FormlyModule] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyMatDatepickerModule, [{
        type: core.NgModule,
        args: [{
                declarations: [FormlyDatepickerTypeComponent],
                imports: [
                    common.CommonModule,
                    forms.ReactiveFormsModule,
                    input.MatInputModule,
                    datepicker.MatDatepickerModule,
                    formField.FormlyMatFormFieldModule,
                    core$1.FormlyModule.forChild({
                        types: [{
                                name: 'datepicker',
                                component: FormlyDatepickerTypeComponent,
                                wrappers: ['form-field']
                            }]
                    }),
                ]
            }]
    }], function () { return []; }, null); })();
        return FormlyMatDatepickerModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.FormlyMatDatepickerModule = FormlyMatDatepickerModule;
    exports.ɵa = FormlyDatepickerTypeComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-formly-material-datepicker.umd.js.map