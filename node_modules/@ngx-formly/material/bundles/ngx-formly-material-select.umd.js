(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@angular/material/select'),require('@angular/forms'),require('@ngx-formly/core'),require('@angular/common'),require('@angular/material/core'),require('@ngx-formly/core/select'),require('@ngx-formly/material/form-field'),exports, require('@angular/common'), require('@angular/forms'), require('@ngx-formly/core'), require('@ngx-formly/core/select'), require('@angular/core'), require('@angular/material/select'), require('@ngx-formly/material/form-field'), require('@angular/material/core')) :
    typeof define === 'function' && define.amd ? define('@ngx-formly/material/select', ['@angular/core','@angular/material/select','@angular/forms','@ngx-formly/core','@angular/common','@angular/material/core','@ngx-formly/core/select','@ngx-formly/material/form-field','exports', '@angular/common', '@angular/forms', '@ngx-formly/core', '@ngx-formly/core/select', '@angular/core', '@angular/material/select', '@ngx-formly/material/form-field', '@angular/material/core'], factory) :
    (factory(global.ng.core,global.ng.material.select,global.ng.forms,global.ngxFormly.core,global.ng.common,global.ng.material.core,global.ngxFormly.core.select,global.ngxFormly.material.formField,(global['ngx-formly'] = global['ngx-formly'] || {}, global['ngx-formly'].material = global['ngx-formly'].material || {}, global['ngx-formly'].material.select = {}),global.ng.common,global.ng.forms,global.core,global.select,global.ng.core,global.ng.material.select,global['ngx-formly'].material['form-field'],global.ng.material.core));
}(this, (function (ɵngcc0,ɵngcc1,ɵngcc2,ɵngcc3,ɵngcc4,ɵngcc5,ɵngcc6,ɵngcc7,exports,common,forms,core,select,core$1,select$1,formField,core$2) { 
function FormlyFieldSelect_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    var _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-option", 3);
    ɵngcc0.ɵɵlistener("click", function FormlyFieldSelect_ng_template_0_Template_mat_option_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r5); var selectOptions_r3 = ctx.selectOptions; var ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.toggleSelectAll(selectOptions_r3); });
    ɵngcc0.ɵɵelement(1, "mat-pseudo-checkbox", 4);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var selectOptions_r3 = ctx.selectOptions;
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("state", ctx_r1.getSelectAllState(selectOptions_r3));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r1.to.selectAllOption, " ");
} }
var _c0 = function (a0) { return { selectOptions: a0 }; };
function FormlyFieldSelect_ng_container_3_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0, 7);
} if (rf & 2) {
    var selectOptions_r6 = ɵngcc0.ɵɵnextContext().ngIf;
    ɵngcc0.ɵɵnextContext();
    var _r0 = ɵngcc0.ɵɵreference(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r0)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(2, _c0, selectOptions_r6));
} }
function FormlyFieldSelect_ng_container_3_ng_container_2_mat_optgroup_1_mat_option_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 12);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var child_r14 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("value", child_r14.value)("disabled", child_r14.disabled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", child_r14.label, " ");
} }
function FormlyFieldSelect_ng_container_3_ng_container_2_mat_optgroup_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-optgroup", 10);
    ɵngcc0.ɵɵtemplate(1, FormlyFieldSelect_ng_container_3_ng_container_2_mat_optgroup_1_mat_option_1_Template, 2, 3, "mat-option", 11);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var item_r10 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("label", item_r10.label);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", item_r10.group);
} }
function FormlyFieldSelect_ng_container_3_ng_container_2_mat_option_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 12);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var item_r10 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("value", item_r10.value)("disabled", item_r10.disabled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(item_r10.label);
} }
function FormlyFieldSelect_ng_container_3_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, FormlyFieldSelect_ng_container_3_ng_container_2_mat_optgroup_1_Template, 2, 2, "mat-optgroup", 8);
    ɵngcc0.ɵɵtemplate(2, FormlyFieldSelect_ng_container_3_ng_container_2_mat_option_2_Template, 2, 3, "mat-option", 9);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var item_r10 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", item_r10.group);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !item_r10.group);
} }
function FormlyFieldSelect_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, FormlyFieldSelect_ng_container_3_ng_container_1_Template, 1, 4, "ng-container", 5);
    ɵngcc0.ɵɵtemplate(2, FormlyFieldSelect_ng_container_3_ng_container_2_Template, 3, 2, "ng-container", 6);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var selectOptions_r6 = ctx.ngIf;
    var ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.to.multiple && ctx_r2.to.selectAllOption);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", selectOptions_r6);
} }
'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormlyFieldSelect = /** @class */ (function (_super) {
        __extends(FormlyFieldSelect, _super);
        function FormlyFieldSelect() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.defaultOptions = {
                templateOptions: {
                    options: [],
                    compareWith: /**
                     * @param {?} o1
                     * @param {?} o2
                     * @return {?}
                     */ function (o1, o2) {
                        return o1 === o2;
                    },
                },
            };
            return _this;
        }
        /**
         * @param {?} options
         * @return {?}
         */
        FormlyFieldSelect.prototype.getSelectAllState = /**
         * @param {?} options
         * @return {?}
         */
            function (options) {
                if (this.empty || this.value.length === 0) {
                    return '';
                }
                return this.value.length !== this.getSelectAllValue(options).length
                    ? 'indeterminate'
                    : 'checked';
            };
        /**
         * @param {?} options
         * @return {?}
         */
        FormlyFieldSelect.prototype.toggleSelectAll = /**
         * @param {?} options
         * @return {?}
         */
            function (options) {
                /** @type {?} */
                var selectAllValue = this.getSelectAllValue(options);
                this.formControl.setValue(!this.value || this.value.length !== selectAllValue.length
                    ? selectAllValue
                    : []);
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        FormlyFieldSelect.prototype.change = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                if (this.to.change) {
                    this.to.change(this.field, $event);
                }
            };
        /**
         * @return {?}
         */
        FormlyFieldSelect.prototype._getAriaLabelledby = /**
         * @return {?}
         */
            function () {
                if (this.to.attributes && this.to.attributes['aria-labelledby']) {
                    return this.to.attributes['aria-labelledby'];
                }
                if (this.formField && this.formField._labelId) {
                    return this.formField._labelId;
                }
                return null;
            };
        /**
         * @private
         * @param {?} options
         * @return {?}
         */
        FormlyFieldSelect.prototype.getSelectAllValue = /**
         * @private
         * @param {?} options
         * @return {?}
         */
            function (options) {
                if (!this.selectAllValue || options !== this.selectAllValue.options) {
                    /** @type {?} */
                    var flatOptions_1 = [];
                    options.forEach(( /**
                     * @param {?} o
                     * @return {?}
                     */function (o) {
                        return o.group
                            ? flatOptions_1.push.apply(flatOptions_1, __spread(o.group)) : flatOptions_1.push(o);
                    }));
                    this.selectAllValue = {
                        options: options,
                        value: flatOptions_1.filter(( /**
                         * @param {?} o
                         * @return {?}
                         */function (o) { return !o.disabled; })).map(( /**
                         * @param {?} o
                         * @return {?}
                         */function (o) { return o.value; })),
                    };
                }
                return this.selectAllValue.value;
            };
        FormlyFieldSelect.propDecorators = {
            formFieldControl: [{ type: core$1.ViewChild, args: [select$1.MatSelect, ( /** @type {?} */({ static: true })),] }]
        };
FormlyFieldSelect.ɵfac = function FormlyFieldSelect_Factory(t) { return ɵFormlyFieldSelect_BaseFactory(t || FormlyFieldSelect); };
FormlyFieldSelect.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormlyFieldSelect, selectors: [["formly-field-mat-select"]], viewQuery: function FormlyFieldSelect_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(select$1.MatSelect, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.formFieldControl = _t.first);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 6, vars: 17, consts: [["selectAll", ""], [3, "id", "formControl", "formlyAttributes", "placeholder", "tabIndex", "required", "compareWith", "multiple", "errorStateMatcher", "aria-labelledby", "disableOptionCentering", "selectionChange"], [4, "ngIf"], [3, "click"], [1, "mat-option-pseudo-checkbox", 3, "state"], [3, "ngTemplateOutlet", "ngTemplateOutletContext", 4, "ngIf"], [4, "ngFor", "ngForOf"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [3, "label", 4, "ngIf"], [3, "value", "disabled", 4, "ngIf"], [3, "label"], [3, "value", "disabled", 4, "ngFor", "ngForOf"], [3, "value", "disabled"]], template: function FormlyFieldSelect_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, FormlyFieldSelect_ng_template_0_Template, 3, 2, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementStart(2, "mat-select", 1);
        ɵngcc0.ɵɵlistener("selectionChange", function FormlyFieldSelect_Template_mat_select_selectionChange_2_listener($event) { return ctx.change($event); });
        ɵngcc0.ɵɵtemplate(3, FormlyFieldSelect_ng_container_3_Template, 3, 2, "ng-container", 2);
        ɵngcc0.ɵɵpipe(4, "async");
        ɵngcc0.ɵɵpipe(5, "formlySelectOptions");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("id", ctx.id)("formControl", ctx.formControl)("formlyAttributes", ctx.field)("placeholder", ctx.to.placeholder)("tabIndex", ctx.to.tabindex)("required", ctx.to.required)("compareWith", ctx.to.compareWith)("multiple", ctx.to.multiple)("errorStateMatcher", ctx.errorStateMatcher)("aria-labelledby", ctx._getAriaLabelledby())("disableOptionCentering", ctx.to.disableOptionCentering);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(4, 12, ɵngcc0.ɵɵpipeBind2(5, 14, ctx.to.options, ctx.field)));
    } }, directives: [ɵngcc1.MatSelect, ɵngcc2.NgControlStatus, ɵngcc2.FormControlDirective, ɵngcc3.FormlyAttributes, ɵngcc2.RequiredValidator, ɵngcc4.NgIf, ɵngcc5.MatOption, ɵngcc5.MatPseudoCheckbox, ɵngcc4.NgForOf, ɵngcc4.NgTemplateOutlet, ɵngcc5.MatOptgroup], pipes: [ɵngcc4.AsyncPipe, ɵngcc6.ɵa], encapsulation: 2 });
var ɵFormlyFieldSelect_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(FormlyFieldSelect);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyFieldSelect, [{
        type: core$1.Component,
        args: [{
                selector: 'formly-field-mat-select',
                template: "\n    <ng-template #selectAll let-selectOptions=\"selectOptions\">\n      <mat-option (click)=\"toggleSelectAll(selectOptions)\">\n        <mat-pseudo-checkbox class=\"mat-option-pseudo-checkbox\"\n          [state]=\"getSelectAllState(selectOptions)\">\n        </mat-pseudo-checkbox>\n        {{ to.selectAllOption }}\n      </mat-option>\n    </ng-template>\n\n    <mat-select [id]=\"id\"\n      [formControl]=\"formControl\"\n      [formlyAttributes]=\"field\"\n      [placeholder]=\"to.placeholder\"\n      [tabIndex]=\"to.tabindex\"\n      [required]=\"to.required\"\n      [compareWith]=\"to.compareWith\"\n      [multiple]=\"to.multiple\"\n      (selectionChange)=\"change($event)\"\n      [errorStateMatcher]=\"errorStateMatcher\"\n      [aria-labelledby]=\"_getAriaLabelledby()\"\n      [disableOptionCentering]=\"to.disableOptionCentering\"\n      >\n      <ng-container *ngIf=\"to.options | formlySelectOptions:field | async as selectOptions\">\n        <ng-container *ngIf=\"to.multiple && to.selectAllOption\" [ngTemplateOutlet]=\"selectAll\" [ngTemplateOutletContext]=\"{ selectOptions: selectOptions }\">\n        </ng-container>\n        <ng-container *ngFor=\"let item of selectOptions\">\n          <mat-optgroup *ngIf=\"item.group\" [label]=\"item.label\">\n            <mat-option *ngFor=\"let child of item.group\" [value]=\"child.value\" [disabled]=\"child.disabled\">\n              {{ child.label }}\n            </mat-option>\n          </mat-optgroup>\n          <mat-option *ngIf=\"!item.group\" [value]=\"item.value\" [disabled]=\"item.disabled\">{{ item.label }}</mat-option>\n        </ng-container>\n      </ng-container>\n    </mat-select>\n  "
            }]
    }], null, { formFieldControl: [{
            type: core$1.ViewChild,
            args: [select$1.MatSelect, ( /** @type {?} */({ static: true }))]
        }] }); })();
        return FormlyFieldSelect;
    }(formField.FieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormlyMatSelectModule = /** @class */ (function () {
        function FormlyMatSelectModule() {
        }
FormlyMatSelectModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: FormlyMatSelectModule });
FormlyMatSelectModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function FormlyMatSelectModule_Factory(t) { return new (t || FormlyMatSelectModule)(); }, imports: [[
            common.CommonModule,
            forms.ReactiveFormsModule,
            select$1.MatSelectModule,
            core$2.MatPseudoCheckboxModule,
            formField.FormlyMatFormFieldModule,
            select.FormlySelectModule,
            core.FormlyModule.forChild({
                types: [{
                        name: 'select',
                        component: FormlyFieldSelect,
                        wrappers: ['form-field']
                    }]
            }),
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FormlyMatSelectModule, { declarations: [FormlyFieldSelect], imports: [ɵngcc4.CommonModule, ɵngcc2.ReactiveFormsModule, ɵngcc1.MatSelectModule, ɵngcc5.MatPseudoCheckboxModule, ɵngcc7.FormlyMatFormFieldModule, ɵngcc6.FormlySelectModule, ɵngcc3.FormlyModule] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyMatSelectModule, [{
        type: core$1.NgModule,
        args: [{
                declarations: [FormlyFieldSelect],
                imports: [
                    common.CommonModule,
                    forms.ReactiveFormsModule,
                    select$1.MatSelectModule,
                    core$2.MatPseudoCheckboxModule,
                    formField.FormlyMatFormFieldModule,
                    select.FormlySelectModule,
                    core.FormlyModule.forChild({
                        types: [{
                                name: 'select',
                                component: FormlyFieldSelect,
                                wrappers: ['form-field']
                            }]
                    }),
                ]
            }]
    }], function () { return []; }, null); })();
        return FormlyMatSelectModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.FormlyMatSelectModule = FormlyMatSelectModule;
    exports.FormlyFieldSelect = FormlyFieldSelect;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-formly-material-select.umd.js.map