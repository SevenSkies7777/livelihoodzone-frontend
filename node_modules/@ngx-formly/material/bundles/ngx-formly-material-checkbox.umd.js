(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@angular/cdk/a11y'),require('@angular/material/checkbox'),require('@angular/forms'),require('@ngx-formly/core'),require('@angular/common'),require('@ngx-formly/material/form-field'),exports, require('@angular/common'), require('@ngx-formly/core'), require('@angular/forms'), require('@angular/core'), require('@ngx-formly/material/form-field'), require('@angular/material/checkbox'), require('@angular/cdk/a11y')) :
    typeof define === 'function' && define.amd ? define('@ngx-formly/material/checkbox', ['@angular/core','@angular/cdk/a11y','@angular/material/checkbox','@angular/forms','@ngx-formly/core','@angular/common','@ngx-formly/material/form-field','exports', '@angular/common', '@ngx-formly/core', '@angular/forms', '@angular/core', '@ngx-formly/material/form-field', '@angular/material/checkbox', '@angular/cdk/a11y'], factory) :
    (factory(global.ng.core,global.ng.cdk.a11y,global.ng.material.checkbox,global.ng.forms,global.ngxFormly.core,global.ng.common,global.ngxFormly.material.formField,(global['ngx-formly'] = global['ngx-formly'] || {}, global['ngx-formly'].material = global['ngx-formly'].material || {}, global['ngx-formly'].material.checkbox = {}),global.ng.common,global.core,global.ng.forms,global.ng.core,global['ngx-formly'].material['form-field'],global.ng.material.checkbox,global.ng.cdk.a11y));
}(this, (function (ɵngcc0,ɵngcc1,ɵngcc2,ɵngcc3,ɵngcc4,ɵngcc5,ɵngcc6,exports,common,core,forms,core$1,formField,checkbox,a11y) { 
function FormlyFieldCheckbox_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 2);
    ɵngcc0.ɵɵtext(1, "*");
    ɵngcc0.ɵɵelementEnd();
} }
'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormlyFieldCheckbox = /** @class */ (function (_super) {
        __extends(FormlyFieldCheckbox, _super);
        function FormlyFieldCheckbox(renderer, focusMonitor) {
            var _this = _super.call(this) || this;
            _this.renderer = renderer;
            _this.focusMonitor = focusMonitor;
            _this.defaultOptions = {
                templateOptions: {
                    hideFieldUnderline: true,
                    indeterminate: true,
                    floatLabel: 'always',
                    hideLabel: true,
                    align: 'start',
                    // start or end
                    color: 'accent',
                },
            };
            return _this;
        }
        /**
         * @param {?} event
         * @return {?}
         */
        FormlyFieldCheckbox.prototype.onContainerClick = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.checkbox.focus();
                _super.prototype.onContainerClick.call(this, event);
            };
        /**
         * @return {?}
         */
        FormlyFieldCheckbox.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.focusMonitor.monitor(this.checkbox._inputElement, true).subscribe(( /**
                 * @param {?} focusOrigin
                 * @return {?}
                 */function (focusOrigin) {
                    if (focusOrigin) {
                        _this.to.focus && _this.to.focus(_this.field);
                    }
                    else {
                        _this.to.blur && _this.to.blur(_this.field);
                    }
                }));
            };
        /**
         * @return {?}
         */
        FormlyFieldCheckbox.prototype.ngAfterViewChecked = /**
         * @return {?}
         */
            function () {
                if (this.required !== this._required && this.checkbox && this.checkbox._inputElement) {
                    this._required = this.required;
                    /** @type {?} */
                    var inputElement = this.checkbox._inputElement.nativeElement;
                    if (this.required) {
                        this.renderer.setAttribute(inputElement, 'required', 'required');
                    }
                    else {
                        this.renderer.removeAttribute(inputElement, 'required');
                    }
                }
            };
        /**
         * @return {?}
         */
        FormlyFieldCheckbox.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.checkbox) {
                    this.focusMonitor.stopMonitoring(this.checkbox._inputElement);
                }
            };
        /** @nocollapse */
        FormlyFieldCheckbox.ctorParameters = function () {
            return [
                { type: core$1.Renderer2 },
                { type: a11y.FocusMonitor }
            ];
        };
        FormlyFieldCheckbox.propDecorators = {
            checkbox: [{ type: core$1.ViewChild, args: [checkbox.MatCheckbox,] }]
        };
FormlyFieldCheckbox.ɵfac = function FormlyFieldCheckbox_Factory(t) { return new (t || FormlyFieldCheckbox)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor)); };
FormlyFieldCheckbox.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormlyFieldCheckbox, selectors: [["formly-field-mat-checkbox"]], viewQuery: function FormlyFieldCheckbox_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(checkbox.MatCheckbox, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.checkbox = _t.first);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 9, consts: [[3, "formControl", "id", "formlyAttributes", "tabIndex", "indeterminate", "color", "labelPosition"], ["class", "mat-form-field-required-marker", 4, "ngIf"], [1, "mat-form-field-required-marker"]], template: function FormlyFieldCheckbox_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-checkbox", 0);
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵtemplate(2, FormlyFieldCheckbox_span_2_Template, 2, 0, "span", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("formControl", ctx.formControl)("id", ctx.id)("formlyAttributes", ctx.field)("tabIndex", ctx.to.tabindex)("indeterminate", ctx.to.indeterminate && ctx.formControl.value === null)("color", ctx.to.color)("labelPosition", ctx.to.align || ctx.to.labelPosition);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.to.label, " ");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.to.required && ctx.to.hideRequiredMarker !== true);
    } }, directives: [ɵngcc2.MatCheckbox, ɵngcc3.NgControlStatus, ɵngcc3.FormControlDirective, ɵngcc4.FormlyAttributes, ɵngcc5.NgIf], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyFieldCheckbox, [{
        type: core$1.Component,
        args: [{
                selector: 'formly-field-mat-checkbox',
                template: "\n    <mat-checkbox\n      [formControl]=\"formControl\"\n      [id]=\"id\"\n      [formlyAttributes]=\"field\"\n      [tabIndex]=\"to.tabindex\"\n      [indeterminate]=\"to.indeterminate && formControl.value === null\"\n      [color]=\"to.color\"\n      [labelPosition]=\"to.align || to.labelPosition\">\n      {{ to.label }}\n      <span *ngIf=\"to.required && to.hideRequiredMarker !== true\" class=\"mat-form-field-required-marker\">*</span>\n    </mat-checkbox>\n  "
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc1.FocusMonitor }]; }, { checkbox: [{
            type: core$1.ViewChild,
            args: [checkbox.MatCheckbox]
        }] }); })();
        return FormlyFieldCheckbox;
    }(formField.FieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormlyMatCheckboxModule = /** @class */ (function () {
        function FormlyMatCheckboxModule() {
        }
FormlyMatCheckboxModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: FormlyMatCheckboxModule });
FormlyMatCheckboxModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function FormlyMatCheckboxModule_Factory(t) { return new (t || FormlyMatCheckboxModule)(); }, imports: [[
            common.CommonModule,
            forms.ReactiveFormsModule,
            checkbox.MatCheckboxModule,
            formField.FormlyMatFormFieldModule,
            core.FormlyModule.forChild({
                types: [
                    {
                        name: 'checkbox',
                        component: FormlyFieldCheckbox,
                        wrappers: ['form-field']
                    },
                ]
            }),
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FormlyMatCheckboxModule, { declarations: [FormlyFieldCheckbox], imports: [ɵngcc5.CommonModule, ɵngcc3.ReactiveFormsModule, ɵngcc2.MatCheckboxModule, ɵngcc6.FormlyMatFormFieldModule, ɵngcc4.FormlyModule] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyMatCheckboxModule, [{
        type: core$1.NgModule,
        args: [{
                declarations: [FormlyFieldCheckbox],
                imports: [
                    common.CommonModule,
                    forms.ReactiveFormsModule,
                    checkbox.MatCheckboxModule,
                    formField.FormlyMatFormFieldModule,
                    core.FormlyModule.forChild({
                        types: [
                            {
                                name: 'checkbox',
                                component: FormlyFieldCheckbox,
                                wrappers: ['form-field']
                            },
                        ]
                    }),
                ]
            }]
    }], function () { return []; }, null); })();
        return FormlyMatCheckboxModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.FormlyMatCheckboxModule = FormlyMatCheckboxModule;
    exports.FormlyFieldCheckbox = FormlyFieldCheckbox;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-formly-material-checkbox.umd.js.map