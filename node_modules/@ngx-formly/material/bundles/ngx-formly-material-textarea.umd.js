(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@angular/material/input'),require('@angular/forms'),require('@angular/cdk/text-field'),require('@ngx-formly/core'),require('@angular/common'),require('@ngx-formly/material/form-field'),exports, require('@angular/common'), require('@ngx-formly/core'), require('@angular/forms'), require('@angular/core'), require('@angular/material/input'), require('@ngx-formly/material/form-field')) :
    typeof define === 'function' && define.amd ? define('@ngx-formly/material/textarea', ['@angular/core','@angular/material/input','@angular/forms','@angular/cdk/text-field','@ngx-formly/core','@angular/common','@ngx-formly/material/form-field','exports', '@angular/common', '@ngx-formly/core', '@angular/forms', '@angular/core', '@angular/material/input', '@ngx-formly/material/form-field'], factory) :
    (factory(global.ng.core,global.ng.material.input,global.ng.forms,global.ng.cdk.textField,global.ngxFormly.core,global.ng.common,global.ngxFormly.material.formField,(global['ngx-formly'] = global['ngx-formly'] || {}, global['ngx-formly'].material = global['ngx-formly'].material || {}, global['ngx-formly'].material.textarea = {}),global.ng.common,global.core,global.ng.forms,global.ng.core,global.ng.material.input,global['ngx-formly'].material['form-field']));
}(this, (function (ɵngcc0,ɵngcc1,ɵngcc2,ɵngcc3,ɵngcc4,ɵngcc5,ɵngcc6,exports,common,core,forms,core$1,input,formField) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormlyFieldTextArea = /** @class */ (function (_super) {
        __extends(FormlyFieldTextArea, _super);
        function FormlyFieldTextArea() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.defaultOptions = {
                templateOptions: {
                    cols: 1,
                    rows: 1,
                },
            };
            return _this;
        }
        FormlyFieldTextArea.propDecorators = {
            formFieldControl: [{ type: core$1.ViewChild, args: [input.MatInput, ( /** @type {?} */({ static: true })),] }]
        };
FormlyFieldTextArea.ɵfac = function FormlyFieldTextArea_Factory(t) { return ɵFormlyFieldTextArea_BaseFactory(t || FormlyFieldTextArea); };
FormlyFieldTextArea.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormlyFieldTextArea, selectors: [["formly-field-mat-textarea"]], viewQuery: function FormlyFieldTextArea_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(input.MatInput, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.formFieldControl = _t.first);
    } }, features: [ɵngcc0.ɵɵProvidersFeature([
            // fix for https://github.com/ngx-formly/ngx-formly/issues/1688
            // rely on formControl value instead of elementRef which return empty value in Firefox.
            { provide: input.MAT_INPUT_VALUE_ACCESSOR, useExisting: FormlyFieldTextArea },
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 2, vars: 15, consts: [["matInput", "", 3, "id", "readonly", "required", "formControl", "errorStateMatcher", "cols", "rows", "formlyAttributes", "placeholder", "tabindex", "cdkTextareaAutosize", "cdkAutosizeMinRows", "cdkAutosizeMaxRows"]], template: function FormlyFieldTextArea_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "textarea", 0);
        ɵngcc0.ɵɵtext(1, "    ");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("cdk-textarea-autosize", ctx.to.autosize);
        ɵngcc0.ɵɵproperty("id", ctx.id)("readonly", ctx.to.readonly)("required", ctx.to.required)("formControl", ctx.formControl)("errorStateMatcher", ctx.errorStateMatcher)("cols", ctx.to.cols)("rows", ctx.to.rows)("formlyAttributes", ctx.field)("placeholder", ctx.to.placeholder)("tabindex", ctx.to.tabindex)("cdkTextareaAutosize", ctx.to.autosize)("cdkAutosizeMinRows", ctx.to.autosizeMinRows)("cdkAutosizeMaxRows", ctx.to.autosizeMaxRows);
    } }, directives: [ɵngcc1.MatInput, ɵngcc2.DefaultValueAccessor, ɵngcc3.CdkTextareaAutosize, ɵngcc2.RequiredValidator, ɵngcc2.NgControlStatus, ɵngcc2.FormControlDirective, ɵngcc4.FormlyAttributes], encapsulation: 2 });
var ɵFormlyFieldTextArea_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(FormlyFieldTextArea);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyFieldTextArea, [{
        type: core$1.Component,
        args: [{
                selector: 'formly-field-mat-textarea',
                template: "\n    <textarea matInput\n      [id]=\"id\"\n      [readonly]=\"to.readonly\"\n      [required]=\"to.required\"\n      [formControl]=\"formControl\"\n      [errorStateMatcher]=\"errorStateMatcher\"\n      [cols]=\"to.cols\"\n      [rows]=\"to.rows\"\n      [formlyAttributes]=\"field\"\n      [placeholder]=\"to.placeholder\"\n      [tabindex]=\"to.tabindex\"\n      [cdkTextareaAutosize]=\"to.autosize\"\n      [cdkAutosizeMinRows]=\"to.autosizeMinRows\"\n      [cdkAutosizeMaxRows]=\"to.autosizeMaxRows\"\n      [class.cdk-textarea-autosize]=\"to.autosize\"\n      >\n    </textarea>\n  ",
                providers: [
                    // fix for https://github.com/ngx-formly/ngx-formly/issues/1688
                    // rely on formControl value instead of elementRef which return empty value in Firefox.
                    { provide: input.MAT_INPUT_VALUE_ACCESSOR, useExisting: FormlyFieldTextArea },
                ]
            }]
    }], null, { formFieldControl: [{
            type: core$1.ViewChild,
            args: [input.MatInput, ( /** @type {?} */({ static: true }))]
        }] }); })();
        return FormlyFieldTextArea;
    }(formField.FieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormlyMatTextAreaModule = /** @class */ (function () {
        function FormlyMatTextAreaModule() {
        }
FormlyMatTextAreaModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: FormlyMatTextAreaModule });
FormlyMatTextAreaModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function FormlyMatTextAreaModule_Factory(t) { return new (t || FormlyMatTextAreaModule)(); }, imports: [[
            common.CommonModule,
            forms.ReactiveFormsModule,
            input.MatInputModule,
            formField.FormlyMatFormFieldModule,
            core.FormlyModule.forChild({
                types: [
                    {
                        name: 'textarea',
                        component: FormlyFieldTextArea,
                        wrappers: ['form-field']
                    },
                ]
            }),
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FormlyMatTextAreaModule, { declarations: [FormlyFieldTextArea], imports: [ɵngcc5.CommonModule, ɵngcc2.ReactiveFormsModule, ɵngcc1.MatInputModule, ɵngcc6.FormlyMatFormFieldModule, ɵngcc4.FormlyModule] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyMatTextAreaModule, [{
        type: core$1.NgModule,
        args: [{
                declarations: [FormlyFieldTextArea],
                imports: [
                    common.CommonModule,
                    forms.ReactiveFormsModule,
                    input.MatInputModule,
                    formField.FormlyMatFormFieldModule,
                    core.FormlyModule.forChild({
                        types: [
                            {
                                name: 'textarea',
                                component: FormlyFieldTextArea,
                                wrappers: ['form-field']
                            },
                        ]
                    }),
                ]
            }]
    }], function () { return []; }, null); })();
        return FormlyMatTextAreaModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.FormlyMatTextAreaModule = FormlyMatTextAreaModule;
    exports.FormlyFieldTextArea = FormlyFieldTextArea;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-formly-material-textarea.umd.js.map