(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@angular/common'),require('@angular/material/input'),require('@angular/forms'),require('@ngx-formly/core'),require('@ngx-formly/material/form-field'),exports, require('@angular/common'), require('@ngx-formly/core'), require('@angular/forms'), require('@angular/core'), require('@angular/material/input'), require('@ngx-formly/material/form-field')) :
    typeof define === 'function' && define.amd ? define('@ngx-formly/material/input', ['@angular/core','@angular/common','@angular/material/input','@angular/forms','@ngx-formly/core','@ngx-formly/material/form-field','exports', '@angular/common', '@ngx-formly/core', '@angular/forms', '@angular/core', '@angular/material/input', '@ngx-formly/material/form-field'], factory) :
    (factory(global.ng.core,global.ng.common,global.ng.material.input,global.ng.forms,global.ngxFormly.core,global.ngxFormly.material.formField,(global['ngx-formly'] = global['ngx-formly'] || {}, global['ngx-formly'].material = global['ngx-formly'].material || {}, global['ngx-formly'].material.input = {}),global.ng.common,global.core,global.ng.forms,global.ng.core,global.ng.material.input,global['ngx-formly'].material['form-field']));
}(this, (function (ɵngcc0,ɵngcc1,ɵngcc2,ɵngcc3,ɵngcc4,ɵngcc5,exports,common,core,forms,core$1,input,formField) { 
function FormlyFieldInput_input_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "input", 2);
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("id", ctx_r0.id)("type", ctx_r0.type || "text")("readonly", ctx_r0.to.readonly)("required", ctx_r0.to.required)("errorStateMatcher", ctx_r0.errorStateMatcher)("formControl", ctx_r0.formControl)("formlyAttributes", ctx_r0.field)("tabindex", ctx_r0.to.tabindex)("placeholder", ctx_r0.to.placeholder);
} }
function FormlyFieldInput_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "input", 3);
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("id", ctx_r2.id)("readonly", ctx_r2.to.readonly)("required", ctx_r2.to.required)("errorStateMatcher", ctx_r2.errorStateMatcher)("formControl", ctx_r2.formControl)("formlyAttributes", ctx_r2.field)("tabIndex", ctx_r2.to.tabindex)("placeholder", ctx_r2.to.placeholder);
} }
'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormlyFieldInput = /** @class */ (function (_super) {
        __extends(FormlyFieldInput, _super);
        function FormlyFieldInput() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(FormlyFieldInput.prototype, "type", {
            get: /**
             * @return {?}
             */ function () {
                return this.to.type || 'text';
            },
            enumerable: true,
            configurable: true
        });
        FormlyFieldInput.propDecorators = {
            formFieldControl: [{ type: core$1.ViewChild, args: [input.MatInput, ( /** @type {?} */({ static: false })),] }]
        };
FormlyFieldInput.ɵfac = function FormlyFieldInput_Factory(t) { return ɵFormlyFieldInput_BaseFactory(t || FormlyFieldInput); };
FormlyFieldInput.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormlyFieldInput, selectors: [["formly-field-mat-input"]], viewQuery: function FormlyFieldInput_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(input.MatInput, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.formFieldControl = _t.first);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 2, consts: [["matInput", "", 3, "id", "type", "readonly", "required", "errorStateMatcher", "formControl", "formlyAttributes", "tabindex", "placeholder", 4, "ngIf", "ngIfElse"], ["numberTmp", ""], ["matInput", "", 3, "id", "type", "readonly", "required", "errorStateMatcher", "formControl", "formlyAttributes", "tabindex", "placeholder"], ["matInput", "", "type", "number", 3, "id", "readonly", "required", "errorStateMatcher", "formControl", "formlyAttributes", "tabIndex", "placeholder"]], template: function FormlyFieldInput_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, FormlyFieldInput_input_0_Template, 1, 9, "input", 0);
        ɵngcc0.ɵɵtemplate(1, FormlyFieldInput_ng_template_1_Template, 1, 8, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        var _r1 = ɵngcc0.ɵɵreference(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.type !== "number")("ngIfElse", _r1);
    } }, directives: [ɵngcc1.NgIf, ɵngcc2.MatInput, ɵngcc3.DefaultValueAccessor, ɵngcc3.RequiredValidator, ɵngcc3.NgControlStatus, ɵngcc3.FormControlDirective, ɵngcc4.FormlyAttributes, ɵngcc3.NumberValueAccessor], encapsulation: 2 });
var ɵFormlyFieldInput_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(FormlyFieldInput);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyFieldInput, [{
        type: core$1.Component,
        args: [{
                selector: 'formly-field-mat-input',
                template: "\n    <input *ngIf=\"type !== 'number'; else numberTmp\"\n      matInput\n      [id]=\"id\"\n      [type]=\"type || 'text'\"\n      [readonly]=\"to.readonly\"\n      [required]=\"to.required\"\n      [errorStateMatcher]=\"errorStateMatcher\"\n      [formControl]=\"formControl\"\n      [formlyAttributes]=\"field\"\n      [tabindex]=\"to.tabindex\"\n      [placeholder]=\"to.placeholder\">\n    <ng-template #numberTmp>\n      <input matInput\n             [id]=\"id\"\n             type=\"number\"\n             [readonly]=\"to.readonly\"\n             [required]=\"to.required\"\n             [errorStateMatcher]=\"errorStateMatcher\"\n             [formControl]=\"formControl\"\n             [formlyAttributes]=\"field\"\n             [tabIndex]=\"to.tabindex\"\n             [placeholder]=\"to.placeholder\">\n    </ng-template>\n  "
            }]
    }], null, { formFieldControl: [{
            type: core$1.ViewChild,
            args: [input.MatInput, ( /** @type {?} */({ static: false }))]
        }] }); })();
        return FormlyFieldInput;
    }(formField.FieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormlyMatInputModule = /** @class */ (function () {
        function FormlyMatInputModule() {
        }
FormlyMatInputModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: FormlyMatInputModule });
FormlyMatInputModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function FormlyMatInputModule_Factory(t) { return new (t || FormlyMatInputModule)(); }, imports: [[
            common.CommonModule,
            forms.ReactiveFormsModule,
            input.MatInputModule,
            formField.FormlyMatFormFieldModule,
            core.FormlyModule.forChild({
                types: [
                    {
                        name: 'input',
                        component: FormlyFieldInput,
                        wrappers: ['form-field']
                    },
                ]
            }),
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FormlyMatInputModule, { declarations: [FormlyFieldInput], imports: [ɵngcc1.CommonModule, ɵngcc3.ReactiveFormsModule, ɵngcc2.MatInputModule, ɵngcc5.FormlyMatFormFieldModule, ɵngcc4.FormlyModule] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyMatInputModule, [{
        type: core$1.NgModule,
        args: [{
                declarations: [FormlyFieldInput],
                imports: [
                    common.CommonModule,
                    forms.ReactiveFormsModule,
                    input.MatInputModule,
                    formField.FormlyMatFormFieldModule,
                    core.FormlyModule.forChild({
                        types: [
                            {
                                name: 'input',
                                component: FormlyFieldInput,
                                wrappers: ['form-field']
                            },
                        ]
                    }),
                ]
            }]
    }], function () { return []; }, null); })();
        return FormlyMatInputModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.FormlyMatInputModule = FormlyMatInputModule;
    exports.FormlyFieldInput = FormlyFieldInput;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-formly-material-input.umd.js.map