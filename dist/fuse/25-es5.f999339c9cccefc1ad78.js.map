{"version":3,"sources":["webpack:///src/app/features/select-organization/preselect-dialog/preselect-dialog.component.html","webpack:///src/app/features/select-organization/preselect-dialog/preselect-dialog.component.ts","webpack:///src/@fuse/pipes/filter.pipe.ts","webpack:///src/@fuse/utils/index.ts","webpack:///src/app/features/select-organization/list-organizations/list-organizations.component.html","webpack:///src/app/features/select-organization/list-organizations/list-organizations.component.ts","webpack:///src/app/features/select-organization/join-request-dialog/join-request-dialog.component.ts","webpack:///src/app/features/select-organization/join-request-dialog/join-request-dialog.component.html","webpack:///src/app/features/select-organization/search-organization/search-organization.component.html","webpack:///src/app/features/select-organization/search-organization/search-organization.component.ts","webpack:///src/app/features/select-organization/add-organization/add-organization.component.ts","webpack:///src/app/features/select-organization/select-organization.module.ts","webpack:///src/app/features/select-organization/select-organization-routing.module.ts","webpack:///src/app/features/select-organization/add-organization/add-organization.component.html"],"names":["PreselectOrganizationDialog","FilterPipe","_formBuilder","_router","data","dialogRef","organizationTypes","this","orgForm","group","name","required","organizationType","close","frm","valid","queryParams","value","closeDialogue","navigate","formInit","controls","submitQuery","mainArr","searchText","property","toLowerCase","filter","itemObj","searchInObj","prop","hasOwnProperty","searchInString","Array","isArray","searchInArray","arr","includes","S4","Math","floor","random","toString","substring","item","array","indexOf","push","splice","text","replace","filterArrayByString","JoinRequestDialogComponent","ListOrganizationComponent","_authConfig","_dataLayer","dialog","organizations","type","request","limitTo","pageSize","org","setOrganization","navigateByUrl","open","context","width","newLength","user","length","list","subscribe","resp","map","orgType","org_type_code","err","console","log","logout","JSON","parse","getUser","getOrganizationTypes","logoutUser","openDialog","arg","postParams","requester","id","organization","loading","create","closeDialog","openDynamicSnackBar","requestToJoin","SearchOrganizationComponent","AddOrganizationComponent","SelectOrganizationModule","SelectOrganizationRoutingModule","_route","route","addRouteParams","current","headers","title","rows","key","actions","btnText","status","icon","disableStatus","action","modalConf","link","step","searchOrganizations","paramsModel","paramsObj","parseInt","f","setValue","afterClosed","isUndefined","params","fetchParams","search","org_type","fetchMyJoinRequests","forEach","ind","find","prefillForm","paramObj","limit","getOrganization","fetchOrgTypes","fetchURLParams","submitSearch","routes","path","component","children","redirectTo","pathMatch","stepsKey","listRoute","forChild"],"mappings":"izDAkBoB,cAAoC,wCAA6B,Q,yBAFrE,iBAEI,uBACJ,Q,kBADS,+C,wBAqBG,Q,kBAAA,4C,wBAIA,Q,kBAAA,4C,IChCfA,ECPAC,E,sCDON,IAAMD,EAAN,WAIH,WAAoBE,EACRC,EACwBC,EACzBC,aAHS,KAAAH,eACR,KAAAC,UACwB,KAAAC,OACzB,KAAAC,YANX,KAAAC,kBAAgC,GAD7B,6CAUCC,KAAKC,QAAUD,KAAKL,aAAaO,MAAM,CACnCC,KAAM,CAAC,GAAI,IAAWC,UACtBC,iBAAkB,CAAC,GAAI,IAAWD,cAZvC,sCAiBCJ,KAAKF,UAAUQ,UAjBhB,kCAoBSC,GACR,GAAIA,EAAIC,MAAO,CACX,IAAMC,EAAc,OAAH,UAAQF,EAAIG,OAC7BV,KAAKW,gBACLX,KAAKJ,QAAQgB,SAAS,CAAC,+BAAgC,CAAEH,mBAxB9D,iCA+BCT,KAAKa,WACLb,KAAKD,kBAAoBC,KAAKH,KAAKE,oBAhCpC,wBA4BO,OAAOC,KAAKC,QAAQa,aA5B3B,M,oCAAMrB,GAA2B,yBAMxB,KAAe,Y,uBANlBA,EAA2B,0mCDXxC,gBACI,eAAkC,0DAA+C,OACjF,gBACI,uHAEJ,OACA,iBAAuC,mCAAY,EAAAsB,YAAA,cAC/C,gBACI,gBACI,2BAEI,oBAAW,kDAAsC,OACjD,mBAGJ,OACA,uBAIJ,OACA,iBACI,4BAGI,qBAAW,0EAA8D,OACzE,wBAYI,gCAGA,gCAIJ,OACJ,OACJ,OACJ,OACA,kBACI,qBAEA,gCAAS,EAAAJ,mBAAiB,iBAAK,OAC/B,qBACI,oBAAU,kBAAM,OAChB,wBACJ,OACJ,OACJ,OACJ,Q,MArDU,oCAOU,uFAGC,0EAOL,kEAGe,0CAA2B,kBAA3B,CAA2B,gBAA3B,CAA2B,cAA3B,CAA2B,sB,qtHEtBnD,IAAMjB,EAAN,8EAUOsB,EAAgBC,EAAoBC,GAE1C,OChBD,6FAS+BF,EAASC,GAAWA,WAElD,MAAoB,KAAfA,EAEMD,GAGXC,EAAaA,EAAWE,cAEjBH,EAAQI,QAAOC,YAAOA,OAClBrB,EAAKsB,YAAYD,EAASJ,SAnBtC,kCA8BuBI,EAASJ,GAE/B,IAAM,IAAMM,KAAQF,EAEhB,GAAMA,EAAQG,eAAeD,GAA7B,CAKA,IAAMb,EAAQW,EAAQE,GAEtB,GAAsB,iBAAVb,GAER,GAAKV,KAAKyB,eAAef,EAAOO,GAE5B,OAAM,OAIT,GAAKS,MAAMC,QAAQjB,IAEfV,KAAK4B,cAAclB,EAAOO,GAE3B,OAAM,EAId,GAAsB,iBAAVP,GAEHV,KAAKsB,YAAYZ,EAAOO,GAEzB,OAAM,KA7DnB,oCA0EyBY,EAAKZ,GAAWA,UAEnBY,GAFmBZ,IAExC,2BACA,CAAC,IADWP,EACZ,QACI,GAAsB,iBAAVA,GAEHV,KAAKyB,eAAef,EAAOO,GAE5B,OAAM,EAId,GAAsB,iBAAVP,GAEHV,KAAKsB,YAAYZ,EAAOO,GAEzB,OAAM,GAhBsBA,iCA1EzC,qCAuG0BP,EAAOO,GAEhC,OAAOP,EAAMS,cAAcW,SAASb,KAzGrC,qCAmHC,SAASc,IAEL,OAAOC,KAAKC,MAA4B,OAArB,EAAID,KAAKE,WAChBC,SAAS,IACTC,UAAU,GAG1B,OAAOL,IAAOA,MA1Hf,oCAmIyBM,EAAMC,IAEA,IAAzBA,EAAMC,QAAQF,GAEfC,EAAME,KAAKH,GAIXC,EAAMG,OAAOH,EAAMC,QAAQF,GAAO,KA3IvC,gCAqJqBK,GAEpB,OAAOA,EAAKP,WAAWhB,cACXwB,QAAQ,OAAQ,KAChBA,QAAQ,YAAa,IACrBA,QAAQ,SAAU,KAClBA,QAAQ,MAAO,IACfA,QAAQ,MAAO,QA5J5B,KDgBkBC,oBAAoB5B,EAASC,OAZ/C,M,oCAAMvB,I,sCAAAA,EAAU,U,oDE2DS,2BAII,4BAEI,kBAAgB,sBACyB,iBAAM,OAAY,gBAAM,OACjE,mBAEA,yEAFA,OAGJ,OAEJ,O,sBAHQ,sC,qCAIR,2BAEA,2FACI,sBACsB,mBAAQ,OAC9B,gBAA4C,QAAkC,OAC9E,eACI,kBAAmC,Q,2BAAsC,OAC7E,OACA,sBACI,kCACJ,OACJ,O,oCAPgD,kDAEL,yD,qCAM3C,2BAEI,iBAEI,oBAGA,8DACI,sBACJ,OACJ,OACJ,O,sBALQ,kE,yBApChB,iBAEI,0BACI,iCAcA,kC,iCAaA,iCAYJ,OACJ,Q,kBAvCQ,iFAae,0FAcf,kF,yBAoCA,2BAEA,sBAAyC,qBAAU,OACnD,iBACI,gBAA8B,QAAY,OAC1C,eACI,kBAAmC,oBAAQ,OAC/C,OACJ,OACA,iBACI,yBACJ,OACA,Q,uBARkC,sBCnH3D,ICLMmD,EDKAC,EAAN,IAAMA,EAAN,WAcH,WAAoBC,EACRC,EACDC,EACCrD,aAHQ,KAAAmD,cACR,KAAAC,aACD,KAAAC,SACC,KAAArD,UAhBZ,KAAAsD,cAA4B,CACxB,CACI/C,KAAM,MACNgD,KAAM,aACNC,QAAS,YAIjB,KAAAnC,WAAqB,GACrB,KAAAoC,QAAkB,GAClB,KAAAC,SAAmB,GAXhB,qDAoBgBC,GACfvD,KAAK+C,YAAYS,gBAAgBD,GACjCvD,KAAKJ,QAAQ6D,cAAc,gBAtB5B,mCA2BCzD,KAAKiD,OAAOS,KAAK,EAA6B,CAC1C7D,KAAM,CACF8D,QAAS,WACT5D,kBAJkBC,KAAKD,mBAM3B6D,MAAO,UAhCZ,iCAqCC,IAAMC,EAAY7D,KAAKqD,QAAUrD,KAAKsD,SACtCtD,KAAKqD,QAAUrD,KAAK8D,KAAKZ,cAAca,OACnCF,EAAYA,EAAY7D,KAAK8D,KAAKZ,cAAca,SAvCrD,6CA0CmB,WAClB/D,KAAKgD,WAAWgB,KAAK,qBAAsB,IAC1CC,WAAUC,YACPlE,EAAKD,kBAAoBmE,EAAc,QACnClE,EAAKD,kBAA0B,QAC/BC,EAAKD,kBAAkBoE,KAAIC,YAAOA,OAC9BA,EAAQC,cAAgBD,EAAQC,cAAc1B,QAAQ,KAAM,KACrDyB,QAGhBE,YAAGA,OAAIC,QAAQC,IAAIF,QApDvB,mCAwDCtE,KAAKJ,QAAQgB,SAAS,CAAC,gBAAiB,CACpCH,YAAa,CAAEgE,OAAQ,qBAzD5B,iCA8DC,IAAMX,EAAOY,KAAKC,MAAM3E,KAAK+C,YAAY6B,WACzC5E,KAAK8D,KAAO,OAAH,UAAQA,GACjB9D,KAAK6E,2BAhEN,M,oCAAM/B,GAAyB,0C,uBAAzBA,EAAyB,kDAHvB,CAAC,IAAe,OAAiB,+1F,GAAA,MDbhD,gBACI,gBACI,gBACI,wBACI,gBACI,gBACI,gBACI,eAAM,iBAAM,OAChB,OACJ,OACA,gBACI,oBAEI,iBAEI,kBACI,uBAA+B,0BAAc,OACjD,OACA,eACI,mBACI,SACJ,OACJ,OACA,kBACI,uBAA8C,+BAAmB,OACrE,OACJ,OACJ,OACA,4BACI,qBACA,gCAAS,EAAAgC,gBACL,oBAAU,uBAAW,OACrB,gBAAM,kBAAM,OAChB,OACJ,OACJ,OACJ,OACJ,OACJ,OACA,kBACI,kBAEI,kBACI,kBACI,iBAAmC,kCAAsB,OACzD,gBAAgC,4DAAgD,OACpF,OACA,eACI,qBACa,gCAAS,EAAAC,gBAClB,uBACI,wBACJ,OACA,2CACJ,OACJ,OACJ,OAEA,kBACI,kBACI,yBA4CJ,OACJ,OAEA,kBACI,kBACI,iBAAmC,iCAAqB,OACxD,gBAAgC,4DAAgD,OACpF,OACA,eACI,qBAEI,uBACI,wBACJ,OACA,iCACJ,OACJ,OACJ,OAEA,kBACI,kBACI,kBACI,8BACI,mCAaJ,OACJ,OACJ,OACJ,OACJ,OACJ,OAGJ,OAEA,kBAEI,kBACI,kBAAqC,oCAAwB,OACjE,OACJ,OAEJ,Q,oBAlJ2C,qCASH,iGAyChB,kDA8C2D,0BAgBP,2BAI7B,wCAwBA,4B,u3DE5IxC,IAAMlC,EAAN,WAGH,WAA4ChD,EACjCC,EACCkD,aAFgC,KAAAnD,OACjC,KAAAC,YACC,KAAAkD,aALT,8CAOSgC,GACRhF,KAAKF,UAAUQ,MAAM0E,KARtB,sCAWY,WACLC,EAAa,CACfC,UAAWlF,KAAKH,KAAKiE,KAAKqB,GAC1BC,aAAcpF,KAAKH,KAAKuF,aAAaD,IAEzCnF,KAAKqF,WACLrF,KAAKgD,WAAWsC,OAAO,6BAA8BL,GAChDhB,WAAUC,YACPlE,EAAKuF,YAAY,WACjBvF,EAAKqF,WAELrF,EAAKgD,WAAWwC,oBADJ,iDAC6B,cAC1ClB,YACCC,QAAQC,IAAIF,GACZtE,EAAKqF,WAELrF,EAAKgD,WAAWwC,oBADD,uDAC6B,gBA3BrD,M,oCAAM3C,GAA0B,KAGf,KAAe,sB,uBAH1BA,EAA0B,mDAHxB,CAAC,OAAiB,6TCRjC,gBACI,eAAkC,QAA6C,OAC/E,gBACI,QAGJ,OACA,gBACI,mBACI,kBACJ,OACA,mBAEA,gCAAS,EAAA4C,mBACL,yBACJ,OACJ,OACJ,Q,MAhBsC,+EAE9B,uPASqB,kCAArB,6B,msBCoCoC,cAAoC,wCAA6B,Q,0BAFrE,iBAEI,wBACJ,Q,kBADS,+C,yBAqBG,Q,kBAAA,4C,yBAIA,Q,kBAAA,4C,sCAsCxB,aACI,gBAA+C,QAAe,OAC9D,gBACI,kBAEI,Q,2BACJ,OACJ,OACA,gBACI,oBAEA,2FACC,QAA4D,OACjE,OACJ,O,0BAbmD,kCAIvC,6DAGJ,6BAEA,gDAEC,+E,0BAGT,aACI,gBACI,cACI,iBACI,iBACI,iBACI,mBACI,wBACJ,OACJ,OACA,iBACI,qCAAyB,aAAG,SAAkB,OAAI,+DAEtD,OACA,kBAEJ,OACJ,OACJ,OACJ,OACJ,Q,mBAToD,+B,0BA3BxD,gBACI,wBAeA,wBAqBJ,Q,kBApCQ,+BAeA,qC,uBAuBJ,aACI,gBACI,iBACI,yBACJ,OACJ,OACJ,Q,0BAPJ,gBACI,uBAQJ,Q,kBARQ,gC,ICjInBC,GCZAC,GC0EAC,GC/CAC,G,uCHfN,KAAMH,GAAN,WAoCH,WAAoBI,EACRnG,EACAoD,EACAC,EACDC,EACC8C,aALQ,KAAAD,SACR,KAAAnG,eACA,KAAAoD,cACA,KAAAC,aACD,KAAAC,SACC,KAAA8C,QAtCZ,KAAA/B,KAAmB,GAEnB,KAAAgC,eAAsB,CAAEC,QAAS,GACjC,KAAAlG,kBAAgC,GAEhC,KAAAmG,QAAsB,CAClB,CAAEC,MAAO,QACT,CAAEA,MAAO,YACT,CAAEA,MAAO,YAGb,KAAAC,KAAmB,CACf,CAAEC,IAAK,OAAQlD,KAAM,UACrB,CAAEkD,IAAK,gBAAiBlD,KAAM,WAGlC,KAAAmD,QAAqB,CACjB,CACIC,QAAS,kBACTC,OAAQ,SACRC,MAAKA,EACLC,cAAe,WACfC,OAAQ,aACRC,UAAW,CACPC,KAAM,yBACNpG,YAAa,CAAEwF,QAAS,EAAGa,KAAM,MA5B1C,6CA+CC9G,KAAKC,QAAUD,KAAKL,aAAaO,MAAM,CACnCC,KAAM,CAAC,GAAI,IAAWC,UACtBC,iBAAkB,CAAC,GAAI,IAAWD,cAjDvC,mCAqDUG,GACLA,EAAIC,OAEJR,KAAK+G,oBADUxG,EAAIG,SAvDxB,kCA4DSsG,GACR,IAAMC,EAAY,OAAH,UAAQD,GACvBC,EAAU5G,iBAAmB6G,SACzBD,EAAU5G,iBAAkB,IAChCL,KAAKmH,EAAEhH,KAAKiH,SAASH,EAAU9G,MAC/BH,KAAKmH,EAAE9G,iBAAiB+G,SAASH,EAAU5G,oBAjE5C,iCAoEQkD,cACWvD,KAAKiD,OAAOS,KAAK,EAA4B,CAC3D7D,KAAM,CACFiE,KAAM9D,KAAK8D,KACXsB,aAAc7B,GAElBK,MAAO,QAGDyD,cAAcpD,WAAUC,YACzB,SAAAoD,YAAA,CAAYpD,IAKblE,EAAK+G,oBAJU,CACX5G,KAAMH,EAAKmH,EAAEhH,KAAKO,MAClBL,iBAAkBL,EAAKmH,EAAE9G,iBAAiBK,aAjFvD,yCAwFgB6C,GACfvD,KAAK+E,WAAWxB,KAzFjB,0CA4FiBgE,cACVC,EAAc,CAChBC,OAAQF,EAAOpH,KACfuH,SAAUH,EAAOlH,kBAErBL,KAAKqF,WACLrF,KAAKgD,WAAWgB,KAAK,gBAAiBwD,GACjCvD,WAAUC,YACPlE,EAAKqF,WACLrF,EAAKgE,KAAOE,EAAc,QAC1BlE,EAAK2H,yBACNrD,YACCC,QAAQC,IAAIF,GACZtE,EAAKqF,gBAzGd,4CA6GkB,WAIjBrF,KAAKgD,WAAWgB,KAAK,6BAHH,CACdkB,UAAWlF,KAAK8D,KAAS,KAGxBG,WAAUC,YACSA,EAAc,QACtB0D,SAAQxE,YACZ,IAAMyE,EAAM,SAAAtF,QAAA,CAAQvC,EAAKgE,KAAM,SAAA8D,KAAA,CAC3B9H,EAAKgE,KAAM,CAAEmB,GAAI/B,EAAQgC,gBACzByC,GAAO,IAAG7H,EAAKgE,KAAK6D,GAAKzE,QAAUA,SAE5CkB,YACCC,QAAQC,IAAIF,QA1HrB,uCA8Ha,WACZtE,KAAK8F,OAAOrF,YAAYwD,WAAUsD,YAC9BvH,EAAK+H,YAAYR,GACjBvH,EAAKgI,SAAW,OAAH,wBAAQT,GAAM,CAAEU,MAAO,KACpCjI,EAAKgG,eAAiB,OAAH,wBAAQhG,EAAKgG,gBAAmBuB,GACnDvH,EAAK+G,oBAAoBQ,MAC1BjD,YAAGA,OAAIC,QAAQC,IAAIF,QApIvB,sCAuIY,WACXtE,KAAKgD,WAAWgB,KAAK,qBAAsB,IAC1CC,WAAUC,YACPlE,EAAKD,kBAAoBmE,EAAc,QACnClE,EAAKD,kBAA0B,QAC/BC,EAAKD,kBAAkBoE,KAAIC,YAAOA,OAC9BA,EAAQC,cAAgBD,EAAQC,cAAc1B,QAAQ,KAAM,KACrDyB,QAGhBE,YAAGA,OAAIC,QAAQC,IAAIF,QAjJvB,iCAqJCtE,KAAKqF,WACLrF,KAAK8D,KAAOY,KAAKC,MAAM3E,KAAK+C,YAAY6B,WACxC5E,KAAKoF,aAAeV,KAAKC,MAAM3E,KAAK+C,YAAYmF,mBAChDlI,KAAKa,WACLb,KAAKmI,gBACLnI,KAAKoI,mBA1JN,wBA4CO,OAAOpI,KAAKC,QAAQa,aA5C3B,M,oCAAM4E,IAA2B,8D,wBAA3BA,GAA2B,mDAHzB,CAAC,OAAiB,g5EDjBjC,gBACI,gBACI,gBACI,wBACI,eAAM,iBAAM,OAChB,OACJ,OAEA,gBACI,gBACI,gBACI,qBAAsC,oBAAQ,OAClD,OACA,iBACI,eACqB,4BAAgB,OACzC,OACA,eACI,sBAAsC,gCAAoB,OAC9D,OACA,iBACI,mBACI,iCACJ,OACJ,OACJ,OACA,kBAEI,kBACI,kBACI,mBACI,oDACJ,OACJ,OACA,mBAA4B,mCAAY,EAAA2C,aAAA,cACpC,kBACI,kBACI,kBACI,kBACI,6BAEI,qBAAW,8BAAkB,OAC7B,oBAGJ,OACA,yBAIJ,OACA,kBACI,6BAGI,qBAAW,6BAAiB,OAC5B,wBAYI,iCAGA,iCAIJ,OACJ,OACJ,OACJ,OACA,kBACI,qBAEI,uBACI,oBACJ,OACA,wBACJ,OACJ,OACJ,OACJ,OACJ,OACJ,OACJ,OAGA,kBAEI,kBAEI,kBACI,4BACJ,OACA,oBACI,oBACI,cACI,iBAAkB,gBAAI,OACtB,cAAI,6BAAiB,OACrB,cACJ,OACJ,OACA,2BAsCA,2BAUJ,OACJ,OACJ,OAEJ,OAEJ,OACA,kBAEI,kBACI,kBAAqC,qCAAyB,OAClE,OACJ,OACJ,Q,MAzI0B,qCASkB,yFAGC,0EAOL,kEAGe,0CAA2B,kBAA3B,CAA2B,gBAA3B,CAA2B,cAA3B,CAA2B,oBAmD9C,8BAGL,gCAsCA,iC,y7KI3IzBC,GAAiB,CACnB,CACIC,KAAM,GACNC,UAAW,IACXC,SAAU,CACN,CAAEF,KAAM,GAAIG,WAAY,OAAQC,UAAW,QAC3C,CAAEJ,KAAM,OAAQC,UAAW,GAC3B,CAAED,KAAM,SAAUC,UAAW,IAC7B,CACID,KAAM,MACNC,WFXH7C,GAAN,wB,uCAAMA,K,wBAAAA,GAAwB,kdGRrC,gBACI,gBACI,gBACI,wBACI,eAAM,iBAAM,OAChB,OACJ,OAEA,gBAEI,0BAEJ,OACJ,OACA,gBAEI,gBACI,iBAAqC,uCAA2B,OACpE,OACJ,OACJ,S,+xDDAgB9F,KAAM,CACF+I,SAAU,eACVjF,QAAS,eACTkF,UAAW,4BAYxB,KAAMhD,GAAN,yB,qBAAMA,K,qDAAAA,KAA+B,SAJ/B,CAAC,IAAaiD,SAASR,KACtB,O,IDkDP,KAAM1C,GAAN,yB,qBAAMA,K,qDAAAA,KAAwB,SAnCxB,CACL,IACA,IACA,IACA,IACA,IACA,IACA,IAEA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IAEA,IACA,IACA,IACA,IACA,IACA,O","file":"x","sourcesContent":["<div class=\"px-20 pt-20\">\n    <h3 mat-dialog-title class=\"pb-3\">Provide more information about the organization</h3>\n    <div mat-dialog-content class=\"text-muted\">\n        Kindly provide the following information about the organization\n        you would like to join before you proceed.\n    </div>\n    <form [formGroup]=\"orgForm\" name=\"frm\" (ngSubmit)=\"submitQuery(orgForm)\">\n        <div class=\"w-100-p pt-5\">\n            <div class=\"input-wrapper w-100-p\">\n                <mat-form-field appearance=\"outline\" color=\"primary\"\n                class=\"w-100-p pb-0 mb-0\">\n                    <mat-label>What is the name of your organization*</mat-label>\n                    <input matInput placeholder=\"Enter the name of the organization\" \n                    [ngClass]=\"{ 'is-invalid': f.name.invalid && (f.name.touched || f.name.dirty) }\"\n                    class=\"\" formControlName=\"name\" />\n                </mat-form-field>\n                <div *ngIf=\"f.name.invalid && (f.name.touched || f.name.dirty)\" \n                class=\"invalid-feedback\">\n                    <div *ngIf=\"f.name.errors.required\">Organization name is required</div>\n                </div>\n            </div>\n            <div class=\"input-wrapper w-100-p\">\n                <mat-form-field appearance=\"outline\" color=\"primary\"\n                [floatLabel]=\"f.organizationType.value ? 'always' : ''\"\n                class=\"w-100-p mb-0\">\n                    <mat-label>What is the type of your organization* (e.g Sports Federation)</mat-label>\n                    <ng-select [items]=\"organizationTypes\"\n                        matInput ngSelectMat\n                        class=\"flex-fill px-0\" appendTo=\"body\"\n                        bindLabel=\"org_type_code\"\n                        bindValue=\"id\"\n                        loadingText=\"Loading organization types\"\n                        [hideSelected]=\"true\"\n                        [searchable]=\"false\"\n                        formControlName=\"organizationType\"\n                        [multiple]=\"false\"\n                        notFoundText=\"No result matched your search\"\n                        [closeOnSelect]=\"true\">\n                        <ng-template ng-label-temp let-item=\"item\">\n                            {{ item?.org_type_code }}\n                        </ng-template>\n                        <ng-template ng-option-tmp let-item=\"item\"\n                        let-index=\"index\">\n                            {{item?.org_type_code }}\n                        </ng-template>\n                    </ng-select>\n                </mat-form-field>\n            </div>\n        </div>\n        <div mat-dialog-actions class=\"pt-5 d-flex justify-content-end\">\n            <button mat-button mat-dialog-close\n            type=\"button\"\n            (click)=\"closeDialogue()\">CLOSE</button>\n            <button mat-button type=\"submit\">\n                <mat-icon>search</mat-icon>\n                &nbsp;SEARCH\n            </button>\n        </div>\n    </form>\n</div>","import { Component, Inject, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n    selector: 'preselect-organization-dialog',\n    templateUrl: './preselect-dialog.component.html',\n    styleUrls: ['./preselect-dialog.component.scss'],\n})\n\nexport class PreselectOrganizationDialog implements OnInit {\n    organizationTypes: Array<any> = [];\n    orgForm: FormGroup;\n\n    constructor(private _formBuilder: FormBuilder,\n        private _router: Router,\n        @Inject(MAT_DIALOG_DATA) public data: any,\n        public dialogRef: MatDialogRef<PreselectOrganizationDialog>) {}\n\n    formInit() {\n        this.orgForm = this._formBuilder.group({\n            name: ['', Validators.required],\n            organizationType: ['', Validators.required],\n        });\n    }\n\n    closeDialogue() {\n        this.dialogRef.close();\n    }\n\n    submitQuery(frm) {\n        if (frm.valid) {\n            const queryParams = { ...frm.value };\n            this.closeDialogue();\n            this._router.navigate(['/select-organization/search'], { queryParams });\n        }\n    }\n\n    get f() { return this.orgForm.controls }\n\n    ngOnInit() {\n        this.formInit();\n        this.organizationTypes = this.data.organizationTypes;\n    }\n}","import { Pipe, PipeTransform } from '@angular/core';\nimport { FuseUtils } from '@fuse/utils';\n\n@Pipe({name: 'filter'})\nexport class FilterPipe implements PipeTransform\n{\n    /**\n     * Transform\n     *\n     * @param {any[]} mainArr\n     * @param {string} searchText\n     * @param {string} property\n     * @returns {any}\n     */\n    transform(mainArr: any[], searchText: string, property: string): any\n    {\n        return FuseUtils.filterArrayByString(mainArr, searchText);\n    }\n}\n","export class FuseUtils\n{\n    /**\n     * Filter array by string\n     *\n     * @param mainArr\n     * @param searchText\n     * @returns {any}\n     */\n    public static filterArrayByString(mainArr, searchText): any\n    {\n        if ( searchText === '' )\n        {\n            return mainArr;\n        }\n\n        searchText = searchText.toLowerCase();\n\n        return mainArr.filter(itemObj => {\n            return this.searchInObj(itemObj, searchText);\n        });\n    }\n\n    /**\n     * Search in object\n     *\n     * @param itemObj\n     * @param searchText\n     * @returns {boolean}\n     */\n    public static searchInObj(itemObj, searchText): boolean\n    {\n        for ( const prop in itemObj )\n        {\n            if ( !itemObj.hasOwnProperty(prop) )\n            {\n                continue;\n            }\n\n            const value = itemObj[prop];\n\n            if ( typeof value === 'string' )\n            {\n                if ( this.searchInString(value, searchText) )\n                {\n                    return true;\n                }\n            }\n\n            else if ( Array.isArray(value) )\n            {\n                if ( this.searchInArray(value, searchText) )\n                {\n                    return true;\n                }\n            }\n\n            if ( typeof value === 'object' )\n            {\n                if ( this.searchInObj(value, searchText) )\n                {\n                    return true;\n                }\n            }\n        }\n    }\n\n    /**\n     * Search in array\n     *\n     * @param arr\n     * @param searchText\n     * @returns {boolean}\n     */\n    public static searchInArray(arr, searchText): boolean\n    {\n        for ( const value of arr )\n        {\n            if ( typeof value === 'string' )\n            {\n                if ( this.searchInString(value, searchText) )\n                {\n                    return true;\n                }\n            }\n\n            if ( typeof value === 'object' )\n            {\n                if ( this.searchInObj(value, searchText) )\n                {\n                    return true;\n                }\n            }\n        }\n    }\n\n    /**\n     * Search in string\n     *\n     * @param value\n     * @param searchText\n     * @returns {any}\n     */\n    public static searchInString(value, searchText): any\n    {\n        return value.toLowerCase().includes(searchText);\n    }\n\n    /**\n     * Generate a unique GUID\n     *\n     * @returns {string}\n     */\n    public static generateGUID(): string\n    {\n        function S4(): string\n        {\n            return Math.floor((1 + Math.random()) * 0x10000)\n                       .toString(16)\n                       .substring(1);\n        }\n\n        return S4() + S4();\n    }\n\n    /**\n     * Toggle in array\n     *\n     * @param item\n     * @param array\n     */\n    public static toggleInArray(item, array): void\n    {\n        if ( array.indexOf(item) === -1 )\n        {\n            array.push(item);\n        }\n        else\n        {\n            array.splice(array.indexOf(item), 1);\n        }\n    }\n\n    /**\n     * Handleize\n     *\n     * @param text\n     * @returns {string}\n     */\n    public static handleize(text): string\n    {\n        return text.toString().toLowerCase()\n                   .replace(/\\s+/g, '-')           // Replace spaces with -\n                   .replace(/[^\\w\\-]+/g, '')       // Remove all non-word chars\n                   .replace(/\\-\\-+/g, '-')         // Replace multiple - with single -\n                   .replace(/^-+/, '')             // Trim - from start of text\n                   .replace(/-+$/, '');            // Trim - from end of text\n    }\n}\n","<div class=\"w-100-p h-100-p\" fxLayout=\"row\">\n    <div class=\"\" fxFlex=\"100%\"  fxFlex.gt-sm=\"100%\">\n        <div class=\"pb-32\">\n            <mat-toolbar class=\"px-5 mat-elevation-z1 bg-white\">\n                <div fxFlex fxFill fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                    <div fxFlex=\"1 0 auto\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                        <div class=\"px-10 px-md-24 title font-size-24\">\n                            <span>E-FUND</span>\n                        </div>\n                    </div>\n                    <div class=\"\" fxFlex=\"0 1 auto\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                        <button mat-button [matMenuTriggerFor]=\"userMenu\"\n                        class=\"user-button\">\n                            <div fxLayout=\"row\" fxLayoutAlign=\"center center\"\n                            class=\"align-items-center\">\n                                <div class=\"pr-24 pt-2\">\n                                    <mat-icon class=\"font-size-32\">account_circle</mat-icon>\n                                </div>\n                                <div>\n                                    <span class=\"username mr-12\" fxHide fxShow.gt-sm>\n                                        {{ user?.first_name }} {{ user?.last_name }}\n                                    </span>\n                                </div>\n                                <div class=\"pt-2\">\n                                    <mat-icon class=\"s-16 font-size-26\" fxHide.xs>keyboard_arrow_down</mat-icon>\n                                </div>\n                            </div>\n                        </button>\n                        <mat-menu #userMenu=\"matMenu\">\n                            <button mat-menu-item class=\"pr-24\"\n                            (click)=\"logoutUser()\">\n                                <mat-icon>exit_to_app</mat-icon>\n                                <span>Logout</span>\n                            </button>\n                        </mat-menu>\n                    </div>\n                </div>\n            </mat-toolbar>\n        </div>\n        <div class=\"px-40 pb-24\">\n            <div class=\"container-wrapper flex-column\">\n                <!-- Title area -->\n                <div class=\"w-100-p pb-3 pt-20 pl-2 d-flex\">\n                    <div class=\"flex-fill\">\n                        <h4 class=\"text-left font-size-20\">Select an Organization</h4>\n                        <p class=\"text-left text-muted\">Kindly select an organization before proceeding.</p>\n                    </div>\n                    <div>\n                        <button mat-stroked-button color=\"accent\"\n                        class=\"pl-3\" (click)=\"openDialog()\">\n                            <mat-icon class=\"btn-icon \">\n                                person_add\n                            </mat-icon>\n                            &nbsp;Join Another Organization\n                        </button>\n                    </div>\n                </div>\n                <!-- End of title area -->\n                <div class=\"main-content mb-32\" fxFlex=\"100%\"  fxFlex.gt-md=\"75%\">\n                    <div class=\"side-content bg-white\"  fxLayout=\"column\">\n                        <div class=\"pt-0 px-0\"\n                        *ngIf=\"user.organizations.length\">\n                            <mat-action-list>\n                                <mat-list-item \n                                *ngIf=\"user.organizations.length && user.organizations.length > 10\"\n                                class=\"px-0 pl-28 pr-28 pt-12 mb-12 mt-2\">\n                                    <!-- Start of search box -->\n                                    <mat-form-field  color=\"primary\"\n                                    class=\"w-100-p pb-0 mb-3\">\n                                        <span matPrefix><mat-icon class=\"font-size-10\"\n                                            style=\"font-size:1.8rem !important;\">search</mat-icon> &nbsp;</span>\n                                        <input matInput type=\"search\" autocomplete=\"off\"\n                                        placeholder=\"Search for organizations you have been assigned to...\" \n                                        [(ngModel)]=\"searchText\" autocomplete=\"off\" />\n                                    </mat-form-field>\n                                    <!-- End of search box -->\n                                </mat-list-item>\n                                <mat-list-item *ngFor=\"let org of user.organizations | filter:searchText | slice:0:limitTo\"\n                                class=\"px-0 mr-n5 pl-5 border-bottom pt-2 pb-3\"\n                                (click)=\"selectOrganization(org)\">\n                                    <mat-icon matListIcon class=\"font-size-32 ml-3 \n                                    text-muted list-icon\">business</mat-icon>\n                                    <h3 matLine class=\"font-size-20 pb-4 pl-3\"> {{org.organization_name || name}} </h3>\n                                    <p matLine class=\"pl-3 pb-16\">\n                                        <span class=\"badge badge-warning\"> {{org?.org_type | removeUnderscore }} </span>\n                                    </p>\n                                    <mat-icon matListAction class=\"font-size-32 text-muted list-icon\">\n                                        keyboard_arrow_right\n                                    </mat-icon>\n                                </mat-list-item>\n                                <mat-list-item class=\"h-10-p\"\n                                *ngIf=\"user.organizations.length && user.organizations.length > 10\">\n                                    <div class=\"w-100-p d-flex justify-content-center\n                                    py-3\">\n                                        <button class=\"margin-auto w-25-p my-3\"\n                                        mat-stroked-button color=\"accent\"\n                                        [disabled]=\"user.organizations.length === limitTo\"\n                                        (click)=\"loadMore()\">\n                                            LOAD MORE\n                                        </button>\n                                    </div>\n                                </mat-list-item>\n                            </mat-action-list>\n                        </div>\n                    </div>\n                </div>\n                <!-- Title area -->\n                <div class=\"w-100-p pb-3 pt-40 pl-16\" fxFlex=\"100%\" fxLayout=\"row\" [hidden]=\"true\">\n                    <div class=\"flex-fill\">\n                        <h4 class=\"text-left font-size-20\">Pending Join Requests</h4>\n                        <p class=\"text-left text-muted\">Kindly select an organization before proceeding.</p>\n                    </div>\n                    <div>\n                        <button mat-stroked-button color=\"accent\"\n                        class=\"pl-3\">\n                            <mat-icon class=\"btn-icon font-size-16\">\n                                person_add\n                            </mat-icon>\n                            &nbsp;Request to Join\n                        </button>\n                    </div>\n                </div>\n                <!-- End of title area -->\n                <div class=\"main-content\" fxFlex=\"100%\"  fxFlex.gt-md=\"75%\" [hidden]=\"true\">\n                    <div class=\"side-content bg-white\"  fxLayout=\"column\">\n                        <div class=\"pt-0 px-0\">\n                            <mat-action-list class=\"\">\n                                <mat-list-item *ngFor=\"let org of organizations\"\n                                class=\"px-0 mr-n5 pl-5 border-bottom pt-2 pb-3\">\n                                <mat-icon matListIcon class=\"text-muted\">person_add</mat-icon>\n                                <div class=\"flex-fill pt-20 pl-20\">\n                                    <h4 matLine class=\"pb-0 pl-8\">{{org.name}}</h4>\n                                    <p matLine class=\"demo-2 pl-8 pb-16\"> \n                                        <span class=\"badge badge-warning\"> PENDING </span>\n                                    </p>\n                                </div>\n                                <div class=\"font-size-14 text-muted mt-n5 pr-2\">\n                                    Jan 1, 2020\n                                </div>\n                                </mat-list-item>\n                            </mat-action-list>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n\n    </div>\n\n    <div fxFlex=\"0%\"  fxFlex.gt-md=\"0%\" fxHide.lt-md\n    class=\"h-100-p mat-elevation-z1 bg-white \" [hidden]=\"true\">\n        <div class=\"title border-bottom py-20 px-20\">\n            <div class=\"font-size-16 text-muted\">What is an organization?</div>\n        </div>\n    </div>\n\n</div>","import { Component, OnInit }  from '@angular/core';\nimport { Router } from '@angular/router';\nimport {MatDialog} from '@angular/material/dialog';\n\nimport { PreselectOrganizationDialog }  from '../preselect-dialog/preselect-dialog.component'; \n\nimport { Authorization } from '../../../services/authorization.service';\nimport { DataLayerService } from 'app/services/http/dataLayer.service';\n\n@Component({\n    selector: 'list-organizations',\n    templateUrl: './list-organizations.component.html',\n    styleUrls: ['./list-organizations.component.scss'],\n    providers: [Authorization, DataLayerService],\n})\n\nexport class ListOrganizationComponent implements OnInit {\n    organizations: Array<any> = [\n        {\n            name: 'FKF',\n            type: 'FEDERATION',\n            request: 'PENDING',\n        }\n    ];\n    user: any;\n    searchText: string = '';\n    limitTo: number = 10;\n    pageSize: number = 10;\n    organizationTypes: Array<any>;\n\n    constructor(private _authConfig: Authorization,\n        private _dataLayer: DataLayerService,\n        public dialog: MatDialog,\n        private _router: Router,\n    ) { }\n\n    selectOrganization(org) {\n        this._authConfig.setOrganization(org);\n        this._router.navigateByUrl('/dashboard');\n    }\n\n    openDialog() {\n        const organizationTypes = this.organizationTypes;\n        this.dialog.open(PreselectOrganizationDialog, {\n            data: { \n                context: 'Register', \n                organizationTypes,\n            },\n            width: '50%',\n        });\n    }\n\n    loadMore() {\n        const newLength = this.limitTo + this.pageSize;\n        this.limitTo = this.user.organizations.length > \n            newLength ? newLength : this.user.organizations.length;\n    }\n\n    getOrganizationTypes() {\n        this._dataLayer.list('organization-types', {})\n        .subscribe(resp => {\n            this.organizationTypes = resp['results'];\n            if (this.organizationTypes['length']) {\n                this.organizationTypes.map(orgType => {\n                    orgType.org_type_code = orgType.org_type_code.replace(/_/g, ' ');\n                    return orgType;\n                });\n            }\n        }, err => console.log(err));\n    }\n\n    logoutUser() {\n        this._router.navigate(['/auth/signin'], {\n            queryParams: { logout: 'is_logged_out'}\n        })\n    }\n\n    ngOnInit() {\n        const user = JSON.parse(this._authConfig.getUser());\n        this.user = { ...user };\n        this.getOrganizationTypes();\n    }\n\n}","import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { DataLayerService } from 'app/services/http/dataLayer.service';\n\n@Component({\n    selector: 'join-request-dialog',\n    templateUrl: 'join-request-dialog.component.html',\n    styleUrls: ['join-request-dialog.component.scss'],\n    providers: [DataLayerService],\n})\n\nexport class JoinRequestDialogComponent {\n    loading: boolean;\n\n    constructor(@Inject(MAT_DIALOG_DATA) public data: any,\n        public dialogRef: MatDialogRef<JoinRequestDialogComponent>,\n        private _dataLayer: DataLayerService) {}\n\n    closeDialog(arg?) {\n        this.dialogRef.close(arg);\n    }\n\n    requestToJoin() {\n        const postParams = {\n            requester: this.data.user.id,\n            organization: this.data.organization.id,\n        }\n        this.loading = true;\n        this._dataLayer.create('organization-join-requests', postParams)\n            .subscribe(resp => {\n                this.closeDialog('refresh');\n                this.loading = false;\n                const msg = 'Request to join organization sent successfully';\n                this._dataLayer.openDynamicSnackBar(msg, 'success');\n            }, err => {\n                console.log(err);\n                this.loading = false;\n                const errMsg = 'An error occurred when requesting to join. Try again';\n                this._dataLayer.openDynamicSnackBar(errMsg, 'error');\n            });\n    }\n}","<div class=\"px-20 pt-20\">\n    <h3 mat-dialog-title class=\"pb-3\">Request to join {{ data?.organization.name }}</h3>\n    <div mat-dialog-content class=\"text-muted\">\n        Kindly confirm that you would indeed like to join {{ data?.organization.name }}.\n        Once the request is sent, the administrator of the organization has to accept\n        your request for you to be part of the organization.\n    </div>\n    <div mat-dialog-actions class=\"pt-5 d-flex justify-content-end pb-20\">\n        <button mat-button mat-dialog-close>\n            CLOSE\n        </button>\n        <button type=\"submit\" mat-button\n        [disabled]=\"loading\" [class.spinner]=\"loading\"\n        (click)=\"requestToJoin()\">\n            SEND REQUEST\n        </button>\n    </div>\n</div>","<div class=\"w-100-p h-100-p\" fxLayout=\"row\">\n    <div class=\"\" fxFlex=\"100%\" fxFlex.gt-sm=\"80%\">\n        <div class=\"pb-32\">\n            <mat-toolbar class=\"px-5 mat-elevation-z1 bg-white\">\n                <span>E-FUND</span>\n            </mat-toolbar>\n        </div>\n        <!-- Start of filter form -->\n        <div class=\"container-wrapper container-wrapper-lg flex-column\">\n            <div class=\"w-100-p bread-crumbs d-flex align-items-center pb-24\">\n                <div class=\"pr-3\">\n                    <mat-icon class=\"btn-icon text-muted\">business</mat-icon>\n                </div>\n                <div class=\"mt-n2\">\n                    <a routerLink=\"/select-organization/list\"\n                    class=\"font-size-16\">My Organizations</a>\n                </div>\n                <div>\n                    <mat-icon class=\"btn-icon text-muted\">keyboard_arrow_right</mat-icon>\n                </div>\n                <div  class=\"mt-n2\">\n                    <span class=\"text-muted font-size-16\">\n                        Search Organization\n                    </span>\n                </div>\n            </div>\n            <div class=\"bg-white mat-elevation-z1\" fxFlex=\"100%\" \n            fxFlex.gt-md=\"75%\">\n                <div class=\"side-content bg-white\" fxLayout=\"column\">\n                    <div class=\"w-100-p px-28 pt-20 mb-3\">\n                        <span class=\"text-muted\">\n                            Search organizations by name and type.\n                        </span>\n                    </div>\n                    <form [formGroup]=\"orgForm\" (ngSubmit)=\"submitSearch(orgForm)\">\n                        <div class=\"pt-0 px-0 pt-8 pb-12\">\n                            <div class=\"d-flex pl-3\">\n                                <div class=\"d-flex flex-fill\">\n                                    <div class=\"input-wrapper col-lg-6\">\n                                        <mat-form-field appearance=\"outline\" color=\"primary\"\n                                        class=\"w-100-p pb-0 mb-0\">\n                                            <mat-label>Organization Name*</mat-label>\n                                            <input matInput placeholder=\"Enter the name of the organization\" \n                                            [ngClass]=\"{ 'is-invalid': f.name.invalid && (f.name.touched || f.name.dirty) }\"\n                                            class=\"\" formControlName=\"name\" />\n                                        </mat-form-field>\n                                        <div *ngIf=\"f.name.invalid && (f.name.touched || f.name.dirty)\" \n                                        class=\"invalid-feedback\">\n                                            <div *ngIf=\"f.name.errors.required\">Organization name is required</div>\n                                        </div>\n                                    </div>\n                                    <div class=\"input-wrapper col-lg-6\">\n                                        <mat-form-field appearance=\"outline\" color=\"primary\"\n                                        [floatLabel]=\"f.organizationType.value ? 'always' : ''\"\n                                        class=\"w-100-p mb-0\">\n                                            <mat-label>Organization Type</mat-label>\n                                            <ng-select [items]=\"organizationTypes\"\n                                                matInput ngSelectMat\n                                                class=\"flex-fill px-0\" appendTo=\"body\"\n                                                bindLabel=\"org_type_code\"\n                                                bindValue=\"id\"\n                                                loadingText=\"Loading organization types\"\n                                                [hideSelected]=\"true\"\n                                                [searchable]=\"false\"\n                                                formControlName=\"organizationType\"\n                                                [multiple]=\"false\"\n                                                notFoundText=\"No result matched your search\"\n                                                [closeOnSelect]=\"true\">\n                                                <ng-template ng-label-temp let-item=\"item\">\n                                                    {{ item?.org_type_code }}\n                                                </ng-template>\n                                                <ng-template ng-option-tmp let-item=\"item\"\n                                                let-index=\"index\">\n                                                    {{item?.org_type_code }}\n                                                </ng-template>\n                                            </ng-select>\n                                        </mat-form-field>\n                                    </div>\n                                </div>\n                                <div class=\"input-wrapper pt-8 pl-16 pr-24\">\n                                    <button mat-stroked-button color=\"accent\"\n                                    class=\"pl-3 py-1 mt-n1\" type=\"submit\">\n                                        <mat-icon class=\"btn-icon \">\n                                            search\n                                        </mat-icon>\n                                        &nbsp;Search\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n            </div>\n\n            <!-- Start of grid -->\n            <div class=\"w-100-p d-flex pt-20 container-wrapper \n            container-wrapper-lg px-0 mb-24\">\n                <div class=\"w-100-p px-0 bg-white border-radius-2\n                mat-elevation-z1\">\n                    <div class=\"w-100-p py-12 pl-24 font-size-16 text-muted\">\n                        Search Results\n                    </div>\n                    <table class=\"table\">\n                        <thead class=\"thead-light\">\n                            <tr>\n                                <th class=\"pl-24\">Name</th>\n                                <th>Organization Type</th>\n                                <th [style.width.px]=\"1\"></th>\n                            </tr>\n                        </thead>\n                        <tbody *ngIf=\"!loading\">\n                            <tr *ngFor=\"let org of list\">\n                                <td class=\"pl-24 align-middle\" valign=\"middle\">{{ org?.name }}</td>\n                                <td class=\"align-middle\">\n                                    <span class=\"badge border-radius-8 \n                                    py-2 px-8 badge-warning\">\n                                        {{ org?.org_type_code | removeUnderscore }}\n                                    </span>\n                                </td>\n                                <td [style.width.px]=\"1\" class=\"pr-20\">\n                                    <button mat-stroked-button color=\"accent\"\n                                    [disabled]=\"org?.request\"\n                                    (click)=\"selectOrganization(org)\"\n                                    >{{ org?.request? 'Already Requested' : 'Request To Join' }} </button>\n                                </td>\n                            </tr>\n                            <tr *ngIf=\"!list.length\">\n                                <td colspan=\"3\">\n                                    <div>\n                                        <div class=\"alert alert-primary mb-0 pb-2 pt-3\">\n                                            <div class=\"d-flex align-items-center\">\n                                                <div class=\"pr-20\">\n                                                    <mat-icon>\n                                                        info_circle\n                                                    </mat-icon>\n                                                </div>\n                                                <div class=\"flex-fill\">\n                                                    There are no matches for <b>{{ f.name.value }}</b>. \n                                                    Kindly try another name and try searching again.\n                                                </div>\n                                                <div class=\"pr-8\">\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </td>\n                            </tr>\n                        </tbody>\n                        <tbody *ngIf=\"loading\">\n                            <tr *ngIf=\"loading\">\n                                <td colspan=\"3\">\n                                    <div class=\"w-100-p d-flex justify-content-center py-20\">\n                                        <mat-spinner diameter=\"42\"></mat-spinner>\n                                    </div>\n                                </td>\n                            </tr>\n\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n            <!-- End of grid -->\n        </div>\n        <!-- End of filter form -->\n    </div>\n    <div fxFlex=\"20%\"  fxFlex.gt-md=\"20%\" fxHide.lt-md\n    class=\"h-100-p mat-elevation-z1 bg-white\">\n        <div class=\"title border-bottom py-20 px-20\">\n            <div class=\"font-size-16 text-muted\">Why search organizations?</div>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute }  from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { JoinRequestDialogComponent } from '../join-request-dialog/join-request-dialog.component';\n\nimport { DataLayerService } from 'app/services/http/dataLayer.service';\nimport { Authorization } from 'app/services/authorization.service';\nimport { find, indexOf, isUndefined } from 'lodash';\n\n@Component({\n    selector: 'search-organization',\n    templateUrl: './search-organization.component.html',\n    styleUrls: ['../list-organizations/list-organizations.component.scss',\n        '../preselect-dialog/preselect-dialog.component.scss'],\n    providers: [DataLayerService],\n})\n\nexport class SearchOrganizationComponent implements OnInit {\n    paramObj: any;\n    orgForm: FormGroup;\n    list: Array<any> = [];\n    loading: boolean;\n    addRouteParams: any = { current: 1 };\n    organizationTypes: Array<any> = [];\n    // grid configs\n    headers: Array<any> = [\n        { title: 'Name' },\n        { title: 'Contacts' },\n        { title: 'Actions' }\n    ];\n\n    rows: Array<any> = [\n        { key: 'name', type: 'string' },\n        { key: 'org_type_code', type: 'string' },\n    ];\n\n    actions:Array<any> = [\n        {\n            btnText: 'Request to Join',\n            status: 'accent',\n            icon: false,\n            disableStatus: 'FINISHED',\n            action: 'tabDetails',\n            modalConf: {\n                link: '/organizations/details',\n                queryParams: { current: 1, step: 1 },\n            }\n        },\n    ];\n    user: any;\n    organization: any;\n    // end of grid configs\n\n    constructor(private _route: ActivatedRoute,\n        private _formBuilder: FormBuilder,\n        private _authConfig: Authorization,\n        private _dataLayer: DataLayerService,\n        public dialog: MatDialog,\n        private route: Router,\n    ) {}\n\n    get f() { return this.orgForm.controls }\n\n    formInit() {\n        this.orgForm = this._formBuilder.group({\n            name: ['', Validators.required],\n            organizationType: ['', Validators.required],\n        });\n    }\n\n    submitSearch(frm) {\n        if (frm.valid) {\n            const params = frm.value;\n            this.searchOrganizations(params);\n        }\n    }\n\n    prefillForm(paramsModel) {\n        const paramsObj = { ...paramsModel };\n        paramsObj.organizationType = parseInt(\n            paramsObj.organizationType, 10);\n        this.f.name.setValue(paramsObj.name);\n        this.f.organizationType.setValue(paramsObj.organizationType);\n    }\n\n    openDialog(org?) {\n        const dialogRef = this.dialog.open(JoinRequestDialogComponent, {\n            data: { \n                user: this.user,\n                organization: org,\n            },\n            width: '50%',\n        });\n\n        dialogRef.afterClosed().subscribe(resp => {\n            if (!isUndefined(resp)) {\n                const params = {\n                    name: this.f.name.value,\n                    organizationType: this.f.organizationType.value,\n                }\n                this.searchOrganizations(params);\n            }\n        })\n    }\n\n    selectOrganization(org) {\n        this.openDialog(org);\n    }\n\n    searchOrganizations(params?) {\n        const fetchParams = {\n            search: params.name,\n            org_type: params.organizationType,\n        }\n        this.loading = true;\n        this._dataLayer.list('organizations', fetchParams)\n            .subscribe(resp => {\n                this.loading = false;\n                this.list = resp['results'];\n                this.fetchMyJoinRequests();\n            }, err => {\n                console.log(err);\n                this.loading = false;\n            });\n    }\n\n    fetchMyJoinRequests() {\n        const getParams = {\n            requester: this.user['id'],\n        };\n        this._dataLayer.list('organization-join-requests', getParams)\n            .subscribe(resp => {\n                const arrCont = resp['results'];\n                arrCont.forEach(request => {\n                    const ind = indexOf(this.list, find(\n                        this.list, { id: request.organization }));\n                    if (ind >= 0) this.list[ind].request = request;\n                })\n            }, err => {\n                console.log(err);\n            })\n    }\n\n    fetchURLParams() {\n        this._route.queryParams.subscribe(params => {\n            this.prefillForm(params);\n            this.paramObj = { ...params, limit: 15 };\n            this.addRouteParams = { ...this.addRouteParams, ...params };\n            this.searchOrganizations(params);\n        }, err => console.log(err));\n    }\n\n    fetchOrgTypes() {\n        this._dataLayer.list('organization-types', {})\n        .subscribe(resp => {\n            this.organizationTypes = resp['results'];\n            if (this.organizationTypes['length']) {\n                this.organizationTypes.map(orgType => {\n                    orgType.org_type_code = orgType.org_type_code.replace(/_/g, ' ');\n                    return orgType;\n                });\n            }\n        }, err => console.log(err));\n    }\n\n    ngOnInit() {\n        this.loading = true;\n        this.user = JSON.parse(this._authConfig.getUser());\n        this.organization = JSON.parse(this._authConfig.getOrganization());\n        this.formInit();\n        this.fetchOrgTypes();\n        this.fetchURLParams();\n    }\n}","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'add-organization',\n    templateUrl: 'add-organization.component.html',\n    styleUrls: ['../list-organizations/list-organizations.component.scss'],\n})\n\nexport class AddOrganizationComponent {\n\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ReactiveFormsModule, FormsModule }  from '@angular/forms';\n\nimport { MatListModule } from '@angular/material/list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\n\nimport { NgSelectModule } from '@ng-select/ng-select';\n\nimport { FuseSharedModule } from '@fuse/shared.module';\nimport { FusePipesModule } from '@fuse/pipes/pipes.module';\nimport { HttpModule } from '../../services/http/http.module';\nimport { DynamicTableModule } from '@fuse/components/dynamic-table/dynamic-table.module';\nimport { DynamicFormModule } from '@fuse/components/dynamic-form/dynamic-form.module';\nimport { \n    StepperWrapperModule\n} from '@fuse/components/stepper-wrapper/stepper-wrapper.module';\nimport { \n    SelectOrganizationRoutingModule \n} from './select-organization-routing.module';\n\nimport { \n    ListOrganizationComponent \n} from './list-organizations/list-organizations.component';\nimport { \n    SearchOrganizationComponent \n} from './search-organization/search-organization.component';\nimport {\n    PreselectOrganizationDialog\n} from './preselect-dialog/preselect-dialog.component';\nimport {\n    AddOrganizationComponent\n} from './add-organization/add-organization.component';\nimport { \n    JoinRequestDialogComponent\n } from './join-request-dialog/join-request-dialog.component';\n\n@NgModule({\n    imports: [\n        HttpModule,\n        RouterModule,\n        CommonModule,\n        FormsModule,\n        MatListModule,\n        MatIconModule,\n        MatInputModule,\n\n        NgSelectModule,\n        MatButtonModule,\n        FuseSharedModule,\n        FusePipesModule,\n        MatDividerModule,\n        MatMenuModule,\n        MatDialogModule,\n        MatProgressSpinnerModule,\n        MatToolbarModule,\n        \n        DynamicFormModule,\n        DynamicTableModule,\n        MatFormFieldModule,\n        ReactiveFormsModule,\n        StepperWrapperModule,\n        SelectOrganizationRoutingModule,\n    ],\n    declarations: [\n        AddOrganizationComponent,\n        ListOrganizationComponent,\n        SearchOrganizationComponent,\n        PreselectOrganizationDialog,\n        JoinRequestDialogComponent,\n    ],\n})\n\nexport class SelectOrganizationModule {}","import { RouterModule, Routes } from '@angular/router';\nimport { NgModule } from '@angular/core';\n\nimport { PageContainerComponent } from '@fuse/components/page-container/page-container.component';\n\nimport { ListOrganizationComponent } from './list-organizations/list-organizations.component';\nimport { SearchOrganizationComponent } from './search-organization/search-organization.component';\nimport { AddOrganizationComponent } from './add-organization/add-organization.component';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: PageContainerComponent,\n        children: [\n            { path: '', redirectTo: 'list', pathMatch: 'full' },\n            { path: 'list', component: ListOrganizationComponent },\n            { path: 'search', component: SearchOrganizationComponent },\n            { \n                path: 'add', \n                component: AddOrganizationComponent,\n                data: {\n                    stepsKey: 'organization',\n                    context: 'Organization',\n                    listRoute: '/select-organization'\n                }\n            },\n        ],\n    }\n]\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\n\nexport class SelectOrganizationRoutingModule {}","<div class=\"w-100-p h-100-p\" fxLayout=\"row\">\n    <div class=\"\" fxFlex=\"100%\" fxFlex.gt-sm=\"80%\">\n        <div class=\"pb-0\">\n            <mat-toolbar class=\"px-5 mat-elevation-z1 bg-white\">\n                <span>E-FUND</span>\n            </mat-toolbar>\n        </div>\n        <!-- Start of filter form -->\n        <div class=\"container-wrapper container-wrapper-xl flex-column pt-0\">\n            <!-- Start of stepper -->\n            <stepper-wrapper></stepper-wrapper>\n            <!-- End of stepper -->\n        </div>\n    </div>\n    <div fxFlex=\"20%\"  fxFlex.gt-md=\"20%\" fxHide.lt-md\n    class=\"h-100-p mat-elevation-z1 bg-white\">\n        <div class=\"title border-bottom py-20 px-20\">\n            <div class=\"font-size-16 text-muted\">What information do I need?</div>\n        </div>\n    </div>\n</div>"]}